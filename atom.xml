<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yo.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://powerlrl.gitee.io/"/>
  <updated>2020-03-30T13:30:12.738Z</updated>
  <id>https://powerlrl.gitee.io/</id>
  
  <author>
    <name>Yo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>axios</title>
    <link href="https://powerlrl.gitee.io/2020/03/30/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/axios/"/>
    <id>https://powerlrl.gitee.io/2020/03/30/前端/笔记/axios/</id>
    <published>2020-03-30T08:16:01.851Z</published>
    <updated>2020-03-30T13:30:12.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><code>axios({config})     axios的参数为一个对象</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  url: <span class="string">'http://123.207.32.32:8000/home/multidata'</span>,</span><br><span class="line">  method: <span class="string">'GET'</span>  <span class="comment">// POST</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios.get(url,params)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios.post(url,params)</span><br></pre></td></tr></table></figure></div><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><p><strong>并发请求</strong></p><p>使用axios.all，可以放入多个请求的数组</p><p>axios.all([])返回的结果为一个数组，使用axios.spread可以将数组展开</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.all([axios(&#123;</span><br><span class="line">  url: <span class="string">'http://123.207.32.32:8000/home/multidata'</span>,</span><br><span class="line">&#125;),axios(&#123;</span><br><span class="line">  url: <span class="string">'http://123.207.32.32:8000/home/data'</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">'sell'</span>,</span><br><span class="line">    page: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)])</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)        <span class="comment">//[&#123;..&#125;,&#123;..&#125;]</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用axios可以将数组展开</span></span><br><span class="line">.then(axios.spread(<span class="function">(<span class="params">res1,res2</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res1)     <span class="comment">//&#123;...&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(res2)     <span class="comment">//&#123;...&#125;</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></div><h4 id="配置相关信息"><a href="#配置相关信息" class="headerlink" title="配置相关信息"></a>配置相关信息</h4><p>公共根url配置</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = &apos;http....&apos;</span><br></pre></td></tr></table></figure></div><p>公共配置时间    </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios.defaults.timeout = 毫秒</span><br></pre></td></tr></table></figure></div><h4 id="创建axios实例"><a href="#创建axios实例" class="headerlink" title="创建axios实例"></a>创建axios实例</h4><p>上面的都是全局配置，肯定不安全。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> intance1 = axios.create(&#123;</span><br><span class="line">baseURL: <span class="string">'http://123.207.32.32:8000'</span>,</span><br><span class="line">timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance1(&#123;</span><br><span class="line">url: <span class="string">'/home/'</span>，</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios"></a>封装axios</h4><p><strong>封装一个axios为一个函数</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> intance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://123.207.32.32:8000'</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> intance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>组件中使用，导入request</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">'......'</span></span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line"></span><br><span class="line">url: <span class="string">'...'</span>,</span><br><span class="line"></span><br><span class="line">    params: &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">.catch()</span><br></pre></td></tr></table></figure></div><p>不过我认为挂载在vue的原型中比较好理解</p><p><strong>原型挂载</strong></p><p>根目录中创建http.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'http://123.207.32.32:8000'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br></pre></td></tr></table></figure></div><p>main.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'./http'</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$http = http</span><br></pre></td></tr></table></figure></div><p>组件中使用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> fethA()&#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.$http(&#123;</span><br><span class="line">        url: <span class="string">'/home/multidata'</span>,</span><br><span class="line">        params: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p><strong>请求拦截</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截  </span></span><br><span class="line"><span class="comment">// 请求成功拦截，请求失败拦截</span></span><br><span class="line">http.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(config)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p><code>需要注意，请求拦截成功之后，必须return ，不然其他请求则会获取不到数据。发生报错，。</code></p><p>使用场景：</p><ul><li>更改header(config中不符合服务器配置)</li><li>网络请求显示动画</li><li>某些网络请求携带（token），必须携带一些特殊信息</li></ul><p><strong>响应拦截</strong></p><p><code>这里可以做登录验证成功，失败，给出提示信息</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应拦截  成功，失败</span></span><br><span class="line">http.interceptors.response.use(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> result.data   <span class="comment">//可以只返回result中的data，才是有效数据</span></span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p><code>拦截之后处理完数据。一定要返回，要不然请求/响应都获取不到</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h3&gt;&lt;h4 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参
      
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="请求数据" scheme="https://powerlrl.gitee.io/tags/%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="https://powerlrl.gitee.io/2020/02/28/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/vue/"/>
    <id>https://powerlrl.gitee.io/2020/02/28/前端/笔记/vue/</id>
    <published>2020-02-28T02:51:59.553Z</published>
    <updated>2020-02-28T03:07:49.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h3><p>创建全局组件的两种方式</p><ul><li>利用构造器（extend）</li><li>vue.component方式</li></ul><p>局部组件的创建方式，具有独立的作用域，只能在自己内部访问，如果需要则传值解决</p><ul><li>组件的data必须是一个函数，且必须返回一个对象</li><li>只能有一个根元素</li></ul><p><code>父子组件(这样就可以只暴露父组件，而不要把所有的组件都暴露出来)</code></p><p>组件中可以使用template标签，来在外面定义所需要的没有高亮。</p><p><code>上面的不管是什么方式都写的感觉很恶心，所以最好的解决方法是，把一各个组件都拆分成对应的.vue</code></p><h4 id="父子组件相互通信"><a href="#父子组件相互通信" class="headerlink" title="父子组件相互通信"></a>父子组件相互通信</h4><blockquote><p>父组件要想给子组件传送值，必须使用props属性，子组件要想给父组件传送值是不能使用props这样必然是会报错的。我们应是使用自定义事件机制。this.$emit(‘父组件上的自定义的事件名’，参数1)；</p></blockquote><h5 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycom</span> <span class="attr">:pretmsg</span>=<span class="string">'msg'</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data:&#123;</span></span><br><span class="line"><span class="javascript">        msg: <span class="string">'父组件的数据'</span>,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      components:&#123;</span></span><br><span class="line"><span class="undefined">        mycom:&#123;</span></span><br><span class="line"><span class="xml">          template: `<span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件&#123;&#123;pretmsg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">          props:[<span class="string">'pretmsg'</span>],</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;  </span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycom</span> @<span class="attr">func</span>=<span class="string">'show'</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">'com'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'myclick'</span>&gt;</span>点击我会调用父组件的方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 实例化子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> com2 = &#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">'#com'</span>,</span></span><br><span class="line"><span class="undefined">      methods:&#123;</span></span><br><span class="line"><span class="undefined">        myclick(data)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'func'</span>,<span class="number">23</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data:&#123;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      methods:&#123;</span></span><br><span class="line"><span class="undefined">        show(data)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'调用了父组件中的方法'</span>+data);<span class="comment">//这里的data相当于传参数给父组件</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      components:&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 'mycom':&#123;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//   template: '#com',</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// //调用父组件中的方法</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// methods:&#123;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//   myclick()&#123;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//     this.$emit('func');</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">          <span class="string">'mycom'</span>:com2</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>Vue中插槽可以分为匿名插槽和实名插槽</p><h4 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h4><p><code>(匿名插槽可以替代任何标签)</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/01.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mycom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">'com'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'main'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我真美<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 匿名插槽 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span>这是一个匿名插槽，如果没有则显示提示的内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>说的没错<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'mycom'</span>,&#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">'#com'</span>,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data:&#123;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="实名插槽"><a href="#实名插槽" class="headerlink" title="实名插槽"></a>实名插槽</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">'cpu'</span>&gt;</span>core i5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">'gpu'</span>&gt;</span>高清<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">'memory'</span>&gt;</span>8g<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mycom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">'tmp'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'panel'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'cpu'</span>&gt;</span>cpu的插槽<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'gpu'</span>&gt;</span>gpu的插槽<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'memory'</span>&gt;</span>内存条的插槽<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'mycom'</span>,&#123;</span></span><br><span class="line"><span class="javascript">      template: <span class="string">'#tmp'</span>,</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data:&#123;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="钩子函数与自定义指令"><a href="#钩子函数与自定义指令" class="headerlink" title="钩子函数与自定义指令"></a>钩子函数与自定义指令</h3><p>上面我们介绍了v-if，v-for等指令的使用，我们可不可以自己定义指令使用呢？答案当然是可以的。</p><p>首先我们在要绑定标签中写入我们要绑定的指令名称,假设我们要改变h3的颜色使每一个h3的颜色都是不同的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h3 v-rainbow&gt;我会变色&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div><p>那么在我们的js文件中，不能带v-,在这里我们使用钩子函数bind,第一个参数代表着是哪一个元素标签，第二个是参数，第三个是节点</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'rainbow'</span>，&#123;</span><br><span class="line">              bind(el,binding,vnode)&#123;</span><br><span class="line">    el.style.color=<span class="string">'#'</span>+<span class="built_in">Math</span>.random().toString().slice(<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>如果我们要传参数必须是字符，对象，数组</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div v-theme=&quot;&apos;wide&apos;&quot;&gt;我会变宽&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'theme'</span>，&#123;</span><br><span class="line">              bind(el,binding,vnode)&#123;</span><br><span class="line">    <span class="keyword">if</span>(binding.value == <span class="string">'wide'</span>)&#123;</span><br><span class="line">        el.style.maxWidth = <span class="string">'1280px'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        el.style.maxWidth = <span class="string">'800px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>如果我们传入像click这种参数的话</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div v-theme:bgc&gt;我会变宽&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'theme'</span>，&#123;</span><br><span class="line">              bind(el,binding,vnode)&#123;</span><br><span class="line">    <span class="keyword">if</span>(binding.arg==<span class="string">'bgc'</span>)&#123;</span><br><span class="line">        el.style.background=<span class="string">'red'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>在这个管道的右边，是我们的过滤器名称</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-rainbow</span>&gt;</span>&#123;&#123;blog.title | to-upercase&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义过滤器</span></span><br><span class="line">Vue.filter(<span class="string">'to-upercase'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.toUpperCase();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>我们用一个函数来接受value这里的value是我们管道中左边的值，</p><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>模板内的表达式的是非常便利的，但是如果过多逻辑会变得更加难以维护，</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>官网的例子已经告诉我们，如果我们想要反转字符串，就会显得模板的的任务过于复杂，所以我们可以利用计算属性，来达到我们想要的结果。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>上面的例子很好理解了，这里的是直接走get方法，默认把属性和get方法结合在一起用。</p></blockquote><p><strong>分开写</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    reversedMessage: &#123;</span><br><span class="line">        get()&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p><strong>监听者（watch）</strong></p><p>watch可以分为对<code>基本类型</code>，<code>引用类型</code>的监听。基本类型主要监听你要监听的即可，引用类型是深度监听，主要是对于数组，对象。</p><p><strong>如果要监听一个todos的数组的变化</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    ....</span><br><span class="line">    todos: &#123;</span><br><span class="line">        handler()&#123;</span><br><span class="line">            ..设置变化</span><br><span class="line">        &#125;，</span><br><span class="line">        deep: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li>全局的自定义指令（directive）</li><li>自定义的自定义指令（directives）</li></ul><p><strong>自定义指令中的钩子函数</strong></p><p><code>bind、inserted、update、componentUpdated、unbind</code></p><p><code>bind中不可上来就聚焦focus（），所以要使用inserted（官网实例）</code></p><p>区别：<em>bind和inserted的区别：bind获取不到父元素节点(上来就只执行一次)，而inserted是可以获取到父元素。</em></p><p><em>update获取的是模版跟新过前的内容，componentUpdated获取的是更新之后的内容，具体使用要看需求</em></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'demo'</span>,&#123;</span><br><span class="line">       bind (el,binding) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(el,el.parentNode)</span><br><span class="line">       &#125;,</span><br><span class="line">       inserted (el) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(el,el.parentNode)</span><br><span class="line">       &#125;,</span><br><span class="line">      update (el) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'update'</span>,el.innerHTML)</span><br><span class="line">      &#125;,</span><br><span class="line">      componentUpdated (el) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'component'</span>,el,innerHTML)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></div><p>通常会把bind和update结合在一起用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'demo'</span>,(el,binding)&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p><em>利用自定义指令模拟v-bind（：）的实现</em></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h2 v-my-bind:title=<span class="string">'message'</span>&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" v-model='message'&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">'my-bind'</span>,&#123;</span><br><span class="line">      bind(el,binding)&#123;</span><br><span class="line">        el.setAttribute(binding.arg,binding.value)</span><br><span class="line">      &#125;,</span><br><span class="line">      update (el,binding) &#123;</span><br><span class="line">        el.setAttribute(binding.arg,binding.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></div><p>简写</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">'my-bind'</span>,(el,binding) =&gt; &#123;</span><br><span class="line">      el.setAttribute(binding.arg,binding.value)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></div><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><blockquote><p>vue的一款组件类库，网站的快速成型工具，由饿了么团队开发。</p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>npm安装</li><li>引入Index.css文件</li><li>引入index.js文件</li><li>前提是一定要引入了vue或者是在vue-cli中使用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue组件&quot;&gt;&lt;a href=&quot;#vue组件&quot; class=&quot;headerlink&quot; title=&quot;vue组件&quot;&gt;&lt;/a&gt;vue组件&lt;/h3&gt;&lt;p&gt;创建全局组件的两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用构造器（extend）&lt;/li&gt;
&lt;li&gt;vue.compon
      
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://powerlrl.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Github+Jsdelivr+Picgo搭建免费图床</title>
    <link href="https://powerlrl.gitee.io/2020/02/28/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <id>https://powerlrl.gitee.io/2020/02/28/图床搭建/</id>
    <published>2020-02-28T02:39:48.460Z</published>
    <updated>2020-02-28T02:49:19.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>图床：存放图片的服务器。用过的图床有：qq空间，sm包括一些其他的七里云（反正最后要域名还要备案，果断放弃）用了一段时间的sm，虽然很好用但是无奈加载速度感人，存放图片我也不知道在哪里可以看到，登录也非常的粗糙。放弃</p></blockquote><h2 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h2><p><strong>你需要在你的github中新建一个仓库例如叫（picture）</strong></p><p><a href="https://cdn.jsdelivr.net/gh/powerlrl/imgBed/blog/img6`$R43~W$7$R{QIP1N`XL1R.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="https://cdn.jsdelivr.net/gh/powerlrl/imgBed/blog/img6`$R43~W$7$R{QIP1N`XL1R.png" class="lazyload"></a></p><p><strong>在主页中，找到设置，找到生成token的地方，生成一个token。一般这个token中只出现一次，一定要保存起来</strong></p><p><strong>生成token</strong></p><ul><li>进入个人中心的`settings/Developer settings/Personal access tokens</li></ul><p><a href="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222175705.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:80%;" data-src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222175705.png" class="lazyload"></a></p><ul><li>点击<code>Generate new token</code>。生成token这样方便我们通过PicGo来快捷的上传图片到github仓库。</li></ul><p><a href="https://cdn.jsdelivr.net/gh/powerlrl/imgBed/blog/img}XI0ZEK$1]L]XL`_I}X{R~8.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="https://cdn.jsdelivr.net/gh/powerlrl/imgBed/blog/img}XI0ZEK$1]L]XL`_I}X{R~8.png" class="lazyload"></a></p><ul><li>勾选repo</li></ul><p><a href="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222180023.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:80%;" data-src="https://cdn.jsdelivr.net/gh/MarMomento/image/20191222180023.png" class="lazyload"></a></p><p>复制token**</p><h2 id="PicG配置"><a href="#PicG配置" class="headerlink" title="PicG配置"></a>PicG配置</h2><p>下载地址 <a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a> </p><p>仓库名：用户名+新建的仓库名</p><p>分支名：一般为master</p><p>设定token：刚才copy的token</p><p>指定存储路径：仓库下面没有这个文件夹，会新建文件夹</p><p>设定自定义的域名：前面的的jsdelivr.net就是我们所用的加速cdn，快速访问到图片。gh代表用的GitHub，后面是用户名+仓库名</p><p><a href="https://cdn.jsdelivr.net/gh/powerlrl/imgBed/blog/img9JLWY`1IYMPJDT33]Q`0~~G.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="https://cdn.jsdelivr.net/gh/powerlrl/imgBed/blog/img9JLWY`1IYMPJDT33]Q`0~~G.png" class="lazyload"></a></p><p>如果想整批提交多个文件，建议使用git，把整个文件拉下来，再push上去。</p><h2 id="JSdelivr配置"><a href="#JSdelivr配置" class="headerlink" title="JSdelivr配置"></a>JSdelivr配置</h2><p><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">官网地址</a>可以自己去看下，这个是国外的一款cdn加速访问。我一开始以为要配置什么东西，最后发现不要。只要再链接前加入<a href="https://cdn.jsdelivr.net就行了，后面的自己定义。（速度真的很快。）" target="_blank" rel="noopener">https://cdn.jsdelivr.net就行了，后面的自己定义。（速度真的很快。）</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>免费图床真香。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;图床：存放图片的服务器。用过的图床有：qq空间，sm包括一些其他的七里云（反正最后要域名还要备案，果断放弃）用了一段时间的sm，虽然很好用但是无奈加载速度感人，存放图片我也不知道在哪里可以看到，登录也非常的粗糙。放弃&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Github" scheme="https://powerlrl.gitee.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>vuex</title>
    <link href="https://powerlrl.gitee.io/2020/02/27/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/vuex/"/>
    <id>https://powerlrl.gitee.io/2020/02/27/前端/笔记/vuex/</id>
    <published>2020-02-27T13:47:43.385Z</published>
    <updated>2020-03-30T08:14:53.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vuex工作流程"><a href="#vuex工作流程" class="headerlink" title="vuex工作流程"></a>vuex工作流程</h3><p><a href="/2020/02/27/前端/笔记/vuex/C:/Users\LRY-NB\Desktop\img\Snipaste_2020-02-15_13-14-08.png" data-fancybox="group" data-caption="Snipaste_2020-02-15_13-14-08" class="fancybox"><img alt="Snipaste_2020-02-15_13-14-08" title="Snipaste_2020-02-15_13-14-08" data-src="/2020/02/27/前端/笔记/vuex/C:/Users\LRY-NB\Desktop\img\Snipaste_2020-02-15_13-14-08.png" class="lazyload"></a></p><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>store是一个仓库，里面包含了<code>state,mutation,actions</code>,创建完仓库我们要把挂载到根组件中，这样可以确保，所有的子组件都可以访问到vuex中的数据，通过（this.$store）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根组件</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store仓库</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state:&#123;</span><br><span class="line">total: <span class="number">0</span>,</span><br><span class="line">goods: [</span><br><span class="line">&#123;<span class="attr">title</span>: <span class="string">'iphone'</span>,<span class="attr">price</span>: <span class="number">3000</span>,<span class="attr">num</span>: <span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>: <span class="string">'mi'</span>,<span class="attr">price</span>: <span class="number">4000</span>,<span class="attr">num</span>: <span class="number">2</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p><code>state</code>你可以理解为是我们仓库中<strong>存放数据</strong>的地方，那么组件该如何获取state中的数据呢？</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">totalPrice: <span class="keyword">this</span>.$store.state.total</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里为什么要用计算属性呢，是因为如果vuex中的数据发生了变换，对应的页面也会适应更新</span></span><br></pre></td></tr></table></figure></div><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><p>有时候我们需要从store中的state来改变一些新的状态，例如过滤。类似计算属性</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">totalPrice()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.$store.state.goods.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">item.price &gt; <span class="number">10000</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果你有许多个组件都需要使用这个函数，那么你必须在每个组件中把这段代码复制过去。</p><blockquote><p>vuex中允许我们在store中定义getter属性，可以认为是store的计算属性。返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p></blockquote><p><code>getters接受第一个参数为state，第二个参数为getters</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state: &#123;</span><br><span class="line"> total: <span class="number">0</span>,</span><br><span class="line"> goods: [</span><br><span class="line">&#123;<span class="attr">title</span>: <span class="string">'iphone'</span>,<span class="attr">price</span>: <span class="number">3000</span>,<span class="attr">num</span>: <span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>: <span class="string">'mi'</span>,<span class="attr">price</span>: <span class="number">4000</span>,<span class="attr">num</span>: <span class="number">2</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">getters: &#123;</span><br><span class="line">handle: <span class="function"><span class="params">state</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> state.goods.filter(<span class="function"><span class="params">item</span>=&gt;</span>item.price &gt; <span class="number">300</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和上面相同，这个是es6的写法</span></span><br><span class="line">handle(state)&#123;</span><br><span class="line"><span class="keyword">return</span> state.goods.filter(<span class="function"><span class="params">item</span>=&gt;</span>item.price &gt;<span class="number">300</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p><code>通过属性进行访问</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">totalPrice()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.$store.getter.handle</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>传递参数</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    powerCount(state)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">age</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.students.filter(<span class="function"><span class="params">s</span> =&gt;</span> s.age &gt; age)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; $store.getters.powerCount(20) &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>返回一个函数即可以传递参数</strong></p><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p><code>前面的都不能对数据进行修改，mutation是专门对数据进行修改，且使用提交来进行修改</code>，mutation都是同步事务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">      <span class="comment">//接受state作为第一个参数，es6写法注意下。increment：function（state）&#123;&#125;</span></span><br><span class="line">      <span class="comment">//或者increment：state=&gt;state.count++</span></span><br><span class="line">    increment (state,params) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">      <span class="comment">//或者</span></span><br><span class="line">      state.count += params.mount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>你当然不能直接调用（this.$store.mutation.increment）当然是不可能的！必须使用<code>commit</code>来进行触发</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数为属性名，第二个是参数（载荷），可以是对象，或者其他基本类型。大多数为一个对象</span></span><br><span class="line">store.commit(<span class="string">'increment'</span>,params)</span><br><span class="line"><span class="comment">//如：</span></span><br><span class="line">store.commit(<span class="string">'increment'</span>,&#123;</span><br><span class="line">    mount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><blockquote><p>当然还有另一种的提交方式：对象风格的提交方式</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  type: <span class="string">'increment'</span>, <span class="comment">//事件类型</span></span><br><span class="line">  amount: <span class="number">10</span> <span class="comment">//参数，后续可以继续追加，获取得参数为一个对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p><code>当使用对象风格的提交方式，整个对象都作为载荷传个mutation函数，因此increment不用变</code></p><p><code>vuex中的响应式原理，例如你给一个对象增加一个属性，页面是不会发生修改的，这时需要使用vue.set方法，同理删除一个属性页面也不会发生修改，使用vue.delete即可</code></p><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><blockquote><ul><li>action 提交的是mutation，不是直接变更状态（state）</li><li>action可以执行任何异步的操作</li><li>参数为context，上下文。而不是和其他一样state</li></ul></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (&#123; commit &#125;)   <span class="comment">//这里使用的是解构赋值，action的一个参数为context（可以理解为store，store中有commit操作，也可以解构多个参数&#123;state,commit,rootState&#125;）</span></span><br><span class="line">    commit(<span class="string">'increment'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Action 通过 <code>store.dispatch</code> 方法触发：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.dispatch(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure></div><p>因此异步操作都可以放入action中，通过action再触发mutation</p><p>state</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">info: &#123;</span><br><span class="line">      name: <span class="string">'kebe'</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>mutations</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">updateInfo(state)&#123;</span><br><span class="line">      state.info.name = <span class="string">'codewhy'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>actions</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">aUpdateInfo(context)&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        context.commit(<span class="string">'updateInfo'</span>)</span><br><span class="line">      &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>组件中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;upd&quot;&gt;update&lt;/button&gt;</span><br><span class="line">upd()&#123;</span><br><span class="line">     this.$store.dispatch(&apos;aUpdateInfo&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><p><code>vuex将store分割成多个模块，每个模块拥有自己的state、mutation、action、getter，同样也可嵌套子模块，----以同样的方式进行分割</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></div><blockquote><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vuex工作流程&quot;&gt;&lt;a href=&quot;#vuex工作流程&quot; class=&quot;headerlink&quot; title=&quot;vuex工作流程&quot;&gt;&lt;/a&gt;vuex工作流程&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;/2020/02/27/前端/笔记/vuex/C:/Users\LRY-N
      
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://powerlrl.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>nuxt</title>
    <link href="https://powerlrl.gitee.io/2020/02/27/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/nuxt/"/>
    <id>https://powerlrl.gitee.io/2020/02/27/前端/笔记/nuxt/</id>
    <published>2020-02-27T13:47:18.103Z</published>
    <updated>2020-02-29T04:51:22.995Z</updated>
    
    <content type="html"><![CDATA[<h3 id="npx的使用"><a href="#npx的使用" class="headerlink" title="npx的使用"></a>npx的使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">举个列子：npm i create-react-app -g</span><br><span class="line">create-react-app myapp</span><br><span class="line">使用npx  npx create-react-app myapp</span><br></pre></td></tr></table></figure></div><p><code>类似与简化操作，创建一个myapp 默认把脚手架安装成功。npm 5.2.0默认安装了npx</code></p><h3 id="nuxt安装"><a href="#nuxt安装" class="headerlink" title="nuxt安装"></a>nuxt安装</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx create-nuxt-app hello-nuxt</span><br></pre></td></tr></table></figure></div><p><code>安装完成之后，有些配置项。根据自己的需要安装所需要的配置文件</code></p><h3 id="nuxt启动"><a href="#nuxt启动" class="headerlink" title="nuxt启动"></a>nuxt启动</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div><h3 id="nuxt配置"><a href="#nuxt配置" class="headerlink" title="nuxt配置"></a>nuxt配置</h3><h4 id="css配置"><a href="#css配置" class="headerlink" title="css配置"></a>css配置</h4><ul><li>安装 node-sass和load-sass（需要注意的是npm安装node-sass会有问题，需要切换到淘宝镜像源来进行单独安装）</li><li>到assets文件中新建css文件夹和style.css</li><li>再nuxt.config.js中修改css的配置为:‘@/assets/css/style.sass’</li><li>sass文件不能换行写，需要写在同一行之中</li></ul><h3 id="nuxt路由"><a href="#nuxt路由" class="headerlink" title="nuxt路由"></a>nuxt路由</h3><h5 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h5><p><code>传递参数：在页面中使用路由，使用nuxt-link标签，里面的to属性是路径</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nuxt-link :to=&quot;&apos;/detail/&apos; + item.id&quot;&gt;传递id为1&lt;/nuxt-link&gt;//id为需要传送的参数</span><br></pre></td></tr></table></figure></div><p><code>接受参数：detail文件下建立一个_id来接受传递的参数（_id为下划线+参数名称才能接受到参数）</code></p><p><strong>_id.vue中</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></div><h5 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h5><p><code>使用嵌套路由，需要在创建一个和文件夹同名的vue文件（在根路径中）在文件夹中是要嵌套的子路由</code></p><p><strong>根路由中的user文件</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用户列表&lt;/h1&gt;</span><br><span class="line">    &lt;nuxt-link to=&quot;/user/&quot;&gt;嵌套首页&lt;/nuxt-link&gt;</span><br><span class="line">    &lt;nuxt-link to=&quot;/user/profile&quot;&gt;嵌套详情页&lt;/nuxt-link&gt;</span><br><span class="line">    //下面一句话相当于路由转发，千万不要忘记</span><br><span class="line">    &lt;nuxt /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div><p><strong>文件夹中的子路由</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;嵌套页面-主页&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;嵌套页面-个人详情页&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div><h5 id="路由切换的动态效果"><a href="#路由切换的动态效果" class="headerlink" title="路由切换的动态效果"></a>路由切换的动态效果</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//终点</span><br><span class="line">.page-enter-active, .page-leave-active &#123;</span><br><span class="line">  transition: opacity .5s;</span><br><span class="line">&#125;</span><br><span class="line">//起点</span><br><span class="line">.page-enter, .page-leave-active &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="nuxt处理静态文件"><a href="#nuxt处理静态文件" class="headerlink" title="nuxt处理静态文件"></a>nuxt处理静态文件</h3><h4 id="assets文件下的"><a href="#assets文件下的" class="headerlink" title="assets文件下的"></a>assets文件下的</h4><p><code>该文件下的文件会被webpack所处理，可转换成base64或其他小一点的loader</code></p><h4 id="static文件下的"><a href="#static文件下的" class="headerlink" title="static文件下的"></a>static文件下的</h4><p><code>该文件夹下的资源文件不会被webpack所处理，像一些大的文件（background）之类的可以放在static之中</code></p><h3 id="nuxt请求异步数据"><a href="#nuxt请求异步数据" class="headerlink" title="nuxt请求异步数据"></a>nuxt请求异步数据</h3><p><code>json文件放在了static中的新建data文件夹下</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//获取json文件可使用axios，或者fetch等，静态资源文件请求加上/data（static下的文件夹名）/json文件名</span><br><span class="line">async asyncData()&#123;</span><br><span class="line">    const res = await axios.get(&apos;/data/test.json&apos;)</span><br><span class="line">    return &#123;</span><br><span class="line">      detail: res.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;npx的使用&quot;&gt;&lt;a href=&quot;#npx的使用&quot; class=&quot;headerlink&quot; title=&quot;npx的使用&quot;&gt;&lt;/a&gt;npx的使用&lt;/h3&gt;&lt;div class=&quot;code-area-wrap&quot;&gt;&lt;div class=&quot;highlight-tools&quot;&gt;
      
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://powerlrl.gitee.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://powerlrl.gitee.io/2020/02/27/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/"/>
    <id>https://powerlrl.gitee.io/2020/02/27/数据库/redis/</id>
    <published>2020-02-27T13:46:25.333Z</published>
    <updated>2020-02-29T04:57:55.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redis是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C语言" target="_blank" rel="noopener">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/数据库/103728" target="_blank" rel="noopener">数据库</a>，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。(Not only SQL)</p><p>redis是一个key-value<a href="https://baike.baidu.com/item/存储系统" target="_blank" rel="noopener">存储系统</a>。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(<a href="https://baike.baidu.com/item/链表" target="_blank" rel="noopener">链表</a>)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些<a href="https://baike.baidu.com/item/数据类型" target="_blank" rel="noopener">数据类型</a>都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p><code>速度快、持久化、多语言客服端（java、php、nodejs..、）简单、复制、高可用分布式、单线程、功能丰富（发布订阅、lua脚本、事务、piepline）</code>所以把redis称之为瑞士军刀。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">下载地址</a></p><p><a href="https://i.loli.net/2019/08/20/vWJN5idhlcCSz4e.png" data-fancybox="group" data-caption="Snipaste_2019-08-20_20-21-38.png" class="fancybox"><img alt="Snipaste_2019-08-20_20-21-38.png" title="Snipaste_2019-08-20_20-21-38.png" data-src="https://i.loli.net/2019/08/20/vWJN5idhlcCSz4e.png" class="lazyload"></a></p><p>解压到任意盘符中即可。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>1、在cmd中切换到你解压的目录，这样就是启动成功的亚子了。（<strong>服务端配置</strong>）</p><p><a href="https://i.loli.net/2019/08/20/xLGaZpbPX5evkET.png" data-fancybox="group" data-caption="Snipaste_2019-08-20_20-26-43.png" class="fancybox"><img alt="Snipaste_2019-08-20_20-26-43.png" title="Snipaste_2019-08-20_20-26-43.png" data-src="https://i.loli.net/2019/08/20/xLGaZpbPX5evkET.png" class="lazyload"></a></p><p>2、接下来，再打开一个cmd窗口，客户端的cmd千万不能关掉。（<strong>客户端配置</strong>）</p><p>再进入上面的目录，然后输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure></div><p>接下来就可以测试啦，但是这样很不友好，还要打开两个cmd窗口。</p><a id="more"></a><p>3、使用一个cmd窗口，我们一开始windows的服务中是没有redis的，只要把redis加入Windows服务中为自动即可，在解压的目录中命令行中输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server --service-install redis.windows-service.conf --loglevel verbose</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2019/08/20/CIeg1BvpkyD5aEm.png" data-fancybox="group" data-caption="Snipaste_2019-08-20_20-38-31.png" class="fancybox"><img alt="Snipaste_2019-08-20_20-38-31.png" title="Snipaste_2019-08-20_20-38-31.png" data-src="https://i.loli.net/2019/08/20/CIeg1BvpkyD5aEm.png" class="lazyload"></a></p><p>4、打开计算机管理（启动成功）</p><p><a href="https://i.loli.net/2019/08/20/4grPsWLHexiO6SR.png" data-fancybox="group" data-caption="Snipaste_2019-08-20_20-34-48.png" class="fancybox"><img alt="Snipaste_2019-08-20_20-34-48.png" title="Snipaste_2019-08-20_20-34-48.png" data-src="https://i.loli.net/2019/08/20/4grPsWLHexiO6SR.png" class="lazyload"></a></p><p>5、常用的redis服务命令。</p><p>​    卸载服务：redis-server –service-uninstall</p><p>​    开启服务：redis-server –service-start</p><p>​    停止服务：redis-server –service-stop</p><p>6、启动服务</p><p><a href="https://i.loli.net/2019/08/20/ofsMYHOJ5eZEAIX.png" data-fancybox="group" data-caption="Snipaste_2019-08-20_20-38-09.png" class="fancybox"><img alt="Snipaste_2019-08-20_20-38-09.png" title="Snipaste_2019-08-20_20-38-09.png" data-src="https://i.loli.net/2019/08/20/ofsMYHOJ5eZEAIX.png" class="lazyload"></a></p><p>7、测试服务</p><p><a href="https://i.loli.net/2019/08/20/n6uiUOXEQAlFI9w.png" data-fancybox="group" data-caption="Snipaste_2019-08-20_20-40-18.png" class="fancybox"><img alt="Snipaste_2019-08-20_20-40-18.png" title="Snipaste_2019-08-20_20-40-18.png" data-src="https://i.loli.net/2019/08/20/n6uiUOXEQAlFI9w.png" class="lazyload"></a></p><p><a href="https://i.loli.net/2019/08/20/hxLRSIDi7UjqQmg.png" data-fancybox="group" data-caption="Snipaste_2019-08-20_20-40-32.png" class="fancybox"><img alt="Snipaste_2019-08-20_20-40-32.png" title="Snipaste_2019-08-20_20-40-32.png" data-src="https://i.loli.net/2019/08/20/hxLRSIDi7UjqQmg.png" class="lazyload"></a></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>遍历所有key</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure></div><p>查询数据库长度dbsize</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure></div><p>批量设置key-vlaue（键值对）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mset k1 v1 k2 v2</span><br></pre></td></tr></table></figure></div><p>批量获取key，原子操作</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mget key1 key2 key3</span><br></pre></td></tr></table></figure></div><p>查询key值是否存在</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exists k1//返回0不存在，返回1存在</span><br></pre></td></tr></table></figure></div><p>删除指定的key-value</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure></div><p>获取到key所对应的value值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure></div><p>设置单个key和value</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure></div><p>设置key在多少秒过期</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expire key seconds</span><br></pre></td></tr></table></figure></div><p>查看key剩余的过期时间</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ttl key</span><br></pre></td></tr></table></figure></div><p>​    去掉key的过期时间</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">persist key</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Redis是一个开源的使用ANSI &lt;a href=&quot;https://baike.baidu.com/item/C语言&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C语言&lt;/a&gt;编写、支持网络、可基于内存亦可持久化的日志型、Key-Value&lt;a href=&quot;https://baike.baidu.com/item/数据库/103728&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据库&lt;/a&gt;，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。(Not only SQL)&lt;/p&gt;
&lt;p&gt;redis是一个key-value&lt;a href=&quot;https://baike.baidu.com/item/存储系统&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;存储系统&lt;/a&gt;。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(&lt;a href=&quot;https://baike.baidu.com/item/链表&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链表&lt;/a&gt;)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些&lt;a href=&quot;https://baike.baidu.com/item/数据类型&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据类型&lt;/a&gt;都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;p&gt;&lt;code&gt;速度快、持久化、多语言客服端（java、php、nodejs..、）简单、复制、高可用分布式、单线程、功能丰富（发布订阅、lua脚本、事务、piepline）&lt;/code&gt;所以把redis称之为瑞士军刀。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/microsoftarchive/redis/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/20/vWJN5idhlcCSz4e.png&quot; alt=&quot;Snipaste_2019-08-20_20-21-38.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;解压到任意盘符中即可。&lt;/p&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;1、在cmd中切换到你解压的目录，这样就是启动成功的亚子了。（&lt;strong&gt;服务端配置&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/20/xLGaZpbPX5evkET.png&quot; alt=&quot;Snipaste_2019-08-20_20-26-43.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、接下来，再打开一个cmd窗口，客户端的cmd千万不能关掉。（&lt;strong&gt;客户端配置&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;再进入上面的目录，然后输入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;redis-cli.exe -h 127.0.0.1 -p 6379&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来就可以测试啦，但是这样很不友好，还要打开两个cmd窗口。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://powerlrl.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://powerlrl.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Mysql</title>
    <link href="https://powerlrl.gitee.io/2020/02/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"/>
    <id>https://powerlrl.gitee.io/2020/02/27/数据库/mysql/</id>
    <published>2020-02-27T13:42:50.686Z</published>
    <updated>2020-02-27T16:10:27.294Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>GBK是在国家标准GB2312基础上扩容后兼容GB2312的标准（好像还不是国家标准）。GBK编码专门用来解决中文编码的，是双字节的。不论中英文都是双字节的。</li><li>UTF－8 编码是用以解决国际上字符的一种多字节编码，它对英文使用8位（即一个字节），中文使用24位（三个字节）来编码。对于英文字符较多的论坛则用UTF－8 节省空间。另外，如果是外国人访问你的GBK网页，需要下载中文语言包支持。访问UTF-8编码的网页则不出现这问题。可以直接访问</li></ol></blockquote><h3 id="day001"><a href="#day001" class="headerlink" title="day001"></a>day001</h3><h4 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h4><ul><li>关系型数据库（SQL）<code>二维表基本单位</code></li><li>非关系型数据库（NoSQL）<code>key-value存储</code>（mongodb，redis…）<ul><li>应用范围：<code>缓存、高并发...</code></li></ul></li></ul><h4 id="数据库中的操作"><a href="#数据库中的操作" class="headerlink" title="数据库中的操作"></a>数据库中的操作</h4><h6 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database tedu;</span><br></pre></td></tr></table></figure></div><h6 id="查看库"><a href="#查看库" class="headerlink" title="查看库"></a>查看库</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></div><h6 id="使用库"><a href="#使用库" class="headerlink" title="使用库"></a>使用库</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use  数据库名;</span><br></pre></td></tr></table></figure></div><h4 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h4><h6 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table lrl(id int,name varchar(20),age int(10),job varchar(30));//其中id占用11个字节，age占用1个字节，</span><br></pre></td></tr></table></figure></div><h6 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create table lrl;</span><br></pre></td></tr></table></figure></div><h6 id="表的引擎（engine）限制表中数据的操作"><a href="#表的引擎（engine）限制表中数据的操作" class="headerlink" title="表的引擎（engine）限制表中数据的操作"></a>表的引擎（engine）限制表中数据的操作</h6><ul><li>innodb：表中的数据支持高级操作（表、事务、外键、约束etc)</li><li>myisam：表中的数据只能进行增删改查的基本操作。</li></ul><h6 id="查看表的字段"><a href="#查看表的字段" class="headerlink" title="查看表的字段"></a>查看表的字段</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc lrl;</span><br></pre></td></tr></table></figure></div><h6 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table 表名；</span><br></pre></td></tr></table></figure></div><h6 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename table 原名 to 新名;</span><br></pre></td></tr></table></figure></div><h6 id="修改引擎和字符集"><a href="#修改引擎和字符集" class="headerlink" title="修改引擎和字符集"></a>修改引擎和字符集</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 engine = utf8/gbk（不是utf-8）</span><br><span class="line">engine = innodb/myisam</span><br><span class="line">charset=utf8/gbk</span><br></pre></td></tr></table></figure></div><h6 id="表中添加字段"><a href="#表中添加字段" class="headerlink" title="表中添加字段"></a>表中添加字段</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字段类型 after ***(某一个字段名)</span><br></pre></td></tr></table></figure></div><p>删除一个字段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop 字段名</span><br></pre></td></tr></table></figure></div><p><strong>作业</strong></p><blockquote><p>1.创建数据库newdb并使用，里面创建员工表emp，只有name字段，引擎为myisam，字符集为gbk</p><p>2.修改表名为temp；</p><p>3.修改引擎为innodb</p><p>4.添加部门编号字段deptno在最后面</p><p>5.添加salary字段在name的后面</p><p>6.修改salary字段的字段名为sal，并把sal放在deptno后面</p><p>7.删除字段sal</p></blockquote><h4 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h4><h6 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h6><ul><li><p>全字段插入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into emp values(1,&apos;tom&apos;,22,6000,&apos;程序猿&apos;);</span><br></pre></td></tr></table></figure></div></li><li><p>指定字段插入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into emp(name,salary,job) values (&apos;jack&apos;,5000,&apos;美工&apos;)</span><br></pre></td></tr></table></figure></div></li><li><p>批量插入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into emp values</span><br><span class="line">(1,&apos;唐僧&apos;,36,10000,&apos;领导&apos;),</span><br><span class="line">(2,&apos;悟空&apos;,610,7000,&apos;打手&apos;),</span><br><span class="line">(3,&apos;悟能&apos;,960,8000,&apos;卧底&apos;),</span><br><span class="line">(4,&apos;悟净&apos;,780,5000,&apos;后勤&apos;)</span><br><span class="line">;</span><br></pre></td></tr></table></figure></div><h6 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select name from emp where salary &lt;8000 and/or age&lt;600;</span><br></pre></td></tr></table></figure></div><h6 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update 表名 set 修改数据</span><br><span class="line">where 修改条件;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改tom工资为3333</span><br><span class="line">update emp set salary=3333 where name =&apos;tom&apos;;</span><br><span class="line">修改800岁以下的工资为4000</span><br><span class="line">update emp set salary = 4000 where age&lt;800;</span><br><span class="line">将id=3的人名字改为吕布</span><br><span class="line">update emp set name=&quot;吕布&quot; where id = 3;</span><br><span class="line">修改年龄为Null的人年龄为40</span><br><span class="line">update emp set age = 40</span><br><span class="line">where age is null;</span><br></pre></td></tr></table></figure></div><h4 id="数据约束"><a href="#数据约束" class="headerlink" title="数据约束"></a>数据约束</h4><p><code>id:每一条数据的唯一标识符，特性：唯一性、非空性</code></p><p><code>约束：主键约束：primary key非空性、唯一性</code></p><p><code>非空约束：not null</code></p><p><code>外键约束：foreign key</code></p><p><code>检查约束：check</code> </p><p><code>自增值：auto_increment</code></p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table empl(id int primary key,</span><br><span class="line">name varchar(10)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into empl values(null,&apos;jack&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into empl (name) values (&apos;rouse&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table emp2(id int primary key auto_increment,</span><br><span class="line">name varchar(10)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into emp2 values(null,&apos;张三&apos;);</span><br><span class="line">insert into emp2 values(null,&apos;李四&apos;);</span><br><span class="line">insert into emp2 values(10,&apos;王五&apos;);</span><br><span class="line">insert into emp2 values(null,&apos;赵六&apos;);</span><br><span class="line"></span><br><span class="line">delete from emp2 where id = 11;</span><br><span class="line">insert into emp2 values(null,&apos;前八&apos;);</span><br></pre></td></tr></table></figure></div><h4 id="数据冗余"><a href="#数据冗余" class="headerlink" title="数据冗余"></a>数据冗余</h4><blockquote><p>如果表设计不合理，保存大量的数据同时可能会随之出现大量的重复数据，这些重复的现象称为冗余。</p><p>通过拆分的方式可以消除冗余</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table emp3 (</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20),</span><br><span class="line">salary int,</span><br><span class="line">deptId int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table dept(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20),</span><br><span class="line">parentId int</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><p>马化腾 8000-&gt;市场开拓部-&gt;市场部-&gt;销售部</p><p>insert into emp3 values(1,’马化腾’,8000,3);</p><p>insert into dept values(1,’销售部’,null);</p><p>insert into dept values(2,’市场部’,1);</p><p>insert into dept values(3,’市场开拓部’,2);</p><p>insert into dept values(4,’教学部’,null);</p><p>insert into dept values(5,’教研部’,4);</p><p>insert into dept values(6,’java教研部’,5);</p><p>教学部-&gt;教研部-&gt;java教研部-&gt;开金羊 7000</p><p>insert into emp3 values(2,’开金羊’,7000,6);</p><p>select emp3.name,salary ,dept.name from emp3,dept where emp3.deptId = dept.id ;</p><h3 id="day002"><a href="#day002" class="headerlink" title="day002"></a>day002</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li>int: 整数类型</li><li>double：浮点类型</li><li>时间类型<ul><li>date保存年月日</li><li>datetime：保存年月日时分秒</li><li>time： 保存时分秒</li><li>timestamp（时间戳）：保存年月日时分秒</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t2(</span><br><span class="line">id int,</span><br><span class="line">t1 date,</span><br><span class="line">t2 datetime,</span><br><span class="line">t3 time,</span><br><span class="line">t4 timestamp</span><br><span class="line">);</span><br><span class="line">show create table t2;</span><br><span class="line"></span><br><span class="line">insert into t2 values(1,&apos;2019-9-7&apos;,&apos;2019-9-7 8:26:32&apos;,&apos;8:26:32&apos;,null);</span><br></pre></td></tr></table></figure></div><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p><code>数据科中执行sql语句的最小工作单位，保证多条sqls语句全部成功或者全部失败</code></p><p><strong>数据库有一个自动提交的过程，查看自动提交是否打开（show variables like ‘%autocommit%’）</strong></p><p>事务的状态：提交、被提交</p><ul><li>提交（commit）<ul><li>查看自动提交(show variables like ‘%autocommit%’);</li><li>1/on:打开</li><li>0/ff:关闭</li></ul></li></ul><blockquote><p>MariaDB [tedu]&gt; show variables like ‘%autocommit%’;<br>+—————+——-+<br>| Variable_name | Value |<br>+—————+——-+<br>| autocommit    | ON    |<br>+—————+——-+<br>1 row in set (0.01 sec)</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t3(</span><br><span class="line">name varchar(20),</span><br><span class="line">money int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into t3 values(&apos;开金阳&apos;,5000);</span><br><span class="line">insert into t3 values(&apos;马云&apos;,10000);</span><br><span class="line"></span><br><span class="line">//开始转账</span><br><span class="line">update t3 set money = money+1000</span><br><span class="line">where name = &apos;开金阳&apos;;</span><br><span class="line">update t3 set money = money-1000</span><br><span class="line">where name = &apos;马云&apos;;</span><br></pre></td></tr></table></figure></div><p>关闭自动提交</p><p><code>set autocommit = 0</code></p><p>sql语句一开始是存放在缓冲区中的，一个窗口一个缓冲区，如果关闭自动提交。必须使用手动提交（commit）</p><p>窗口1（马云） 马云转出1000-查询-提交-查询,</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update t3 set money = money-1000</span><br><span class="line">where name = &apos;马云&apos;;</span><br><span class="line">select * from t3;</span><br><span class="line">commit;</span><br><span class="line">select * from t3;</span><br></pre></td></tr></table></figure></div><p>窗口2（开金阳）我转入1000-查询-提交-查询，</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update t3 set money = money + 1000</span><br><span class="line">where name = &apos;开金阳&apos;;</span><br><span class="line">select * from t3;</span><br><span class="line">commit;</span><br><span class="line">select * from t3;</span><br></pre></td></tr></table></figure></div><h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><p>当数据没有提交到数据库之前，执行的所有操作都可以回滚；</p><p><strong>设置回滚点: rollback to s1;</strong></p><p><code>savepoint s1;</code>讲数据</p><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul><li><p>like </p><ul><li>%：表示0-n个字符</li><li>_：表示1个字符</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t3  where name like &apos;%金%&apos;;</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="排序：order-by"><a href="#排序：order-by" class="headerlink" title="排序：order by"></a>排序：order by</h4><ul><li>升序：asc</li><li>降序：desc</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from emp order by salary;</span><br></pre></td></tr></table></figure></div><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><ul><li>sum（求和）</li><li>min（最小值）</li><li>max（最大值）</li><li>avg（平均值）</li><li>count（统计个数）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from emp;</span><br></pre></td></tr></table></figure></div><p>作业：</p><p>1.select ename from emp where sal&gt;2500;</p><p>2.select max(comm) from emp where sal &gt;= 1000 and sal &lt;= 3000;</p><p>3.select max(comm),max(sal),avg(sal),sum(sal) from emp where deptno=30;</p><ol start="4"><li>select count(*) from emp where ename like ‘%a%’;</li></ol><p>5.select empno,ename,sal from emp where mgr is null;</p><p>6.select ename , sal from  emp where comm is null;</p><p>7.select * from emp where comm is not null and comm != 0;</p><p>in</p><p>查询emp表中工资是1500，5000，3000的员工信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from emp where sal=1500 or sal  = 3000 or sal = 5000</span><br><span class="line"></span><br><span class="line">select * from emp where sal in(1500,3000,5000);</span><br></pre></td></tr></table></figure></div><p>查询工资在2000-3000之间的所有员工信息</p><p>查询员工表中工资降序的第三页的4条数据</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>limit：跳过的条数，请求的数量（每页的数量）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from emp order by sal desc;</span><br><span class="line">select * from emp order by sal desc limit 8,4;</span><br></pre></td></tr></table></figure></div><p>查询10号部门和30号部门的员工工资在前三名的员工信息；</p><p>select * from emp where deptno in(10,30) order by sal desc limit 0,3;</p><h4 id="与字符串相关的函数"><a href="#与字符串相关的函数" class="headerlink" title="与字符串相关的函数"></a>与字符串相关的函数</h4><ul><li>获取字符串的长度： charlength（str）；</li><li>获取所有员工的名字和没名字的字符长度</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ename,charlength(ename) from emp;</span><br></pre></td></tr></table></figure></div><ul><li>获取字符串在另一个字符串中第一次出现的位置instr（str,substr）查找b在abcde中的位置</li></ul><p>select instr(‘abcde’,’b’);</p><ul><li>插入字符串</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert(str,start,length,newstr);</span><br></pre></td></tr></table></figure></div><h4 id="与数学相关函数"><a href="#与数学相关函数" class="headerlink" title="与数学相关函数"></a>与数学相关函数</h4><p>3.84向下取整（3），四舍五入（4），非四舍五入（3）</p><p>select floor (3.84)；//3</p><p>select round(3.84);//4</p><p>select truncate(3.84567,3);3.845;若取整必须写0；</p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>分组查询一般和聚合函数结合使用，以组为单位进行统计</p><p>1.select max(sal) from emp group by deptno  ;</p><p>2.select avg(sal) from emp group by deptno;</p><p>3.select count(*),deptno from emp  where sal &gt; 1500 group by deptno ;</p><p>4.select count(*) from emp  where mgr is not null group by mgr;</p><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><p>select ename name（别名） from emp e;</p><p> 作业</p><p>查询emp表中的每个部门的编号，人数，工资总和，最后根据人数进行升序排列，如果人数一致，根据工资总和降序排列；</p><p>select deptno,count(empno) c,sum(sal) s from emp  group by deptno order by c ,s desc;</p><h4 id="表设计管理：权限管理"><a href="#表设计管理：权限管理" class="headerlink" title="表设计管理：权限管理"></a>表设计管理：权限管理</h4><h4 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select e.ename,d.deptno,d.loc from emp e join dept d on e.deptno = d.deptno;</span><br></pre></td></tr></table></figure></div><p>实现权限管理功能需要三张主表和两张关系表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table user(uid int,uname varchar(20));     //用户表</span><br><span class="line"></span><br><span class="line">create table role(rid int,rname varchar(20));     //角色表</span><br><span class="line"></span><br><span class="line">create table module(mid int,mname varchar(20));   //功能表</span><br><span class="line"></span><br><span class="line">create table ur (uid int, rid int);</span><br><span class="line"></span><br><span class="line">create table rm (rid int,mid int);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into user values</span><br><span class="line">(1,&apos;梁朝伟&apos;),(2,&apos;凤姐&apos;);</span><br><span class="line">insert into role values</span><br><span class="line">(1,&apos;男游客&apos;),(2,&apos;男会员&apos;),(3,&apos;女游客&apos;),(4,&apos;女管理员&apos;);</span><br><span class="line">insert into  module values</span><br><span class="line">(1,&apos;男浏览&apos;),(2,&apos;男发帖&apos;),(3,&apos;女浏览&apos;),(4,&apos;女发帖&apos;),(5,&apos;女删帖&apos;);</span><br><span class="line"></span><br><span class="line">insert into ur values (1,2),(1,3),(2,1),(2,4);</span><br><span class="line">insert into rm values (1,1),(2,1),(2,2),(3,3),(4,3),(4,3),(4,5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete from rm where rid = 4 and mid = 3;</span><br><span class="line">insert into rm values(4,3),(4,4);</span><br><span class="line"></span><br><span class="line">查询每个用户的权限有哪些？</span><br><span class="line">user -&gt;uname</span><br><span class="line">moudle -&gt;mname</span><br><span class="line">select u.uname,m.mname from user u join  ur r on u.uid = r.uid ;</span><br><span class="line"></span><br><span class="line">查询凤姐的权限有哪些？</span><br><span class="line">select u.uname,m.mname from user u join  ur ur on u.uid = ur.uid join rm rm on ur.uid =rm.mid join module m on m.mid = rm.mid;</span><br><span class="line">查询拥有男发帖权限的人有哪些？</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;GBK是在国家标准GB2312基础上扩容后兼容GB2312的标准（好像还不是国家标准）。GBK编码专门用来解决中文编码的，是双字节的。不论中英文都是双字节的。&lt;/li&gt;
&lt;li&gt;UTF－8 编码是用以解决国际上字符的一种多字节编码，它对
      
    
    </summary>
    
      <category term="数据库" scheme="https://powerlrl.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://powerlrl.gitee.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="https://powerlrl.gitee.io/2020/02/27/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E5%85%B7/npm/"/>
    <id>https://powerlrl.gitee.io/2020/02/27/前端/工具/npm/</id>
    <published>2020-02-27T13:31:35.254Z</published>
    <updated>2020-02-27T16:02:53.040Z</updated>
    
    <content type="html"><![CDATA[<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p><strong>npm包管理工具，node版本LTS长期维护型，Current最新版本</strong></p><blockquote><p>如果我们想查看node版本号可以在cmd中输入node -v命令，同理查看npm则是npm -v</p><p>我们想要更新npm版本。那么我们就可以更新自己。npm install npm@latest(也可以直接加入版本号)-g（安装到全局）</p></blockquote><p><strong>npm 常用命令**</strong></p><ul><li>npm init -y（初始化npm）无需配置<ul><li>npm i （需要配置）</li></ul></li><li>npm i 包名 –save(将依赖模块添加到pakeage.json)<ul><li>npm i 包名（不把依赖模块添加到pakeage.json）</li></ul></li><li>npm root -g （查看所有全局工具的存储路径）</li></ul><a id="more"></a><blockquote><p>二者区别是，如果我们无意中删除了文件夹则我们需要npm init即可（只针对–save）</p></blockquote><ul><li>假设我们不需要某个依赖 npm uninstall jquery</li><li>更新 npm update jquery</li><li>安装旧版本npm i jqurey@版本号</li></ul><p><strong>nrm</strong></p><p>nrm 是npm源管理工具，使他快速切换npm源头</p><p><strong>nrm 安装</strong></p><blockquote><p>npm i nrm -g  //</p></blockquote><p><strong>nrm常用命令</strong></p><ul><li>nrm ls （查看所有源）</li><li>nrm use taobao（切换到taobao源）</li><li>nrm current（查看当前的源）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm&quot;&gt;&lt;/a&gt;npm&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;npm包管理工具，node版本LTS长期维护型，Current最新版本&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们想查看node版本号可以在cmd中输入node -v命令，同理查看npm则是npm -v&lt;/p&gt;
&lt;p&gt;我们想要更新npm版本。那么我们就可以更新自己。npm install npm@latest(也可以直接加入版本号)-g（安装到全局）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;npm 常用命令**&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npm init -y（初始化npm）无需配置&lt;ul&gt;
&lt;li&gt;npm i （需要配置）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;npm i 包名 –save(将依赖模块添加到pakeage.json)&lt;ul&gt;
&lt;li&gt;npm i 包名（不把依赖模块添加到pakeage.json）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;npm root -g （查看所有全局工具的存储路径）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="https://powerlrl.gitee.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="npm" scheme="https://powerlrl.gitee.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Css</title>
    <link href="https://powerlrl.gitee.io/2020/02/27/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/CSS/"/>
    <id>https://powerlrl.gitee.io/2020/02/27/前端/笔记/CSS/</id>
    <published>2020-02-27T12:11:49.921Z</published>
    <updated>2020-02-29T12:34:59.374Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h4><ul><li><p>行内样式</p></li><li><p>内部样式</p></li><li><p>外部样式</p></li></ul><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><ul><li><p>id</p></li><li><p>class</p></li><li><p>属性选择器</p></li><li><p>伪类选择器</p></li><li><p>标签，伪类</p></li><li><p>通配符</p></li><li><p>父子选择器</p></li><li><p>派生选择器</p></li><li><p>直接子元素选择器</p></li></ul><h4 id="CSS权重"><a href="#CSS权重" class="headerlink" title="CSS权重"></a>CSS权重</h4><p>！important——infinity</p><p>行间样式——1000</p><p>id—–100</p><p>css|伪类|属性—–10</p><p>标签|伪元素—–1</p><p>通配符—-0</p><h4 id="显示模式"><a href="#显示模式" class="headerlink" title="显示模式"></a>显示模式</h4><p>行内元素（没有宽度和高度，一行可以放多个）</p><p>块级元素（有宽度和高度，一行只能放一个）</p><p>行内块元素（有宽度和高度，一行可以放多个）</p><p>行内元素不能嵌套块级元素,只能嵌套行内元素</p><p>块级元素可以嵌套任何元素</p><h4 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h4><p>font-weight</p><p>font-family</p><p>font-style（normal,italic）</p><p>font-size</p><h4 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h4><p>color</p><p>text-align</p><p>line-height</p><p>text-indent</p><p>text-decoration</p><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p>border</p><p>border-radius</p><p>margin</p><p>padding</p><p>总共大小</p><p>box-sizing （content/border）</p><p>利用border做一个小demo（画三角形）</p><h4 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h4><p>（页面的布局和显示，从上到下，从做到右的显示）</p><p>float（可以说脱离了文档流，但是仍然会占据位置，文字可以看到浮动的元素，浮动的元素也可以相互看得见，只有块级元素看不见。浮动不仅影响自己也要影响周围的元素）</p><p>浮动带来的影响（高度塌陷）</p><p><strong>脱离文档流的影响、后面的同级元素会顶上来，父级检测不到脱离文档流的元素，导致内容无法撑开</strong></p><p>解决方案</p><p>+ 给父级盒子宽度（每次都要修改很麻烦）</p><p>+ 设置p标签（毫无意义，我们的结构是不能随意的修改）</p><p>+ 利用伪元素清除浮动（哎，这个好! ::after，::before）</p><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><ul><li><p>相对定位</p></li><li><p>不脱离文档流、针对自身定位（元素左上角、无法触发bfc）</p></li><li><p>绝对定位</p></li><li><p>脱离文档流</p></li><li><p>针对父级盒子定位（会触发bfc）</p></li><li><p>如果固定定位的子级有浮动</p></li><li><p>可以省略清浮动的操作</p></li><li><p>固定定位</p></li><li><p>脱离文档流</p></li><li><p>基于视口的定位</p></li><li><p>子绝父相的应用</p></li><li><p>margin塌陷问题（如果大于他，当然带着它一起走）</p></li><li>或者给它父亲填上（border: 1px solid #000）这种方法当然不行。当然还有更加高级的方法</li></ul><p><strong>何为bfc？</strong></p><p>每一个盒子的内部都会有一套渲染的规则，盒子都要遵循这些规则，当然有一些不听话的可以改变这里面的规则。</p><p><strong>如何解决一个margin塌陷问题，触发这个盒子bfc</strong></p><p>如何触发一个盒子的bfc</p><ul><li><p>absolute</p></li><li><p>float</p></li><li><p>overflow: hidden</p></li><li><p>display: inline-block</p></li></ul><h4 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h4><p>新增的trantions过渡动画，如果谁要设置就给谁添加。并且必须要指定宽高，不然会失效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引入方式&quot;&gt;&lt;a href=&quot;#引入方式&quot; class=&quot;headerlink&quot; title=&quot;引入方式&quot;&gt;&lt;/a&gt;引入方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;行内样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外部样式&lt;/p&gt;

      
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="css" scheme="https://powerlrl.gitee.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Dart</title>
    <link href="https://powerlrl.gitee.io/2019/08/15/%E5%90%8E%E7%AB%AF/dart/"/>
    <id>https://powerlrl.gitee.io/2019/08/15/后端/dart/</id>
    <published>2019-08-15T05:04:10.326Z</published>
    <updated>2020-02-27T11:59:39.773Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Dart是谷歌开发的计算机编程语言，后来被<a href="https://baike.baidu.com/item/Ecma" target="_blank" rel="noopener">Ecma</a> (ECMA-408)认定为标准 [1]  。它被用于web、服务器、移动应用 [2]  和物联网等领域的开发。它是宽松开源许可证（修改的BSD证书）下的开源软件。</p><p>Dart是面向对象的、类定义的、单继承的语言。它的语法类似C语言，可以转译为JavaScript，支持接口(interfaces)、混入(mixins)、抽象类(abstract classes)、具体化泛型(reified generics)、可选类型(optional typing)和sound type system</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><code>number、String、double、blooean、map、list</code>基本语法和c类似但是也有不同</p><ul><li>可以用var定义变量</li><li>可以用$变量名（其他类型），用于和字符串相加，也可以toString（）</li><li>不同类型的不可以相加</li><li>同样支持三目运算，分支结构</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果name为null，则替换成？？相应右边的字符串。为其他则不行。</span></span><br><span class="line"> <span class="built_in">String</span> name = <span class="keyword">null</span>;</span><br><span class="line"> <span class="built_in">String</span> nameToPrint = name ?? <span class="string">"319986895@qq.com"</span>;</span><br><span class="line"> <span class="built_in">print</span>(nameToPrint);</span><br></pre></td></tr></table></figure></div><a id="more"></a><h3 id="循环列表和关键字"><a href="#循环列表和关键字" class="headerlink" title="循环列表和关键字"></a>循环列表和关键字</h3><p>使用<code>List</code>定义一个数组，可以用for in，for，do while，while来循环获取数组中的值。当然也可是使用，break，loop，continue等关键字来停止，和跳出循环。当然dart提出了一个可以停止指定循环的。</p><blockquote><p>对循环命名，如果要停止或跳出某个循环，则break/continue 循环名。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">outerloop:</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">    innerloop:</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">1</span> &amp;&amp; j==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span> outerloop;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"$i $j"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>和其他强类型的语言一样，都是，函数数据类型，函数名，参数，返回值。</p><p>箭头函数有返回值和无返回值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> sumValue(<span class="built_in">int</span> a,<span class="built_in">int</span> b) =&gt; <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;a+b&#125;</span>"</span>);</span><br><span class="line">去除<span class="built_in">print</span></span><br><span class="line">sumValue(<span class="number">3</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Dart是谷歌开发的计算机编程语言，后来被&lt;a href=&quot;https://baike.baidu.com/item/Ecma&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ecma&lt;/a&gt; (ECMA-408)认定为标准 [1]  。它被用于web、服务器、移动应用 [2]  和物联网等领域的开发。它是宽松开源许可证（修改的BSD证书）下的开源软件。&lt;/p&gt;
&lt;p&gt;Dart是面向对象的、类定义的、单继承的语言。它的语法类似C语言，可以转译为JavaScript，支持接口(interfaces)、混入(mixins)、抽象类(abstract classes)、具体化泛型(reified generics)、可选类型(optional typing)和sound type system&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;p&gt;&lt;code&gt;number、String、double、blooean、map、list&lt;/code&gt;基本语法和c类似但是也有不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以用var定义变量&lt;/li&gt;
&lt;li&gt;可以用$变量名（其他类型），用于和字符串相加，也可以toString（）&lt;/li&gt;
&lt;li&gt;不同类型的不可以相加&lt;/li&gt;
&lt;li&gt;同样支持三目运算，分支结构&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果name为null，则替换成？？相应右边的字符串。为其他则不行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; name = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; nameToPrint = name ?? &lt;span class=&quot;string&quot;&gt;&quot;319986895@qq.com&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(nameToPrint);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="dart" scheme="https://powerlrl.gitee.io/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>mock与easy-mock</title>
    <link href="https://powerlrl.gitee.io/2019/07/30/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E5%85%B7/mock%E4%B8%8Eeasy-mock%E6%95%B0%E6%8D%AE/"/>
    <id>https://powerlrl.gitee.io/2019/07/30/前端/工具/mock与easy-mock数据/</id>
    <published>2019-07-30T09:54:38.580Z</published>
    <updated>2020-02-29T05:00:17.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mock-js"><a href="#mock-js" class="headerlink" title="mock.js"></a>mock.js</h3><blockquote><p>mock数据是真实的数据的存在之前，调试时期的替代品，通俗来讲就是<code>备胎</code>。前后端分离的开发模式兴起，所以mockjs就是让前端工程师独立于后端进行开发。<code>生成随机数据，拦截 Ajax 请求。</code></p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>官方文档已经讲的非常清楚了。<a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">mock文档</a></p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>属性名</li><li>规则</li><li>属性值</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li>navList是长度为8的数组</li><li>navList中数组每一个元素都是一个对象，里面包含了两个属性<code>id</code>,<code>text</code></li><li><code>id从0开始一直自增到7</code></li><li><code>text</code>依次遍历</li></ul><a id="more"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> resource = Mock.mock(&#123;</span><br><span class="line">      <span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">"navList|8"</span>: [&#123;</span><br><span class="line">        <span class="string">"id|+1"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"text|+1"</span>: [<span class="string">"首页"</span>,<span class="string">"动画"</span>,<span class="string">"番剧"</span>,<span class="string">"国创"</span>,<span class="string">"音乐"</span>,<span class="string">"舞蹈"</span>,<span class="string">"科技"</span>,<span class="string">"游戏"</span>] </span><br><span class="line">      &#125;]</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></div><p><a href="https://i.loli.net/2019/07/30/5d400eb55a92383129.png" data-fancybox="group" data-caption="Snipaste_2019-07-30_16-48-48.png" class="fancybox"><img alt="Snipaste_2019-07-30_16-48-48.png" title="Snipaste_2019-07-30_16-48-48.png" data-src="https://i.loli.net/2019/07/30/5d400eb55a92383129.png" class="lazyload"></a></p><h3 id="easy-mock"><a href="#easy-mock" class="headerlink" title="easy-mock"></a>easy-mock</h3><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p><a href="https://easy-mock.com/" target="_blank" rel="noopener">easy-mock</a>官网，登录即注册，暂时不能提供修改密码，所以不要忘记密码。</p><ul><li>创建项目</li><li>每一个用户都会有一个演示的demo</li><li>可以团队协作项目，也可以开发个人项目</li></ul><p><a href="https://i.loli.net/2019/07/30/5d40105167ecd27432.png" data-fancybox="group" data-caption="Snipaste_2019-07-30_17-39-08.png" class="fancybox"><img alt="Snipaste_2019-07-30_17-39-08.png" title="Snipaste_2019-07-30_17-39-08.png" data-src="https://i.loli.net/2019/07/30/5d40105167ecd27432.png" class="lazyload"></a></p><p>点击项目即可查看项目信息。并且对其修改，预览，删除，克隆等操作。</p><p><a href="https://i.loli.net/2019/07/30/5d4010e45cb0240701.png" target="_blank" rel="noopener"><img alt="Snipaste_2019-07-30_17-41-40.png" data-src="https://i.loli.net/2019/07/30/5d4010e45cb0240701.png" class="lazyload"></a></p><h4 id="接口的更新"><a href="#接口的更新" class="headerlink" title="接口的更新"></a>接口的更新</h4><p><a href="https://i.loli.net/2019/07/30/5d4011b61606438786.png" data-fancybox="group" data-caption="Snipaste_2019-07-30_17-43-26.png" class="fancybox"><img alt="Snipaste_2019-07-30_17-43-26.png" title="Snipaste_2019-07-30_17-43-26.png" data-src="https://i.loli.net/2019/07/30/5d4011b61606438786.png" class="lazyload"></a></p><p>左边为mockjs的语法</p><p><a href="https://i.loli.net/2019/07/30/5d40121e6382126700.png" data-fancybox="group" data-caption="Snipaste_2019-07-30_17-43-41.png" class="fancybox"><img alt="Snipaste_2019-07-30_17-43-41.png" title="Snipaste_2019-07-30_17-43-41.png" data-src="https://i.loli.net/2019/07/30/5d40121e6382126700.png" class="lazyload"></a></p><p>这样我们的接口也就更新好了。</p><h4 id="接口预览"><a href="#接口预览" class="headerlink" title="接口预览"></a>接口预览</h4><p><a href="https://i.loli.net/2019/07/30/5d40126a039bf69597.png" data-fancybox="group" data-caption="Snipaste_2019-07-30_17-44-01.png" class="fancybox"><img alt="Snipaste_2019-07-30_17-44-01.png" title="Snipaste_2019-07-30_17-44-01.png" data-src="https://i.loli.net/2019/07/30/5d40126a039bf69597.png" class="lazyload"></a></p><p>接口方式</p><p><a href="https://i.loli.net/2019/07/30/5d401296d8da954183.png" data-fancybox="group" data-caption="Snipaste_2019-07-30_17-44-15.png" class="fancybox"><img alt="Snipaste_2019-07-30_17-44-15.png" title="Snipaste_2019-07-30_17-44-15.png" data-src="https://i.loli.net/2019/07/30/5d401296d8da954183.png" class="lazyload"></a></p><p>ok 剩下的自己去发现吧。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mock-js&quot;&gt;&lt;a href=&quot;#mock-js&quot; class=&quot;headerlink&quot; title=&quot;mock.js&quot;&gt;&lt;/a&gt;mock.js&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;mock数据是真实的数据的存在之前，调试时期的替代品，通俗来讲就是&lt;code&gt;备胎&lt;/code&gt;。前后端分离的开发模式兴起，所以mockjs就是让前端工程师独立于后端进行开发。&lt;code&gt;生成随机数据，拦截 Ajax 请求。&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;p&gt;官方文档已经讲的非常清楚了。&lt;a href=&quot;http://mockjs.com/examples.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mock文档&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;规则&quot;&gt;&lt;a href=&quot;#规则&quot; class=&quot;headerlink&quot; title=&quot;规则&quot;&gt;&lt;/a&gt;规则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;属性名&lt;/li&gt;
&lt;li&gt;规则&lt;/li&gt;
&lt;li&gt;属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;navList是长度为8的数组&lt;/li&gt;
&lt;li&gt;navList中数组每一个元素都是一个对象，里面包含了两个属性&lt;code&gt;id&lt;/code&gt;,&lt;code&gt;text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id从0开始一直自增到7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt;依次遍历&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="https://powerlrl.gitee.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="mock" scheme="https://powerlrl.gitee.io/tags/mock/"/>
    
  </entry>
  
  <entry>
    <title>PHP</title>
    <link href="https://powerlrl.gitee.io/2019/07/27/%E5%90%8E%E7%AB%AF/php/"/>
    <id>https://powerlrl.gitee.io/2019/07/27/后端/php/</id>
    <published>2019-07-27T10:54:47.651Z</published>
    <updated>2020-02-27T16:08:55.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><p>在php中定义变量是以$开头， 不能以其他的字符开头。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出字符串可以用echo，其余的可以用print_r或者var_dump（可以输入其他）</p><a id="more"></a><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>普通数组的定义方式</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">array</span> = <span class="keyword">array</span>(<span class="string">"zs"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>);</span><br><span class="line">var_dump(<span class="keyword">array</span>);</span><br></pre></td></tr></table></figure></div><ul><li>键值对的数组方式</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">array</span> = <span class="keyword">array</span>(<span class="string">"username"</span> =&gt; <span class="string">"zs"</span>, <span class="string">"age"</span> =&gt; <span class="number">17</span>);</span><br><span class="line">var_dump(<span class="keyword">array</span>);</span><br></pre></td></tr></table></figure></div><ul><li>常用方法 <ul><li>count(数组名) 统计出数组的长度</li><li>in_array(“某元素”,数组名)判断该数组是否包含某元素</li><li>strstr(“字符串”,字符串的某一部分)查看字符串某一部份是否为字符串的一部分。</li></ul></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串链接用点进行连接。</p><h3 id="a链接的GET请求（只有）"><a href="#a链接的GET请求（只有）" class="headerlink" title="a链接的GET请求（只有）"></a>a链接的GET请求（只有）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"02a标签发送get请求.php?username=zs&amp;age=19"</span>&gt;</span>发送给自己的服务器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $name = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    $age = $_GET[<span class="string">'age'</span>];</span><br><span class="line">    <span class="keyword">echo</span> $name.$age;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="表单的请求"><a href="#表单的请求" class="headerlink" title="表单的请求"></a>表单的请求</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"02a标签发送get请求.php?username=zs"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交数据"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $name = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    <span class="comment">// $age = $_GET['age'];</span></span><br><span class="line">    <span class="keyword">echo</span> $name;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>其中$_GET是GET请求获得数据，_POST是post获取数据</strong></p><h3 id="实现文件和图片上传"><a href="#实现文件和图片上传" class="headerlink" title="实现文件和图片上传"></a>实现文件和图片上传</h3><p>前端实现上传文件，后端负责把上传的文件存储起来，然后存储到数据库中</p><p>前端</p><ul><li>必须加入（enctype=”multipart/form-data”）</li><li>method必须为post上传</li><li>上传之后需要提交才行。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"03.php"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">      上传照片<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>后端（php）</p><ul><li>必须加入请求头（header(“Content-Type:text/html;charset=utf-8”)）防止乱码</li><li>$_FILES是提供的上传的文件的信息的一个数组</li><li>可以取出数组中的对应的文件名和文件临时存放的位置以及文件的类型。</li><li>move_uploaded_file(临时存放的文件的位置，新的文件夹地址和名字)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//设置一个请求头防止乱码</span></span><br><span class="line">    header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line">    $file = $_FILES;</span><br><span class="line">    <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">    $file_name = $file[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">    <span class="comment">//获取上传文件的临时存储地址</span></span><br><span class="line">    $tmp_name = $file[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line">    <span class="comment">//将临时存放的文件上传存到我们要存放的目录文件下</span></span><br><span class="line">    move_uploaded_file($tmp_name,<span class="string">"image/"</span>.$file_name);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"上传成功"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="请求头处理"><a href="#请求头处理" class="headerlink" title="请求头处理"></a>请求头处理</h3><p>客户端向服务器端请求数据，而服务器端则向客户端响应数据。</p><ul><li>getallheader()获取浏览器的所有请求头</li></ul><p><strong> 查看浏览器是否为谷歌浏览器</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $arr = getallheaders();</span><br><span class="line">  $userAgent = $arr[<span class="string">"User-Agent"</span>];</span><br><span class="line">  <span class="keyword">if</span>(strstr($userAgent,<span class="string">"Chrome"</span>))&#123;</span><br><span class="line">    var_dump(<span class="string">"谷歌浏览器"</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    var_dump(<span class="string">"其他浏览器"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>cookie是客户端发送给服务器端的一个字条，当客户端第一次向服务端请求数据的时候，服务端会发送给客户端一个cookie，用以保存数据，客户端接受到cookie会保存起来，如果当客户端再次请求数据的时候会把cookie携带上。并把cookie中的数据写入服务端。</p><p><strong>cookie的生命周期</strong></p><ul><li>存在内存中cookie，当关闭浏览器的时候cookie就会消失。</li><li>存在硬盘上的cookie，即使关闭电脑cookie也不会消失。主要设置方法是（time（））</li><li>追杀cookie。把cookie清除掉</li></ul><p>（1）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">//向客户端输入cookie，以键值对的方式输入</span></span><br><span class="line">  setcookie(<span class="string">"username"</span>,<span class="string">"zhangshang"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>（2）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  setcookie(<span class="string">"password"</span>,<span class="string">"1111"</span>,time() * <span class="number">60</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>（3）再一次请求就会显示passwor deleted，代表cookie被杀死了。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  setcookie(<span class="string">"password"</span>,<span class="string">""</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="cookie记住用户名"><a href="#cookie记住用户名" class="headerlink" title="cookie记住用户名"></a>cookie记住用户名</h4><p><strong>前端获取cookie，并且判断cookie是否存在</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cookiename = <span class="built_in">document</span>.cookie;</span><br><span class="line">      <span class="keyword">if</span>(cookiename)&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">"input[type='text']"</span>).value = cookiename.split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p><strong>后端发送cookie</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $cookie = $_GET[<span class="string">"username"</span>];</span><br><span class="line">  setcookie(<span class="string">"username"</span>,$cookie,time()+<span class="number">60</span>*<span class="number">20</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>session存储在服务器中的，依赖于cookie</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line">  $username = <span class="string">"程式"</span>;</span><br><span class="line"><span class="comment">//开启会话</span></span><br><span class="line">  session_start();</span><br><span class="line"><span class="comment">//$_SESSION是一个关联数组</span></span><br><span class="line">  $_SESSION[<span class="string">"username"</span>] = $username;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line">  session_start();</span><br><span class="line">  <span class="keyword">echo</span> $_SESSION[<span class="string">"username"</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP&quot;&gt;&lt;a href=&quot;#PHP&quot; class=&quot;headerlink&quot; title=&quot;PHP&quot;&gt;&lt;/a&gt;PHP&lt;/h1&gt;&lt;h3 id=&quot;变量的定义&quot;&gt;&lt;a href=&quot;#变量的定义&quot; class=&quot;headerlink&quot; title=&quot;变量的定义&quot;&gt;&lt;/a&gt;变量的定义&lt;/h3&gt;&lt;p&gt;在php中定义变量是以$开头， 不能以其他的字符开头。&lt;/p&gt;
&lt;h3 id=&quot;输出&quot;&gt;&lt;a href=&quot;#输出&quot; class=&quot;headerlink&quot; title=&quot;输出&quot;&gt;&lt;/a&gt;输出&lt;/h3&gt;&lt;p&gt;输出字符串可以用echo，其余的可以用print_r或者var_dump（可以输入其他）&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://powerlrl.gitee.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>blog</title>
    <link href="https://powerlrl.gitee.io/2019/07/27/demo/%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2/"/>
    <id>https://powerlrl.gitee.io/2019/07/27/demo/简易博客/</id>
    <published>2019-07-27T10:48:39.101Z</published>
    <updated>2020-02-27T13:27:23.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><blockquote><p>使用nodejs中的koa2框架先实现登录注册功能</p></blockquote><h2 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h2><ul><li>用户登录</li><li>用户注册</li><li>增加记录</li><li>删除记录</li><li>修改记录</li><li>查询记录</li></ul><a id="more"></a><h2 id="项目所依赖的模块"><a href="#项目所依赖的模块" class="headerlink" title="项目所依赖的模块"></a>项目所依赖的模块</h2><ul><li>koa</li><li>co-mysql</li><li>mysql</li><li>koa-session</li><li>koa-art-template</li><li>koa-router</li><li>koa-static</li><li>Koa-better-body</li></ul><h2 id="项目中路由设计"><a href="#项目中路由设计" class="headerlink" title="项目中路由设计"></a>项目中路由设计</h2><ul><li>首页（/index）get</li><li>登录（/login）get</li><li><p>注册（/regesiter）get</p></li><li><p>添加博客（add-blog）post</p></li><li>删除博客（delete-article）get</li><li>发表博客（send-article）post</li><li>阅读博客（read-article）get</li><li>编辑博客（edit-blog）get</li><li>编辑博客（edit-blog）post</li></ul><h2 id="项目中数据库设计"><a href="#项目中数据库设计" class="headerlink" title="项目中数据库设计"></a>项目中数据库设计</h2><p>数据库用的是mysql</p><p>users表</p><table><thead><tr><th>user_id</th><th>username</th><th>password</th><th>email</th></tr></thead><tbody><tr><td>1</td><td>admin</td><td>123</td><td>邮箱名</td></tr><tr><td>2</td><td>yo</td><td>222</td><td></td></tr><tr><td>3</td><td>yo2</td><td>222</td></tr></tbody></table><table><thead><tr><th>user_id</th><th>article_id</th><th>title</th><th>remark</th><th>editorValue</th><th>startTime</th><th>lastTime</th><th>author</th></tr></thead><tbody><tr><td>用户的id</td><td>文章id</td><td>文章名</td><td>文章简介</td><td>正文</td><td>创建时间</td><td>最后编辑时间</td><td>作者</td></tr></tbody></table><p>ps：命名不太规范，谨记以后使用驼峰命名法。</p><h2 id="项目所遇到坑"><a href="#项目所遇到坑" class="headerlink" title="项目所遇到坑"></a>项目所遇到坑</h2><p>（1）表单提交，后台获取不到数据，以为是中间件的问题，原来是我的type给错</p><p>（2）数据插入不到数据库中</p><p>（3）静态资源库的问题，导致页面渲染不出来。</p><h2 id="项目中session问题"><a href="#项目中session问题" class="headerlink" title="项目中session问题"></a>项目中session问题</h2><p>已解决问题</p><p>（1）注册过后，重定向到登录</p><p>（2）登录过后，重定向到首页</p><p>（3）如何解决点击登录，注册按钮页面异常问题（ps：已解决把html文件中的a标签跳转路径的.html删掉即可）</p><p>（4）登录在postman中测试是用户名和密码正确显示登录成功，但是在）</p><p>（5）ajax发送请求过后，获取到后台发送过来的数据，这时后台如果要重定向页面是不行的，必须由前端来重定向。</p><p>（6）根据用户的sessionid不同，请求的博客文章也不同。用户不登录即访问不到主页和其他页面</p><p>待解决问题</p><p>（1）session、cookie存储和使用</p><p>（2）前端交互数据ing</p><p>（3）首页编写ing</p><p>（4）ajax中post请求获取不到数据ing</p><p>（5）前端利用hash值来使用公共的头部底部区域</p><p>（6）发表博客，需要等模态框弹出来过后，方可重定向。</p><p>（7）实现点击加载刷新很多</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot; title=&quot;项目描述&quot;&gt;&lt;/a&gt;项目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用nodejs中的koa2框架先实现登录注册功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目功能&quot;&gt;&lt;a href=&quot;#项目功能&quot; class=&quot;headerlink&quot; title=&quot;项目功能&quot;&gt;&lt;/a&gt;项目功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用户登录&lt;/li&gt;
&lt;li&gt;用户注册&lt;/li&gt;
&lt;li&gt;增加记录&lt;/li&gt;
&lt;li&gt;删除记录&lt;/li&gt;
&lt;li&gt;修改记录&lt;/li&gt;
&lt;li&gt;查询记录&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="demo" scheme="https://powerlrl.gitee.io/categories/demo/"/>
    
    
      <category term="JavaScript" scheme="https://powerlrl.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://powerlrl.gitee.io/2019/05/23/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E5%85%B7/webpack/"/>
    <id>https://powerlrl.gitee.io/2019/05/23/前端/工具/webpack/</id>
    <published>2019-05-23T11:26:23.734Z</published>
    <updated>2020-02-27T16:04:36.840Z</updated>
    
    <content type="html"><![CDATA[<h4 id="webpack的安装及其使用"><a href="#webpack的安装及其使用" class="headerlink" title="webpack的安装及其使用"></a>webpack的安装及其使用</h4><h4 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h4><p>安装webpack之前必须要安装nodejs，而且nodejs必须为最新的版本，要不然可能会有一个些问题。接下来就要全局的安装webpack，可以使用yarn或者npm包管理器，这里我们使用npm管理器。</p><ul><li>npm i webpack -g（全局安装webpack）</li><li>npm i –save-dev webpack@（版本号）（如果没有全局安装webpck，则这条语句就会报错）</li><li>npm i -D webpack-dev-server（安装webpack热更新）</li><li>npm i -D css-loader（此处只是举一个例子，并不一定非要是css-loader也有可能是别的loader）</li><li>npm i -D webpack-cli -g（全局安装webpack-cli）</li></ul><a id="more"></a><h4 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h4><ul><li><p>首先第一步要初始化npm Init -y（生成package.json）</p></li><li><p>利用npm安装webpack</p><ul><li><p>安装webpack-cli和webpack-dev-server（可以去pakeage.json的文件中确定是否安装该依赖）</p></li><li><p>创建一个webpack.config.js的文件</p></li></ul></li><li><p>接下来就是配置webpack.config.js文件</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 设置以开发者模式</span></span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  <span class="comment">//设置一个入口的文件</span></span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    <span class="comment">//出口文件的名称和路径，并把出口文件都放在dist文件夹，这个文件如果没有则会创建</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename : <span class="string">'bundle.js'</span>,</span><br><span class="line">    <span class="comment">// 在当前的路径下创建一个dist文件夹，并把出口文件生成一个前面为任意8为哈希值-bundle.js</span></span><br><span class="line">    path: path.join(__dirname,<span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//配置热更新</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">3000</span></span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//可以加载css和图片还有html文件</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(htm|html)/</span>,</span><br><span class="line">        use: [<span class="string">'html-withimg-loader'</span>,<span class="string">'raw-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpeg|gif|webp|jpg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'file-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//配置模板，在index.html中会使用模板来应用title</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'hello webpack'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>index.js文件中（入口文件）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./style.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.html'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello webpack2'</span>)</span><br></pre></td></tr></table></figure></div><h4 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h4><p><code>webpack4</code>会把src的.js文件打包生成一个dist文件夹，并且新增了mode属性,可以指定我们的为生产或者开发模式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mode: &apos;development/production&apos;</span><br></pre></td></tr></table></figure></div><ul><li>entry可以为一个对象（键值对的形式），指定多个入口文件。</li><li>可以用[key]为上面的key</li></ul><h4 id="四、loaders"><a href="#四、loaders" class="headerlink" title="四、loaders"></a>四、loaders</h4><h4 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h4><p>url-loader（如果图片的大小小于limit则会压缩为base64，大于的会变成普通的物理文件）基于file-loader</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|gif)$/i</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">28192</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></div><h4 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a>sass-loader</h4><p><code>利用sass-loader可以把scss转换为css代码并且打包到js文件中</code>，但是这样并不好，可以利用Plugins把css抽离出来</p><h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;webpack的安装及其使用&quot;&gt;&lt;a href=&quot;#webpack的安装及其使用&quot; class=&quot;headerlink&quot; title=&quot;webpack的安装及其使用&quot;&gt;&lt;/a&gt;webpack的安装及其使用&lt;/h4&gt;&lt;h4 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h4&gt;&lt;p&gt;安装webpack之前必须要安装nodejs，而且nodejs必须为最新的版本，要不然可能会有一个些问题。接下来就要全局的安装webpack，可以使用yarn或者npm包管理器，这里我们使用npm管理器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npm i webpack -g（全局安装webpack）&lt;/li&gt;
&lt;li&gt;npm i –save-dev webpack@（版本号）（如果没有全局安装webpck，则这条语句就会报错）&lt;/li&gt;
&lt;li&gt;npm i -D webpack-dev-server（安装webpack热更新）&lt;/li&gt;
&lt;li&gt;npm i -D css-loader（此处只是举一个例子，并不一定非要是css-loader也有可能是别的loader）&lt;/li&gt;
&lt;li&gt;npm i -D webpack-cli -g（全局安装webpack-cli）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="https://powerlrl.gitee.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="构建工具" scheme="https://powerlrl.gitee.io/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>node</title>
    <link href="https://powerlrl.gitee.io/2019/03/15/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/node/"/>
    <id>https://powerlrl.gitee.io/2019/03/15/前端/笔记/node/</id>
    <published>2019-03-15T06:31:06.661Z</published>
    <updated>2020-02-27T13:22:38.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what‘s-node？"><a href="#what‘s-node？" class="headerlink" title="what‘s node？"></a>what‘s node？</h2><blockquote><p>node既不是一种语言，也不是一个框架，更不是一个库。而是一种能让JavaScript运行在服务器上的一个平台</p></blockquote><blockquote><p>首先要下载node.js 自行到官网中下载。注意两个版本的区别</p></blockquote><h3 id="node中是以模块来划分作用域"><a href="#node中是以模块来划分作用域" class="headerlink" title="node中是以模块来划分作用域"></a>node中是以模块来划分作用域</h3><blockquote><p>node里面分为两个作用域，全局作用域（glogbal）和模块作用域</p></blockquote><ul><li><p>require（’模块标识符’） —–我们需引入模块需要用到的方法</p></li><li><p>模块</p><ul><li>用户自定义模块—-自己定义的一个js文件模块</li><li>系统提供模块—例如:fs,http…</li></ul></li></ul><a id="more"></a><blockquote><p>例如我们想要读取一个txt文件,JavaScript中是不可能实现的</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">//如果读取成功，则返回一个回调函数，erro----null，data----一串16进制，否则的话，erro----报错，data---undefined</span></span><br><span class="line">fs.readFile(<span class="string">'txt路径'</span>,(erro,data)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(erro)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="comment">//如果想要获取文件中的内容，只需要把16进制转换为字符串即可</span></span><br><span class="line">    <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><ul><li>基本上路径如果，对的话是没有问题的，还有可能文件不存在。</li></ul><h5 id="现在我们不止想要读一个文件，我还想写入一个文件"><a href="#现在我们不止想要读一个文件，我还想写入一个文件" class="headerlink" title="现在我们不止想要读一个文件，我还想写入一个文件"></a>现在我们不止想要读一个文件，我还想写入一个文件</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">fs.writeFile(<span class="string">'路径'</span>,<span class="string">'文件内容'</span>,error=&gt;&#123;</span><br><span class="line">    <span class="comment">//写入文件，如果成功则 error为null null又默认为0</span></span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件写入失败'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件写入成功'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    url = req.url</span><br><span class="line">    <span class="comment">//查找url</span></span><br><span class="line">    <span class="keyword">if</span>(url === <span class="string">'/'</span>)&#123;</span><br><span class="line">        res.end(<span class="string">'http 的使用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//开启服务器</span></span><br><span class="line">server.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running is server...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="exports和module-exports的区别"><a href="#exports和module-exports的区别" class="headerlink" title="exports和module exports的区别"></a>exports和module exports的区别</h4><blockquote><p>很多时候我们需要引入到别的模块中的变量，这个时候我们就需要使用的exports或者module.exports来暴露我们需要使用的变量或者对象。每一个模块中都有一个module.exports对象，每一个module.exports对象都有一个exports对象，所以我们把需要暴露的对象都挂载在module.exports对象上。所以每次暴露都是module.exports.xxx = xxx但是为了方便同时又在每一个模块中提供了一个exports成员，还有exports === module.exports是为true假如我们只需要暴露xxx我们可以直接exports.xxx即可</p><p>如果我们暴露单个成员则需要使用module.exports不能使用exports因为最终返回的都是module.exports即使exports=xxx也不行，</p><p>但是有一种特别的特殊方法 exports=module.exports是可以的，</p><p>多次暴露使用exports</p><p>单次暴露使用module.exports</p><p>module.exports也可以多个暴露（module.exports={}即可）</p></blockquote><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><h3 id="一、安装express框架（npm-i-S-express）"><a href="#一、安装express框架（npm-i-S-express）" class="headerlink" title="一、安装express框架（npm i -S express）"></a>一、安装express框架（npm i -S express）</h3><ul><li>引入express模块</li><li>定义变量接受express（）方法</li></ul><p>利用express实现helloworld</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="comment">//使用路由</span></span><br><span class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用路由</span></span><br><span class="line">app.get(<span class="string">'/login'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'login'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//开启服务器</span></span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>总的来说比我们之前写原生简单易懂的多。</p><h3 id="二、nodemon的使用"><a href="#二、nodemon的使用" class="headerlink" title="二、nodemon的使用"></a>二、nodemon的使用</h3><p>每一次修改完代码是不是每一次都要node app.js 还要每一次都要开启服务器。nodemon是我们每一次修改完代码后只要ctrl+s然后刷新浏览器就可以更改。</p><ul><li>npm i -g nodemon（安装nodemon）</li><li>nodenom -v （查看版本号）</li><li>nodemon xxx.js（运行js文件）</li></ul><h3 id="三、模板引擎的使用"><a href="#三、模板引擎的使用" class="headerlink" title="三、模板引擎的使用"></a>三、模板引擎的使用</h3><ul><li>先下载art-template</li><li>使用engine（’以什么文件后缀’，’express-art-template’）引入express-art-template包</li><li>使用路由get（）方式</li><li>使用render(‘渲染的文件’，{对象数据}) 默认到views文件夹中去寻找，若要修改则app.set(‘views’,’文件夹路径’)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line">app.engine(<span class="string">'html'</span>,<span class="built_in">require</span>(<span class="string">'art-template-express'</span>))</span><br><span class="line">app.get(<span class="string">'index.html'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.render(<span class="string">'index.html'</span>)<span class="comment">//没有数据就无需写第二个参数</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置插件开始</span></span><br><span class="line"><span class="keyword">let</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">//配置body-parser</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//插件配置结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用get方法获取数据，这个/pinglung是表单的action='/pinglun'，methond='get'</span></span><br><span class="line">app.get(<span class="string">'/pinglun'</span>,(req,res)=&gt;&#123;</span><br><span class="line"> <span class="keyword">let</span> comment = req.query</span><br><span class="line">  comment.dataTime = <span class="string">'2019-5-1'</span></span><br><span class="line">   comments.unshift(comment)</span><br><span class="line">  res.redirect(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用post方法获取数据需要借助中间的插件body-parser才可以获取数据，不想get有一个内置的api (req.query),需要借助第三方插件，还需要配置</span></span><br><span class="line">app.post(<span class="string">'/post'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> comment = req.body</span><br><span class="line">  comment.dataTime = <span class="string">'2018-3-5'</span></span><br><span class="line">  comments.unshift(comment)</span><br><span class="line">  res.redirect(<span class="string">'/'</span>)<span class="comment">//重定向</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="四、提取路由模块"><a href="#四、提取路由模块" class="headerlink" title="四、提取路由模块"></a>四、提取路由模块</h3><p>我们每一次写路由的时候都会用很多的页面，那么这个时候都写在app中似乎有些不妥，这个时候我们可以把路由模块单独提取出来，生成一个router.js 而app.js只作为入口文件，具体操作如下。</p><p><strong>app.js</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="comment">//加载用户自定义router.js模块</span></span><br><span class="line"><span class="keyword">let</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"><span class="comment">//使用路由</span></span><br><span class="line">app.use(router)</span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p><strong>router.js</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">//路由都挂载在router上</span></span><br><span class="line"><span class="keyword">let</span> router = express.Router()</span><br><span class="line">router.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'index'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/login'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'login'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/register'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'register'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//导出路由，以后任何的入口文件要使用路由，都可以使用</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure></div><p>把路由与入口文件这个样子就可以彻底分开，这样感觉显得更加整洁。</p><h3 id="五、静态资源库的开放"><a href="#五、静态资源库的开放" class="headerlink" title="五、静态资源库的开放"></a>五、静态资源库的开放</h3><p>在这里我们首先来看path模块中的join函数和<strong>dirname与</strong>basename</p><ul><li>__dirname——–针对与当前文件目录（没有当前文件的名字和扩展名）（动态的）</li><li><p>__basename——–当前文件的名字和扩展名（动态的的）</p></li><li><p>join（’c:\project\’，’\foo’）———–返回值c:\project\foo（将两个路径拼接在一起）</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">//要使用/public这个文件夹下的文件,开放当前路径下的/public文件夹中的所有文件</span></span><br><span class="line">app.use(<span class="string">'/public'</span>，express.static(path.join(__dirname,<span class="string">'/public'</span>)))</span><br></pre></td></tr></table></figure></div><h3 id="六、MongoDB"><a href="#六、MongoDB" class="headerlink" title="六、MongoDB"></a>六、MongoDB</h3><h4 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h4><h5 id="（1）安装"><a href="#（1）安装" class="headerlink" title="（1）安装"></a>（1）安装</h5><p>在官网中下载安装包</p><p>分为，完整安装和自定义安装（只要改个路径就行了）一般我们选择完整安装</p><p><a href="/2019/03/15/前端/笔记/node/Node/QQ图片20190402131646.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="/2019/03/15/前端/笔记/node/Node/QQ图片20190402131646.png" class="lazyload"></a></p><h5 id="（2）配置环境变量"><a href="#（2）配置环境变量" class="headerlink" title="（2）配置环境变量"></a>（2）配置环境变量</h5><p>完整安装一般默认是放在C盘目录下</p><p><a href="/2019/03/15/前端/笔记/node/Node/QQ图片20190402131657.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="/2019/03/15/前端/笔记/node/Node/QQ图片20190402131657.png" class="lazyload"></a></p><h5 id="（3）测试是否安装成功"><a href="#（3）测试是否安装成功" class="headerlink" title="（3）测试是否安装成功"></a>（3）测试是否安装成功</h5><p>一般如果我们在bin目录下直接点击mongod.exe会出现闪退，这也是我们为什么要配置环境变量的原因。</p><p><a href="/2019/03/15/前端/笔记/node/Node/QQ图片20190402131700.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="/2019/03/15/前端/笔记/node/Node/QQ图片20190402131700.png" class="lazyload"></a></p><p>如果出现以上的信息那么就代表我们安装成功。</p><h5 id="（4）开启数据库"><a href="#（4）开启数据库" class="headerlink" title="（4）开启数据库"></a>（4）开启数据库</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># </span><br><span class="line">mongod 默认使用时会把mongod根目录盘中的/data/db作为数据存储目录</span><br><span class="line"><span class="comment">//开启数据库</span></span><br><span class="line">在命令行中输入</span><br><span class="line">mongod</span><br></pre></td></tr></table></figure></div><p><strong>attention： 在第一次开启数据库的时候我们必须要在盘符根目录下（我的是c盘）新建一个/data/db两个文件夹下</strong>，不然就会出现连接不成功（shutting down）</p><p>修改默认路径：mongod –dbpath=数据存储目录</p><p><a href="/2019/03/15/前端/笔记/node/Node/QQ图片20190402154330.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="/2019/03/15/前端/笔记/node/Node/QQ图片20190402154330.png" class="lazyload"></a></p><p>如果新建了文件夹，则会success（看不懂吧。。是的）</p><p><a href="/2019/03/15/前端/笔记/node/Node/QQ图片20190402154815.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="/2019/03/15/前端/笔记/node/Node/QQ图片20190402154815.png" class="lazyload"></a></p><h5 id="（5）关闭数据库"><a href="#（5）关闭数据库" class="headerlink" title="（5）关闭数据库"></a>（5）关闭数据库</h5><h6 id="ctrl加c或者点击上面的叉即可"><a href="#ctrl加c或者点击上面的叉即可" class="headerlink" title="ctrl加c或者点击上面的叉即可"></a><strong>ctrl加c或者点击上面的叉即可</strong></h6><h4 id="2、连接数据库"><a href="#2、连接数据库" class="headerlink" title="2、连接数据库"></a>2、连接数据库</h4><h5 id="（1）默认连接本地数据库"><a href="#（1）默认连接本地数据库" class="headerlink" title="（1）默认连接本地数据库"></a>（1）默认连接本地数据库</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure></div><h5 id="（2）在连接的时候退出数据库"><a href="#（2）在连接的时候退出数据库" class="headerlink" title="（2）在连接的时候退出数据库"></a>（2）在连接的时候退出数据库</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></div><h5 id="（3）基本命令"><a href="#（3）基本命令" class="headerlink" title="（3）基本命令"></a>（3）基本命令</h5><ul><li>show dbs<ul><li>显示所有数据库名称</li></ul></li><li><p>use “数据库名称”</p><ul><li>如果有该数据库则切换到，如没有则新建一个数据库</li></ul></li><li><p>db</p><ul><li>查看当前使用的数据库</li></ul></li><li>show collections<ul><li>查看当前数据库中的所有的集合</li></ul></li><li>show.[collections].find()<ul><li>查看数据库中集合的所有数据</li></ul></li></ul><p><strong>这里需要说明一下，如果直接db的话，会出现test，但是我们show dbs的时候却没有test这个数据库，这是怎么回事呢？这个原因是因为我的test的数据库中没有数据，如果插入数据的话，再show dbs的话，则会出现test数据库（任何一个空的数据库都是这样，除非里面有数据，否则的话不会出现）</strong></p><p>举个例子吧(假设下面的是终端)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//创建或者切换数据库</span><br><span class="line">use itcast</span><br><span class="line">//向当前数据库中插入一个集合并且插入数据</span><br><span class="line">db.students.insertOne(&#123;&quot;name&quot;:&quot;jack&quot;&#125;)</span><br><span class="line">//查看数据库(插入成功的话就会有这个数据库，相反却没有)</span><br><span class="line">show dbs</span><br><span class="line">//查看当前数据库的集合(应该会是students)</span><br><span class="line">show collections</span><br><span class="line">//查看当前集合中的所有元素（&#123; &quot;_id&quot; : ObjectId(&quot;5ca346b9b0e4018e76041ca1&quot;), &quot;name&quot; : &quot;jack&quot; &#125;）</span><br><span class="line">db.students.find()</span><br></pre></td></tr></table></figure></div><h4 id="3、MongoDB基本概念"><a href="#3、MongoDB基本概念" class="headerlink" title="3、MongoDB基本概念"></a>3、MongoDB基本概念</h4><p>看到黑马视频一个描述MongoDB的挺有意思的:</p><ul><li>最外层的括号相当于MongoDB</li><li>qq，taobao，baidu。。相当于我们里面有很多数据库</li><li>user，product。。相当于数据库中的集合</li><li>name,age集合中的记录</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    qq:&#123;</span><br><span class="line">        user:[</span><br><span class="line">            &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;,</span><br><span class="line">            &#123;<span class="string">"name"</span>:<span class="string">"张三34"</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"张三34"</span>,<span class="attr">age</span>:<span class="number">45</span>&#125;，</span><br><span class="line">            ....</span><br><span class="line">        ],</span><br><span class="line">       product:[</span><br><span class="line">            ....</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    taobao:&#123;</span><br><span class="line">            ...</span><br><span class="line">    &#125;,</span><br><span class="line">   baidu:&#123;</span><br><span class="line">              </span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="4、使用mongoose操作mongodb"><a href="#4、使用mongoose操作mongodb" class="headerlink" title="4、使用mongoose操作mongodb"></a>4、使用mongoose操作mongodb</h4><p>（1）安装mongoose包（npm i mongoose）</p><p>（2）引入mongoose模块 （let mongoose = require(mongoose)）</p><p>（3）创建架构</p><p>（4）连接数据库</p><p>（5）设计结合的结构</p><p>（6）将文档结构发布为模型</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">let</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="keyword">let</span> Schema = mongoose.Schema</span><br><span class="line"><span class="comment">//4</span></span><br><span class="line">mongoose.connect(<span class="string">'mongoose://localhost/数据库名称'</span>)</span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//里面的字段就是集合结构中的属性名称</span></span><br><span class="line"><span class="comment">//约束的条件是为了防止有脏数据</span></span><br><span class="line"><span class="keyword">let</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span>,<span class="comment">//必须有该属性</span></span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  email: &#123;</span><br><span class="line">    type: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//将文档结构发布为模型</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  第一个参数，大写的单数字符串作为你的数据库名称，mongoose会自动将你的数据库名称转换为小写复数集合名称</span></span><br><span class="line"><span class="comment">  列如这里的User最终会变成users集合名称</span></span><br><span class="line"><span class="comment">  第二个参数，架构Schema</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  返回值：模型构造函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> User = mongoose.model(<span class="string">'User'</span>,userSchema)</span><br></pre></td></tr></table></figure></div><h4 id="5、增加数据"><a href="#5、增加数据" class="headerlink" title="5、增加数据"></a>5、增加数据</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> admin = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span>,</span><br><span class="line">  email: <span class="string">'3199895@qq.com'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">admin.save(<span class="function">(<span class="params">err,ret</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'保存失败'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'保存成功'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="6、查询数据"><a href="#6、查询数据" class="headerlink" title="6、查询数据"></a>6、查询数据</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有的数据</span></span><br><span class="line">User.find(<span class="function">(<span class="params">err,ret</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//查询符合记录的数据</span></span><br><span class="line">User.findOne(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span></span><br><span class="line">&#125;,(err,ret)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="7、删除数据"><a href="#7、删除数据" class="headerlink" title="7、删除数据"></a>7、删除数据</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">User.remove(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span></span><br><span class="line">&#125;,(err,ret)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除成功'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="8、更新数据"><a href="#8、更新数据" class="headerlink" title="8、更新数据"></a>8、更新数据</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新数据 id，修改内容，名称</span></span><br><span class="line"></span><br><span class="line">User.findByIdAndUpdate(<span class="string">'5ca35aaa914afc2efceed812'</span>,&#123;</span><br><span class="line">  password: <span class="string">'123456'</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'更新失败'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'更新成功'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h1 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h1><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>全局对象：随时都能访问<ul><li>process.env</li><li>__filename（获取当前运行文件的绝对路径）</li><li>__dirname（获取当前运行文件目录的绝对路径）</li></ul></li><li>内置对象：向系统索要，引入即可</li><li>自定义对象：引入正确的路径即可</li></ul><h3 id="node所实现的规范"><a href="#node所实现的规范" class="headerlink" title="node所实现的规范"></a>node所实现的规范</h3><ul><li>CommonJS：规范nodeJS作为后端运行的标准    <ul><li>模块应该怎么写module<ul><li>依赖某一模块require</li><li>被依赖的模块需要module.exports = 外部数据</li></ul></li><li>一个文件就是一个模块</li></ul></li></ul><h3 id="文件的读取和写入"><a href="#文件的读取和写入" class="headerlink" title="文件的读取和写入"></a>文件的读取和写入</h3><blockquote><p>如果要对文件进行操作，就要先引入文件模块fs</p></blockquote><ul><li><em>readFile</em>(文件路径和名，’utf-8’，回调函数)异步读取文件的内容</li><li>readFileSync（）同步读取文件的内容</li><li>writeFile（文件的路径和名，文件内容，回调函数）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line">fs.readFile(<span class="string">"./public/a.txt"</span>,<span class="string">"utf-8"</span>,(err,data)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">fs.writeFile(<span class="string">"./public/b.txt"</span>,<span class="string">"哈哈哈，几天也是很难熬的一天啊"</span>,(err)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"写入文件完成"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><blockquote><p>http是node中的核心模块，同样的要先引入</p></blockquote><ul><li>createServer（）创建一个本地的服务器</li><li>http.on（）执行request请求，并有一回调函数，获取到request和，response参数。<ul><li>request是只读不能写入</li><li>response是可以写入</li></ul></li><li>http.listen（端口号，回调函数）用以开启服务器</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT | <span class="number">3000</span></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 多次写入 写头</span></span><br><span class="line">  res.setHeader(<span class="string">'a'</span>,<span class="string">'a'</span>)</span><br><span class="line">  res.setHeader(<span class="string">'c'</span>,<span class="string">'c'</span>)</span><br><span class="line">  <span class="comment">// 一次性写入，一定在多次写入的后面</span></span><br><span class="line">  res.writeHead(<span class="number">200</span>,&#123;<span class="string">'content-type'</span>:<span class="string">'text/html;charset=utf-8'</span>&#125;)</span><br><span class="line">  <span class="comment">//多次写体</span></span><br><span class="line">  res.write(<span class="string">'第一次写入'</span>)</span><br><span class="line">  res.end(<span class="string">'最后一次写入'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.listen(port,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul><li>1开头正在执行</li><li>2开头已完成</li><li>3开头重定向</li><li>4开头客户端出现错误</li><li>5开头服务端出现错误</li></ul><h3 id="连接Mysql数据库"><a href="#连接Mysql数据库" class="headerlink" title="连接Mysql数据库"></a>连接Mysql数据库</h3><ul><li>npm i mysql -g（全局下载项目依赖模块）</li><li>复制对应代码</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var mysql = require(&apos;mysql&apos;);</span><br><span class="line">var pool = mysql.createConnection(&#123;</span><br><span class="line">  host: &apos;localhost&apos;,</span><br><span class="line">  user: &apos;root&apos;,</span><br><span class="line">  password: &apos;&apos;,</span><br><span class="line">  database: &apos;node_music&apos;</span><br><span class="line">&#125;);</span><br><span class="line">pool.connect()</span><br><span class="line">let db = &#123;&#125;</span><br><span class="line">db.q = function(sql,params)&#123;</span><br><span class="line">  pool.query(sql, params,function (error, results, fields) &#123;</span><br><span class="line">    if (error) throw error;</span><br><span class="line">    else&#123;</span><br><span class="line">      console.log(&apos;成功插入到数据库中&apos;)</span><br><span class="line">      console.log(results)</span><br><span class="line">      pool.end()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">module.exports = db</span><br></pre></td></tr></table></figure></div><h3 id="KOA框架"><a href="#KOA框架" class="headerlink" title="KOA框架"></a>KOA框架</h3><blockquote><p>主要介绍koa框架，express在上一篇文章已经介绍过了。koa框架是express的作者是同一个人，比起express（太大，太全）反而koa（轻量级，按需引入）</p></blockquote><ul><li>引入koa</li><li>创建一个koa对象</li><li>处理响应</li><li>开启服务器</li></ul><p><code>koa是非常智能的，如果我们读一个二进制的文件，它会帮我们下载下来。</code></p><p> <code>另外需要注意的是：koa采用的是es7中的async 和await需要和promise联合使用，废弃掉了express采用回调函数的机制</code></p><p><code>中间件的使用也是按需引入，比较方便</code></p><h4 id="koa-bodyparser"><a href="#koa-bodyparser" class="headerlink" title="koa-bodyparser"></a><strong>koa-bodyparser</strong></h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(bodyParser())</span><br><span class="line">app.use( <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = ctx.request.body</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ul><li>使用</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'./db_test_01'</span>)</span><br><span class="line">db.q(<span class="string">`insert into users (title,single,time,file,uid) values(?,?,?,?,?)`</span>,[<span class="string">'小菜'</span>,<span class="string">'青花瓷'</span>,<span class="string">'03:00'</span>,<span class="string">'d:/'</span>,<span class="number">6</span>])</span><br></pre></td></tr></table></figure></div><h4 id="koa-router"><a href="#koa-router" class="headerlink" title="koa-router**"></a>koa-router**</h4><ul><li>npm i koa-router</li><li>引入路由模块</li><li>创建对象</li><li>和app相关联</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>,<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'首页'</span></span><br><span class="line">&#125;)</span><br><span class="line">.post(<span class="string">'/post'</span>,<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = ctx.request.body</span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.use(bodyParser())</span><br><span class="line"><span class="comment">//优化状态码的处理405和501不再是单一的404</span></span><br><span class="line">app.use(router.allowedMethods())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p> <strong>路由嵌套</strong></p><p>koa中把路由模块单独抽离出来，是希望可以开发大型的企业项目，可以有多级的路由嵌套。</p><p>以下是我们的目录树：</p><blockquote><p>├─03_koa_router<br>│  │  app.js<br>│<br>└─router<br>├─cat<br>├─new<br>└─user<br>       admin.js<br>       company.js<br>       index.js</p></blockquote><p>app.js中我们需要引入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.use(<span class="string">'/user'</span>,<span class="built_in">require</span>(<span class="string">'./router/user'</span>))</span><br><span class="line">app.use(router.routes())</span><br></pre></td></tr></table></figure></div><p>index.js</p><p><code></code></p><h4 id="koa-art-template"><a href="#koa-art-template" class="headerlink" title="koa-art-template**"></a>koa-art-template**</h4><ul><li>模板引擎</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> render = <span class="built_in">require</span>(<span class="string">'koa-art-template'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">render(app,&#123;</span><br><span class="line">    <span class="comment">//到view中去找</span></span><br><span class="line">  root: path.join(__dirname,<span class="string">'view'</span>),</span><br><span class="line">    <span class="comment">//后缀文件名</span></span><br><span class="line">  extname: <span class="string">'.html'</span>,</span><br><span class="line">  debug: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/'</span>,<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="comment">//使用render函数</span></span><br><span class="line">  ctx.render(<span class="string">'index'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.use(router.allowedMethods())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="koa-static"><a href="#koa-static" class="headerlink" title="koa-static"></a><strong>koa-static</strong></h4><blockquote><p>这里面有点难以理解，我们只需要在上面的代码加上以下的两句代码即可，但是我们的index.html中的</p><p><script src="index.js"></script>//这里面不需要写目录文件夹名，一旦写就错了，如果写的话，我们需要判断</p></blockquote><ul><li>const static = require(‘koa-static’)</li><li>app.use(static(path.resolve(‘./js’)))</li></ul><p><code>前端静态写了目录文件夹名称的需要进行判断</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx,next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(ctx.url.startsWith(<span class="string">'/js'</span>))&#123;</span><br><span class="line">      <span class="comment">//一般的request请求不能修改，但是例外</span></span><br><span class="line">    ctx.url = ctx.url.replace(<span class="string">'/js'</span>,<span class="string">''</span>)</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//无论满足不满足都应该放行</span></span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="koa-session"><a href="#koa-session" class="headerlink" title="koa-session"></a>koa-session</h4><ul><li>必须引入koa-session</li><li>必须在路由挂载之前</li><li>一般都为默认值，不修改</li><li>signed如果设置false</li></ul><p><a href="/2019/03/15/前端/笔记/node/C:/Users\LRY-NB\AppData\Roaming\Typora\typora-user-images\1563256801627.png" data-fancybox="group" data-caption="1563256801627" class="fancybox"><img alt="1563256801627" title="1563256801627" data-src="/2019/03/15/前端/笔记/node/C:/Users\LRY-NB\AppData\Roaming\Typora\typora-user-images\1563256801627.png" class="lazyload"></a></p><p>则别人会获取到，然后进行解密。再篡改就麻烦了，所以我们一般设置为true，这样就会有个签名和初始值是对应的，修改的话后台会报异常</p><ul><li>httpOnly如果为true，我们客户端document.cookie就会获得到。反正不会</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> render = <span class="built_in">require</span>(<span class="string">'koa-art-template'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">render(app,&#123;</span><br><span class="line">  root: path.join(__dirname,<span class="string">'view'</span>),</span><br><span class="line">  extname: <span class="string">'.html'</span>,</span><br><span class="line">  debug: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/'</span>,<span class="keyword">async</span> ctx =&gt;&#123;</span><br><span class="line">  ctx.render(<span class="string">'index'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.post(<span class="string">'/login'</span>,<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> username = ctx.request.body.username;</span><br><span class="line">  <span class="keyword">let</span> password = ctx.request.body.password;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(username != <span class="string">"admin"</span> || password != <span class="string">"123"</span>)&#123;</span><br><span class="line">    ctx.throw(<span class="number">200</span>,<span class="string">'有急事去啦~'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//在session中存放东西</span></span><br><span class="line">    ctx.session.user = &#123;</span><br><span class="line">      username: <span class="string">'admin'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.body = <span class="string">'登录成功'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">/加密算法字符串/</span><br><span class="line">app.keys = [<span class="string">'some secret hurr'</span>]</span><br><span class="line"><span class="keyword">const</span> CONFIG = &#123;</span><br><span class="line">  key: <span class="string">'koa:sess'</span>, <span class="comment">//cookie名称</span></span><br><span class="line">  maxAge: <span class="number">86400000</span>, </span><br><span class="line">  overwrite: <span class="literal">true</span>, </span><br><span class="line">  httpOnly: <span class="literal">true</span>, 不允许客户端修改cookie</span><br><span class="line">  signed: <span class="literal">true</span>, 数字签名，保证数据不被串改</span><br><span class="line">  rolling: <span class="literal">false</span>,过期时间顺延</span><br><span class="line">  renew: <span class="literal">false</span>, 是否开启一个新的</span><br><span class="line">&#125;</span><br><span class="line">app.use(<span class="keyword">static</span>(path.resolve(<span class="string">'./js'</span>)) )</span><br><span class="line">app.use(bodyParser())</span><br><span class="line">app.use(session(CONFIG, app));</span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.use(router.allowedMethods())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>以上的方法并不能保证信息的安全性，并且cookie的值还会有长度限制，所以改用以下的方式，解不了密</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.keys = [<span class="string">'some secret hurr'</span>]</span><br><span class="line"><span class="keyword">let</span> store = &#123;</span><br><span class="line">  storage: &#123;&#125;,</span><br><span class="line">  get(key)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.storage[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  set(key,sess)&#123;</span><br><span class="line">    <span class="keyword">this</span>.storage[key] = sess</span><br><span class="line">  &#125;,</span><br><span class="line">  destroy (key) &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.storage[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">app.use(session(&#123;store&#125;, app));</span><br></pre></td></tr></table></figure></div><h4 id="koa中出错处理"><a href="#koa中出错处理" class="headerlink" title="koa中出错处理"></a>koa中出错处理</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.throw()<span class="comment">//抛出异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx,next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">  &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    ctx.status = <span class="number">200</span></span><br><span class="line">    ctx.body = <span class="string">`&lt;div&gt;你访问的页面失联了&lt;/div&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> key_len = <span class="number">1024</span></span><br><span class="line"><span class="keyword">const</span> key_count = <span class="number">2048</span></span><br><span class="line"><span class="keyword">let</span> char = <span class="string">'idOFIGLSFGJKSFGfHSGFHusakjfds#￥#@6556aHGSFff&#123;&#125;D&#125;&#123;：SFJAfdsafJ*（……%5KFSdgfdasfkdsjDJF355435&amp;*'</span></span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; key_count; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> key = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; key_len; j++)&#123;</span><br><span class="line">    key += char[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*char.length)]</span><br><span class="line">  &#125;</span><br><span class="line">  arr.push(key)</span><br><span class="line">&#125;</span><br><span class="line">fs.writeFileSync(<span class="string">'.keys'</span>,arr.join(<span class="string">'/n'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`get <span class="subst">$&#123;key_count&#125;</span>`</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;what‘s-node？&quot;&gt;&lt;a href=&quot;#what‘s-node？&quot; class=&quot;headerlink&quot; title=&quot;what‘s node？&quot;&gt;&lt;/a&gt;what‘s node？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;node既不是一种语言，也不是一个框架，更不是一个库。而是一种能让JavaScript运行在服务器上的一个平台&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;首先要下载node.js 自行到官网中下载。注意两个版本的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;node中是以模块来划分作用域&quot;&gt;&lt;a href=&quot;#node中是以模块来划分作用域&quot; class=&quot;headerlink&quot; title=&quot;node中是以模块来划分作用域&quot;&gt;&lt;/a&gt;node中是以模块来划分作用域&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;node里面分为两个作用域，全局作用域（glogbal）和模块作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;require（’模块标识符’） —–我们需引入模块需要用到的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户自定义模块—-自己定义的一个js文件模块&lt;/li&gt;
&lt;li&gt;系统提供模块—例如:fs,http…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://powerlrl.gitee.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Ajax与Fetch</title>
    <link href="https://powerlrl.gitee.io/2019/03/10/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/Ajax%E4%B8%8EFetch/"/>
    <id>https://powerlrl.gitee.io/2019/03/10/前端/笔记/Ajax与Fetch/</id>
    <published>2019-03-10T07:14:03.799Z</published>
    <updated>2020-02-27T16:05:26.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="为什么会发生Ajax跨域？"><a href="#为什么会发生Ajax跨域？" class="headerlink" title="为什么会发生Ajax跨域？"></a>为什么会发生Ajax跨域？</h2><ul><li>浏览器限制</li><li>跨域（不是本地）同源策略</li><li>XHR请求</li></ul><p>所以解决思路：利用jsonp，利用jsonp解决跨域，后台需要改动代码</p><blockquote><p>Ajax的作用是什么：可以实现网页异步更新，这就意味着我们无需加载整个页面的情况下，实行对网页的某一个部分进行更新。也就是实现了页面与web服务器之间数据的异步传输。好了以上都是废话，言简意赅的就是：可以实现页面的局部刷新。</p></blockquote><a id="more"></a><h3 id="源生的ajax请求纯文本"><a href="#源生的ajax请求纯文本" class="headerlink" title="源生的ajax请求纯文本"></a>源生的ajax请求纯文本</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 源生ajax --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">'GET'</span>,<span class="string">'./simple.txt'</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// xhr.onload = function()&#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   console.log(this.status);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   console.log(this.readyState);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(this.status);</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(this.readyState);</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.innerHTML = <span class="keyword">this</span>.responseText;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">      xhr.send();</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>大约整个ajax可以分为四个部分。</p><ul><li><p>创建 XMLHttpRequest对象</p></li><li><p>使用open（’方式’，url，true/false）方法，第一个参数是我们以什么方式请求数据post还是get？url是我们需要请求文件的路径，第三个参数是否是按照异步请求方式（大多数都是true）；</p></li><li>发送请求</li><li>onreadystatechange中我们可以获取到返回值，来更新我们的页面。</li></ul><table><thead><tr><th style="text-align:left"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">status</td><td style="text-align:center">readyState</td></tr><tr><td style="text-align:left">0—请求未初始化</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">1—服务器已经建立连接</td><td style="text-align:center">200—-‘ok’</td></tr><tr><td style="text-align:left">2—请求以建立</td><td style="text-align:center">404—-‘未找到页面’</td></tr><tr><td style="text-align:left">3—请求已连接</td><td style="text-align:center">500—-服务器错误</td></tr><tr><td style="text-align:left">4—请求已完成，且响应就绪</td></tr></tbody></table><p>一般我们使用的状态码是，status=4 并且readyState = 200.</p><h3 id="ajax请求json文件"><a href="#ajax请求json文件" class="headerlink" title="ajax请求json文件"></a>ajax请求json文件</h3><p>这里说明一下，我在这里也遇到一个坑啊，我一开是使用的是onreadystatechange，但是没有判断状态码，这就导致了可能响应还没就绪，我就获取利用json.parse方法解析json文件。从而导致报错，如果这里不使用onreadystatechange可以使用onload，它是响应就绪才执行的。</p><ul><li>json.parse —–可以返回给定 JSON 字符串转换后的对象。</li><li>json.stringify—–将对象或者数组转换为字符串。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn'</span>&gt;</span>获取单个用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 源生ajax请求json文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>,loadUser);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">loadUser</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">'GET'</span>,<span class="string">'json1.json'</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="keyword">this</span>.status == <span class="number">200</span> &amp;&amp; <span class="keyword">this</span>.readyState == <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> str = <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined">          str += `</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>$&#123;data[0].name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>$&#123;data[0].id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>$&#123;data[0].sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="undefined">          `;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.getElementById(<span class="string">'user'</span>).innerHTML = str;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      xhr.send();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="ajax请求github接口"><a href="#ajax请求github接口" class="headerlink" title="ajax请求github接口"></a>ajax请求github接口</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn'</span>&gt;</span>请求多个用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"users"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).addEventListener(<span class="string">'click'</span>,loadUsers);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">loadUsers</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">'GET'</span>,<span class="string">'https://api.github.com/users'</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="keyword">this</span>.status == <span class="number">200</span> &amp;&amp; <span class="keyword">this</span>.readyState == <span class="number">4</span> )&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> users = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(users);</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 遍历整个数组</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> str = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span>( <span class="keyword">let</span> i <span class="keyword">in</span> users)&#123;</span></span><br><span class="line"><span class="undefined">            str += `</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;users[i].login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="undefined">            `</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.getElementById(<span class="string">'users'</span>).innerHTML = <span class="string">'用户名：'</span>+str;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      xhr.send();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="ajax请求php"><a href="#ajax请求php" class="headerlink" title="ajax请求php"></a>ajax请求php</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'text'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">'btn'</span>&gt;</span>获取php数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>,getMessage);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> name = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).value;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> xhr =  <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">'GET'</span>,<span class="string">'demo3.php?name='</span>+name,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      xhr.send();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>php代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">'GET:你的名字是'</span>.$_GET[<span class="string">'name'</span>];</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p><a href="/2019/03/10/前端/笔记/Ajax与Fetch/Ajax/QQ图片20190310170526.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="/2019/03/10/前端/笔记/Ajax与Fetch/Ajax/QQ图片20190310170526.png" class="lazyload"></a></p><h3 id="jquery中ajax的应用"><a href="#jquery中ajax的应用" class="headerlink" title="jquery中ajax的应用"></a>jquery中ajax的应用</h3><p>在jquery中ajax用着就特别方便，比起源生的较容易的多。</p><ul><li>dateType—指定的请求数据的方式</li><li>url—路径</li><li>success—-响应就绪会执行一个回调函数，data是返回的值。恩 。。相当于this.responseText</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">'btn'</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        dateType: <span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">        url: <span class="string">'./demo3.php?name=herry'</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>以上有没有发现都是GET请求呢？</code></p><h3 id="POST请求数据"><a href="#POST请求数据" class="headerlink" title="POST请求数据"></a>POST请求数据</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">'POST'</span>,<span class="string">'./demo2.php'</span>);</span></span><br><span class="line"><span class="javascript">    xhr.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span></span><br><span class="line"><span class="javascript">    xhr.send(<span class="string">'name=zs&amp;age=14'</span>);</span></span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(xhr.responseText); </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>这里需要注意的是，我们如果携带参数的话，不是在url中写了，而是以密文的方式，用send发送。同样注意的是，<strong>我们必须要设置请求头，不然的话是post不到数据的</strong></p><h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><p>会了ajax为何还要学习fetch</p><ul><li>语法简洁，更加语义化</li><li>基于promise实现，支持asyn/awit</li><li>脱离了xhr</li></ul><h4 id="fetch中的get操作"><a href="#fetch中的get操作" class="headerlink" title="fetch中的get操作"></a>fetch中的get操作</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fetch(url,&#123;</span><br><span class="line">    method: <span class="string">'GET/POST'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//json方法中包含一个promise对象，但是这个我们无需写resolve和reject，因为计算机会帮助我们判断时候成功还是失败</span></span><br><span class="line">    res.json(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)<span class="comment">//res是后台返回的数据</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"服务器错误"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="fetch-nodejs操作"><a href="#fetch-nodejs操作" class="headerlink" title="fetch+nodejs操作"></a>fetch+nodejs操作</h3><p><strong>前端</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pass"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="javascript">            btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(`http://localhost:3000/login?user=$&#123;user.value&#125;&amp;pass=$&#123;pass.value&#125;`);</span></span></span><br><span class="line"><span class="javascript">                fetch(<span class="string">`http://localhost:3000/login?user=<span class="subst">$&#123;user.value&#125;</span>&amp;pass=<span class="subst">$&#123;pass.value&#125;</span>`</span>,&#123;</span></span><br><span class="line"><span class="javascript">                    method: <span class="string">'GET'</span></span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                    res.json(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res)</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(res.ok)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">document</span>.body.style.background = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">document</span>.body.style.background = <span class="string">"green"</span>;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;,()=&gt;&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"服务器错误"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;)</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>后端</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(<span class="string">""</span>,express.static(<span class="string">"./"</span>))</span><br><span class="line"><span class="keyword">let</span> users = &#123;</span><br><span class="line">    leo: <span class="string">"1111"</span></span><br><span class="line">&#125;</span><br><span class="line">app.use(<span class="string">"/login"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(users[req.query.user] == req.query.pass)&#123;</span><br><span class="line">        res.send(&#123;<span class="attr">ok</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">"登录成功"</span>&#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.send(&#123;<span class="attr">ok</span>:<span class="number">0</span>,<span class="attr">msg</span>:<span class="string">"登录失败"</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h1&gt;&lt;h2 id=&quot;为什么会发生Ajax跨域？&quot;&gt;&lt;a href=&quot;#为什么会发生Ajax跨域？&quot; class=&quot;headerlink&quot; title=&quot;为什么会发生Ajax跨域？&quot;&gt;&lt;/a&gt;为什么会发生Ajax跨域？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浏览器限制&lt;/li&gt;
&lt;li&gt;跨域（不是本地）同源策略&lt;/li&gt;
&lt;li&gt;XHR请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以解决思路：利用jsonp，利用jsonp解决跨域，后台需要改动代码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ajax的作用是什么：可以实现网页异步更新，这就意味着我们无需加载整个页面的情况下，实行对网页的某一个部分进行更新。也就是实现了页面与web服务器之间数据的异步传输。好了以上都是废话，言简意赅的就是：可以实现页面的局部刷新。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端数据请求" scheme="https://powerlrl.gitee.io/tags/%E5%89%8D%E7%AB%AF%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>art-template</title>
    <link href="https://powerlrl.gitee.io/2019/03/09/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/art-template/"/>
    <id>https://powerlrl.gitee.io/2019/03/09/前端/笔记/art-template/</id>
    <published>2019-03-09T06:35:20.557Z</published>
    <updated>2020-02-27T13:39:40.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前端如何引用"><a href="#一、前端如何引用" class="headerlink" title="一、前端如何引用"></a>一、前端如何引用</h2><ul><li>可以使用npm方式</li><li>可以使用script标签</li></ul><blockquote><p>这里我们使用script标签</p><script src="https://unpkg.com/art-template@4.13.2/lib/template-web.js"></script></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/template'</span> <span class="attr">id</span>=<span class="string">'box'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;test&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      test: <span class="string">'h'</span>,</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> html = template(<span class="string">'box'</span>,obj);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.innerHTML = html;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>以上就是一个模板引擎的基本使用。首先我们先写一个模板，注意不要忘记给id值，里面是我们要创建的模板，接着我们要创建一个模板对象（一定要是对象）然后创建一个模板，第一个参数是id值，第二参数是创建模板对象名。向文档中插入模板。</p><p>如果我们想要多个模板，这时候就可以使用到遍历，（个人感觉这里 有点像vue中的v-for指令）</p><a id="more"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">'text/template'</span> id=<span class="string">'wrap'</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;&#123;each test&#125;&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123;$value&#125;&#125;&lt;li&gt;</span><br><span class="line">      &#123;&#123;/each&#125;&#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  let obj = &#123;</span></span><br><span class="line"><span class="regexp">       test : ['z','h','s'],</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     let value = template('wrap',obj);</span></span><br><span class="line"><span class="regexp">     console.log(value);</span></span><br><span class="line"><span class="regexp">     document.body.innerHTML = value;</span></span><br></pre></td></tr></table></figure></div><p>这样就可在页面中创建三个li标签，他们的值分别是数组中的值，当然出来each遍历，我们还有判断</p><p>if （可去官方文档中查阅）对于模板引擎也只是一点点的了解！😭</p><p><strong>浏览器中的模板引擎的应用，和jq中的ajax实例</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"出发站"</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"终点站"</span> <span class="attr">id</span>=<span class="string">"end"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查询"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>车次<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>类型<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>出发站<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>到达站<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>出发时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>到达时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>距离<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"templateId"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#123;&#123;each list&#125;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.trainno&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.type&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.station&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.endstation&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.departuretime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.arrivaltime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.sequenceno&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    &#123;&#123;/each&#125;&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"public/node_modules/art-template/lib/template-web.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"input[type=button]"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> start = $(<span class="string">"#start"</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> end = $(<span class="string">"#end"</span>).val();</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">          url: <span class="string">"https://api.jisuapi.com/train/station2s"</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="javascript">          data: &#123;     <span class="comment">//此时的data是相当于字符串拼接在url中</span></span></span><br><span class="line"><span class="javascript">            appkey: <span class="string">"6543d2444cbc0776"</span>,</span></span><br><span class="line"><span class="undefined">            start: start,</span></span><br><span class="line"><span class="undefined">            end: end</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          dataType: <span class="string">"jsonp"</span>,</span></span><br><span class="line"><span class="javascript">          success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="undefined">              list: data.result.list</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> html = template(<span class="string">"templateId"</span>,obj);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(html);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"table"</span>).append(html);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">         </span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="二、node中的模板引擎"><a href="#二、node中的模板引擎" class="headerlink" title="二、node中的模板引擎"></a>二、node中的模板引擎</h2><blockquote><p>最近发现模板引擎真是个好东西，它竟然还可以继承和引入？？牛批，这里的挖坑和填坑，我又感觉像是vue中的插槽。。</p></blockquote><h4 id="1-先看下我们的目录树"><a href="#1-先看下我们的目录树" class="headerlink" title="1. 先看下我们的目录树"></a>1. 先看下我们的目录树</h4><p><a href="/2019/03/09/前端/笔记/art-template/QQ图片20190407122814.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="/2019/03/09/前端/笔记/art-template/QQ图片20190407122814.png" class="lazyload"></a></p><ul><li>public 是存放我们的静态资源库</li><li><p>views 存放我们的视图</p><ul><li>_ layout文件夹存放我们的母版_</li><li>_ partials 存放我们的公共头部，尾部，导航栏</li><li>index .html login.html register.html（渲染文件默认到views文件夹下）</li></ul></li><li><p>app.js 入口文件</p></li></ul><h4 id="2-如何用公共的头部和尾部"><a href="#2-如何用公共的头部和尾部" class="headerlink" title="2.如何用公共的头部和尾部"></a>2.如何用公共的头部和尾部</h4><p>​    app.js中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.engine(<span class="string">'html'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"><span class="comment">//配置插件开始</span></span><br><span class="line"><span class="keyword">let</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">//配置body-parser</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//插件配置结束</span></span><br><span class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">    title: <span class="string">'hello wolrd'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>​    home.html</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 留个样式的插槽 这样我就可以有自己单独的样式了, --&gt;</span></span><br><span class="line">  &#123;&#123;block 'style'&#125;&#125;</span><br><span class="line">  &#123;&#123;/block&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  &#123;&#123;include '../_partials/header.html'&#125;&#125;</span><br><span class="line">  <span class="comment">&lt;!-- 一个页面基本的头部和尾部都有，但是只有我们的内容不一样，所以我们就要留个坑，无论哪一个页面需要的话，填坑就行了 --&gt;</span></span><br><span class="line">  &#123;&#123;block 'content'&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>默认坑里的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  &#123;&#123;/block&#125;&#125;</span><br><span class="line">  &#123;&#123;include '../_partials/footer.html'&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 留个script插槽 --&gt;</span></span><br><span class="line">  &#123;&#123;block 'script'&#125;&#125;</span><br><span class="line">  &#123;&#123;/block&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>​    index.html</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承home模板 --&gt;</span></span><br><span class="line">&#123;&#123;extend './_layout/home.html'&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 填坑样式 --&gt;</span></span><br><span class="line">&#123;&#123;block 'style'&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body&#123;</span></span><br><span class="line"><span class="undefined">      background: brown;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 填坑操作 --&gt;</span></span><br><span class="line">&#123;&#123;block 'content'&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容，我会把默认内容覆盖掉<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure></div><p>​    footer.html</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>公共尾部<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>​    header.html</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>公共的头部<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="三、结果"><a href="#三、结果" class="headerlink" title="三、结果"></a>三、结果</h2><p><a href="/2019/03/09/前端/笔记/art-template/QQ图片20190407125142.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="/2019/03/09/前端/笔记/art-template/QQ图片20190407125142.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前端如何引用&quot;&gt;&lt;a href=&quot;#一、前端如何引用&quot; class=&quot;headerlink&quot; title=&quot;一、前端如何引用&quot;&gt;&lt;/a&gt;一、前端如何引用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以使用npm方式&lt;/li&gt;
&lt;li&gt;可以使用script标签&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里我们使用script标签&lt;/p&gt;
&lt;script src=&quot;https://unpkg.com/art-template@4.13.2/lib/template-web.js&quot;&gt;&lt;/script&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;text/template&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;box&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;test&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;      test: &lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; html = template(&lt;span class=&quot;string&quot;&gt;&#39;box&#39;&lt;/span&gt;,obj);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.innerHTML = html;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上就是一个模板引擎的基本使用。首先我们先写一个模板，注意不要忘记给id值，里面是我们要创建的模板，接着我们要创建一个模板对象（一定要是对象）然后创建一个模板，第一个参数是id值，第二参数是创建模板对象名。向文档中插入模板。&lt;/p&gt;
&lt;p&gt;如果我们想要多个模板，这时候就可以使用到遍历，（个人感觉这里 有点像vue中的v-for指令）&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="模板引擎" scheme="https://powerlrl.gitee.io/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>jsonp百度跨域搜索</title>
    <link href="https://powerlrl.gitee.io/2019/03/08/demo/jsonp%E7%99%BE%E5%BA%A6%E8%B7%A8%E5%9F%9F%E6%90%9C%E7%B4%A2/"/>
    <id>https://powerlrl.gitee.io/2019/03/08/demo/jsonp百度跨域搜索/</id>
    <published>2019-03-08T05:18:39.705Z</published>
    <updated>2020-02-27T13:25:57.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jsonp百度跨域搜索"><a href="#jsonp百度跨域搜索" class="headerlink" title="jsonp百度跨域搜索"></a>jsonp百度跨域搜索</h1><p>恩？好像有很久没有更新博客了吧？最近了解到一点点的（也只有一点点）jsonp跨域的操作，差不多我们每天都会打开这个网页，当然不包括那些打开Google的人（没翻墙软件）那么我们是如何实现这个效果的呢？</p><p><a href="/2019/03/08/demo/jsonp百度跨域搜索/QQ图片20190308132734.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="/2019/03/08/demo/jsonp百度跨域搜索/QQ图片20190308132734.png" class="lazyload"></a></p><h2 id="一、骨架"><a href="#一、骨架" class="headerlink" title="一、骨架"></a>一、骨架</h2><p>那么我们的一个基本骨架就搭建好了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'text'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn'</span> &gt;</span>百度一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'show'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="二、功能"><a href="#二、功能" class="headerlink" title="二、功能"></a>二、功能</h2><a id="more"></a><p>这里我们用es6的语法，恩。。。当然是因为学了要用嘛</p><p>思路：我们应该首先获取到基本的元素，这里无论你用何种方式获取到。（当然这里用个坑啊，因为我一开是用的button标签从而导致浏览器默认它的类型是submit从而我一点击的时候它就会默认提交表单，所以我们要换成input标签）当然我们应该有个事件对这些元素进行基本操作，我们想一下，我们经常在百度的时候我们边打字其下的下拉列表框会有时会出现我们在文本框中搜索的关键字。当然用onkeyup(键盘抬起事件)，在这个事件中，我们首先获取的是文本框的值，其次我们要创建一个script标签，（为什么要创建script标签呢？因为script的标签有src，当然你也可以使用Img但是已经没有很多人用Img标签）xhr浏览器回拦截，不允许跨域。接着将script标签的src拼接到我们需要搜索的值，向页面中插入我们创建的标签，当然还是要删掉这个标签（要不然就会很多script标签）这里我们是执行完回调函数才删除script标签的。</p><p><a href="/2019/03/08/demo/jsonp百度跨域搜索/QQ图片20190309142538.png" data-fancybox="group" data-caption="" class="fancybox"><img alt="" title="" data-src="/2019/03/08/demo/jsonp百度跨域搜索/QQ图片20190309142538.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> search = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>);</span><br><span class="line">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">    <span class="keyword">let</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> show = <span class="built_in">document</span>.getElementById(<span class="string">'show'</span>);</span><br><span class="line">    search.onkeydown = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> value = search.value;</span><br><span class="line">      <span class="keyword">let</span> script= <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">      script.src=<span class="string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='</span>+value+<span class="string">'&amp;cb=jsonp'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> data = arg.s;</span><br><span class="line">      ul.innerHTML = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">if</span>(data.length)</span><br><span class="line">      &#123;</span><br><span class="line">          show.style.display = <span class="string">'block'</span>;</span><br><span class="line">          data.forEach(<span class="function">(<span class="params">el,index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">          li.innerHTML = el;</span><br><span class="line">          ul.appendChild(li);</span><br><span class="line">          li.onclick = <span class="function"><span class="params">()</span>=&gt;</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">'https://www.baidu.com/s?wd='</span>+el;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        show.style.display = <span class="string">'none'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><p>cors实现跨域，它允许浏览器向跨源浏览器发出XMLHttpRequest请求，从而克服了只能同源使用的限制。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jsonp百度跨域搜索&quot;&gt;&lt;a href=&quot;#jsonp百度跨域搜索&quot; class=&quot;headerlink&quot; title=&quot;jsonp百度跨域搜索&quot;&gt;&lt;/a&gt;jsonp百度跨域搜索&lt;/h1&gt;&lt;p&gt;恩？好像有很久没有更新博客了吧？最近了解到一点点的（也只有一点点）jsonp跨域的操作，差不多我们每天都会打开这个网页，当然不包括那些打开Google的人（没翻墙软件）那么我们是如何实现这个效果的呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/08/demo/jsonp百度跨域搜索/QQ图片20190308132734.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、骨架&quot;&gt;&lt;a href=&quot;#一、骨架&quot; class=&quot;headerlink&quot; title=&quot;一、骨架&quot;&gt;&lt;/a&gt;一、骨架&lt;/h2&gt;&lt;p&gt;那么我们的一个基本骨架就搭建好了&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;box&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;btn&#39;&lt;/span&gt; &amp;gt;&lt;/span&gt;百度一下&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;show&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二、功能&quot;&gt;&lt;a href=&quot;#二、功能&quot; class=&quot;headerlink&quot; title=&quot;二、功能&quot;&gt;&lt;/a&gt;二、功能&lt;/h2&gt;
    
    </summary>
    
      <category term="demo" scheme="https://powerlrl.gitee.io/categories/demo/"/>
    
    
      <category term="JavaScript" scheme="https://powerlrl.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://powerlrl.gitee.io/2019/02/10/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E5%85%B7/git/"/>
    <id>https://powerlrl.gitee.io/2019/02/10/前端/工具/git/</id>
    <published>2019-02-10T13:36:34.478Z</published>
    <updated>2020-02-27T16:04:21.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>初始Git及其应用</p><ul><li>git config -l （可以查看邮箱和名称）</li><li>touch  index.html（可以创建一个index.html的文件）</li><li>mkdir 文件夹名</li><li>git add  文件名/.（把文件添加到缓冲区，. 是把所有的文件添加到缓冲区）</li><li>git rm –cached 文件名（把文件从缓冲区中移除）</li></ul><a id="more"></a><ul><li><p>git status （查看提交的状态）</p></li><li><p>git commit (提交文件到本地的仓库，需要编辑，wq才能退出编辑的状态)</p></li><li>git commit -m “文件提示”（这一步是把上面的两步变为一步）</li></ul><p>Git中忽视文件或者文件夹</p><p>一般的日志文件或者是文件夹我们都需要忽略掉。但是我们git status 的时候都会显示出来，那么我们该如何去隐藏掉呢</p><p>这个时候我们需要创建一个.gitignore把我们所有需要隐藏的文件或者文件夹写在里面。</p><p>在.gitignore文件中我们需要这个样子写</p><p>同样的文件夹，我们如果需要隐藏，只要写成/文件夹名称</p><p><strong>Git分支上的应用</strong></p><ul><li>创建分支—————git branch “分支 名”</li><li>切换分支—————-git checkout “分支名”</li><li>合并分支（需要切换到主分支上）—————-git merge “子分支”</li><li>查看当前分支———————git branch</li></ul><p><strong>Git与GitHub连接</strong></p><p>在我们的GitHub中创建了一个仓库，我们会一开始会生成一个文档，这里有我们需要的两条命令。这两个命令用于我们和GitHub的远程仓库进行连接。如果第二条出现错误，你先要检查一下是否当前仓库的GitHub地址是否和git连接的地址一样。</p><p>然后git push</p><ul><li>（严格按照上面两条来执行，建立连接origin，选择分支（master））</li><li>git pull 把线上的分支拉下来</li><li>git push 把本地的分支提交到线上</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;/a&gt;git&lt;/h3&gt;&lt;p&gt;初始Git及其应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git config -l （可以查看邮箱和名称）&lt;/li&gt;
&lt;li&gt;touch  index.html（可以创建一个index.html的文件）&lt;/li&gt;
&lt;li&gt;mkdir 文件夹名&lt;/li&gt;
&lt;li&gt;git add  文件名/.（把文件添加到缓冲区，. 是把所有的文件添加到缓冲区）&lt;/li&gt;
&lt;li&gt;git rm –cached 文件名（把文件从缓冲区中移除）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="https://powerlrl.gitee.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://powerlrl.gitee.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="https://powerlrl.gitee.io/2019/02/08/%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0/ES6/"/>
    <id>https://powerlrl.gitee.io/2019/02/08/前端/笔记/ES6/</id>
    <published>2019-02-08T05:28:33.232Z</published>
    <updated>2020-02-27T13:39:21.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><blockquote><p>Es6（ECMASCRIPT 6）是继ES5的新一代web前端开发的一个标准语法，JavaScript 和 ECMAScript 是什么关系呢？</p><p>我只记得阮一峰老师的ES6标准入门的一句话  <strong>前者是后者的一种实现，后者是前者的一种规范</strong></p></blockquote><h4 id="一、用let定义变量"><a href="#一、用let定义变量" class="headerlink" title="一、用let定义变量"></a>一、用let定义变量</h4><p>在es5中我们使用的用var定义变量这样带来的不好的问题有一下几点。</p><ol><li>用var定义的变量提升</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果： undefined</span></span><br><span class="line"><span class="comment">//报错</span></span><br></pre></td></tr></table></figure></div><p>按照我们普通的逻辑来说应该是报错的，但是却出现undefined显然不和我们的逻辑。如果是es6显然不会出现这种问题。所以变量在没有申明之前是不可以被使用的，术语称之为 ”暂时性死区“    </p><a id="more"></a><ol start="2"><li>用let定义变量不能重复定义</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span> .onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;<span class="comment">//或者let a = 3；const a = 5；都会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>用let定义的变量，不能够允许第二次定义。用其他的定义变量的方式也是不行的。</p><ol start="3"><li>块级作用域的引入（{}）</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> j = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(j);<span class="comment">//报错。</span></span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="二、对象的简洁写法"><a href="#二、对象的简洁写法" class="headerlink" title="二、对象的简洁写法"></a>二、对象的简洁写法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"xm"</span>,</span><br><span class="line">age = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : name;</span><br><span class="line">    age: age;</span><br><span class="line">    sayhello : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"nihao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br><span class="line"><span class="built_in">console</span>.log(obj.sayhello());</span><br></pre></td></tr></table></figure></div><p>像上面这样的变量名相同的情况下，完全可以另一种写法这种得到的结果是和上面的一样，是不是代码精简很多？上面的obj.name可以替换成obj[“name”]注意双引号不能省略。注意此时的左边name是属性名，如果替换为[name]: “zh”;此时用的正是用let定义的变量name。这是es6的新属性。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    sayhello()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"nihao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"zh"</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [name]: <span class="string">"cc"</span>;</span><br><span class="line">    [<span class="string">"he"</span>+<span class="string">"llo"</span>]:<span class="string">"hi"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">//结果为cc用的是上面定义的name变量。</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hello);<span class="comment">//获取结果为hi；</span></span><br></pre></td></tr></table></figure></div><h4 id="三、rest参数"><a href="#三、rest参数" class="headerlink" title="三、rest参数"></a>三、rest参数</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b,c,...arr</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(fn.length);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">          &#125;</span><br><span class="line">          fn(<span class="number">2</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="number">34</span>,<span class="number">13</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//运行结果为  3 和 5</span></span><br></pre></td></tr></table></figure></div><blockquote><p>why？为什么是3和5呢？这里的rest参数搭配一个变量名使用，参数一个获取函数多余的参数生成一个数组。这里我也不是太清楚，至于arguments则是获取实参的长度。rest参数不能放在其他的位置，只能作为最后一个参数。</p></blockquote><h4 id="四、函数默认参数值"><a href="#四、函数默认参数值" class="headerlink" title="四、函数默认参数值"></a>四、函数默认参数值</h4><ul><li><p>在es5中我们的写法是这个样子的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cn</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">            a = a || <span class="number">0</span>;</span><br><span class="line">            b = b || <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(a+b);</span><br><span class="line">          &#125;</span><br><span class="line">          cn(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//恩，运行结果是 4</span></span><br></pre></td></tr></table></figure></div><h5 id="如果没有那两句代码，则运行结果是NaN-那让我们看看在es6中是"><a href="#如果没有那两句代码，则运行结果是NaN-那让我们看看在es6中是" class="headerlink" title="如果没有那两句代码，则运行结果是NaN 那让我们看看在es6中是"></a>如果没有那两句代码，则运行结果是NaN 那让我们看看在es6中是</h5></li></ul>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b=<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(a+b);</span><br><span class="line">          &#125;</span><br><span class="line">          fn(<span class="number">3</span>);</span><br><span class="line">fn(<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></div><h4 id="五、箭头函数"><a href="#五、箭头函数" class="headerlink" title="五、箭头函数"></a>五、箭头函数</h4>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(value,key);</span><br><span class="line">          &#125;</span><br><span class="line">         fn(<span class="number">3</span>,<span class="number">4</span>);<span class="comment">//3 4</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> fn = <span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(value,key);</span><br><span class="line">            &#125;</span><br><span class="line">            fn(<span class="number">3</span>,<span class="number">3</span>);  <span class="comment">//3 3</span></span><br></pre></td></tr></table></figure></div><p>  恩？Excuse me？？还可以这样玩吗？这是针对有两个参数的必须用括号包裹起来，如果没有参数，或者只有一个参数我们还可以这样.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">()=&gt;&#123;</span><br><span class="line">            statement</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></div><p>甚至还可以这样只有一个参数，省略括号    或者返回值是一个表达式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">value =&gt; &#123;</span><br><span class="line">            statement</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">value =&gt; expression</span><br></pre></td></tr></table></figure></div><p>如果加入返回值，what? 还可以这样？？？？妈耶真是intresting。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="params">value</span> =&gt;</span> value*<span class="number">2</span>;</span><br><span class="line">          <span class="built_in">console</span>.log(fn(<span class="number">3</span>));   <span class="comment">//6</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">3</span>));</span><br></pre></td></tr></table></figure></div><p>ok,到这里你已经差不多会用箭头函数了吧。是不是语法更加的简洁，emmm 真香！</p><blockquote><p>箭头函数不会绑定this（以上如果打印this则都会指向Window对象）箭头函数内部没有this！使用的父级作用域的this不能和new一起使用，不能作为构造函数，没有arguments，那怎么办，我们可以使用rest参数。</p></blockquote><blockquote><p><strong>箭头函数在定义时执行器上下文的this的指向（不具有块级作用域），即会取当前的函数的作用域链上的this，忽略块级作用域中的this</strong></p></blockquote><h4 id="六、解构赋值"><a href="#六、解构赋值" class="headerlink" title="六、解构赋值"></a>六、解构赋值</h4><ul><li>ES5中我们是不是这个样子赋值的,恩，当然还有es6的</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>,b = <span class="number">3</span>,c = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当然二者是等价的。第二种是对应的关系。就像就像模式一样。</span></span><br><span class="line"><span class="keyword">let</span> [a,[b],c] = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]<span class="comment">//emmm当然报错啦，[b]对应的应该是[4];如果改成[4,2]再打印b的话就是4对应对应切记！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:a,<span class="attr">b</span>:b,<span class="attr">c</span>:c&#125; = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">44</span>,<span class="attr">c</span>:<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">        <span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="comment">//我们还可以这个样子写</span></span><br><span class="line"><span class="keyword">let</span> &#123;a,b,c&#125; = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">44</span>,<span class="attr">c</span>:<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印的是哪边的abc呢？</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:w,<span class="attr">b</span>:s,<span class="attr">c</span>:x&#125; = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">44</span>,<span class="attr">c</span>:<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(w);</span><br><span class="line">        <span class="built_in">console</span>.log(s);</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">//二者等价，前面只是属性的名字。</span></span><br></pre></td></tr></table></figure></div><h4 id="七、扩展运算符"><a href="#七、扩展运算符" class="headerlink" title="七、扩展运算符"></a>七、扩展运算符</h4><p>这里所说的扩展运算符是三个点…，不要小看这三个点。它可是用处的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//扩展运算符</span></span><br><span class="line">        <span class="keyword">let</span> newDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line">        <span class="comment">//这获取的是一个类数组，我们如何获取它的每一个呢，哎，我们可以这样也就是数组的扩展。</span></span><br><span class="line">        <span class="built_in">console</span>.log([...newDiv]);</span><br><span class="line">        <span class="comment">//或者可以直接</span></span><br><span class="line">        <span class="keyword">let</span> newDiv = [...document.getElementsByTagName(<span class="string">"div"</span>)];</span><br><span class="line">        <span class="comment">//然后我们就可以对其进行操作</span></span><br><span class="line">        newDiv[<span class="number">0</span>].innerHTML = <span class="string">"你好啊，这个世界！"</span>;</span><br><span class="line">        <span class="comment">//对两个数组进行连接操作；</span></span><br><span class="line">        <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">let</span> arr2 = [...arr,<span class="number">34</span>,<span class="number">35</span>,<span class="number">535</span>];</span><br><span class="line">        <span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure></div><p>扩展运算符实现拷贝继承</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="八、字符串扩展"><a href="#八、字符串扩展" class="headerlink" title="八、字符串扩展"></a>八、字符串扩展</h4><ul><li>includes()查看字符串中是否包含该参数</li><li>startsWith()字符串是否以该参数开头</li><li>endsWith()同理</li><li>repeat（）指定字符串重复多少次</li><li>padStart（参数1，参数2）；参数1必须大于字符串的个数，则用参数2补开头多少个是参数1</li><li>padEnd（）同理</li></ul><h4 id="字符串模板（也是挺main）"><a href="#字符串模板（也是挺main）" class="headerlink" title="字符串模板（也是挺main）"></a>字符串模板（也是挺main）</h4><p>要遵循它的规则，反引号和${}它会解析</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es5中我们是这个样子的</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"木木"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我的名字叫"</span>+name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//再es6中</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"二人"</span>；</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`我的名字是<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二者等价</span></span><br></pre></td></tr></table></figure></div><p><strong>当然还有标签模板</strong>，这个啊，我可能要不是太了解，只知道它会把反引号解析成函数的单引号，从而生成一个数组。像这样</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name =<span class="string">"nn"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">13</span>；</span><br><span class="line"><span class="built_in">console</span>.log<span class="string">`我的名字<span class="subst">$&#123;name&#125;</span>我今年<span class="subst">$&#123;age&#125;</span>岁`</span></span><br><span class="line"><span class="comment">//结果是生成了一个数组</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>)</span><br><span class="line"><span class="number">0</span>: <span class="string">"我的名字"</span></span><br><span class="line"><span class="number">1</span>: <span class="string">"我今年"</span></span><br><span class="line"><span class="number">2</span>: <span class="string">"岁"</span></span><br><span class="line">length: <span class="number">3</span></span><br><span class="line"><span class="string">"nn"</span><span class="number">13</span></span><br></pre></td></tr></table></figure></div><h4 id="九、新增数据类型Set和Map"><a href="#九、新增数据类型Set和Map" class="headerlink" title="九、新增数据类型Set和Map"></a>九、新增数据类型Set和Map</h4><p>set集合主要是去重，没有重复的值，类似于数组key和value的值是相等的。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王二"</span>]);</span><br><span class="line">        <span class="built_in">console</span>.log(set);</span><br><span class="line">        <span class="comment">//一个属性集合的长度3</span></span><br><span class="line">        <span class="built_in">console</span>.log(set.size);</span><br><span class="line">        <span class="comment">//四个方法 </span></span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        set.add(<span class="string">"麻子"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(set);</span><br><span class="line">        <span class="comment">//delete</span></span><br><span class="line">        set.delete(<span class="string">"麻子"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(set);</span><br><span class="line">        <span class="comment">//has  是否包含该值</span></span><br><span class="line">        set.has(<span class="string">"麻子"</span>);</span><br><span class="line">        <span class="comment">//clear没有返回值</span></span><br><span class="line">        set.clear();</span><br><span class="line">        <span class="built_in">console</span>.log(set);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是测试结果</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">Set</span>(<span class="number">3</span>) &#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王二"</span>&#125;</span><br><span class="line">         <span class="number">3</span></span><br><span class="line">        <span class="built_in">Set</span>(<span class="number">4</span>) &#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王二"</span>, <span class="string">"麻子"</span>&#125;</span><br><span class="line">        <span class="built_in">Set</span>(<span class="number">3</span>) &#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王二"</span>&#125;</span><br><span class="line">        <span class="built_in">Set</span>(<span class="number">0</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></div><p><strong>下面我们重点介绍下Map这个令人头疼的集合。个人觉得有点乱啊！</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,obj2=&#123;<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line">      <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">        [<span class="string">'name'</span>,<span class="string">'zs'</span>],</span><br><span class="line">        [<span class="string">'age'</span>,<span class="number">13</span>],</span><br><span class="line">        [obj1,<span class="string">'今天气很好'</span>],</span><br><span class="line">        [obj2,<span class="string">'适合睡觉'</span>],</span><br><span class="line">        [[<span class="number">1</span>,<span class="number">2</span>],<span class="string">'hh'</span>],</span><br><span class="line">      ]);</span><br><span class="line">      <span class="built_in">console</span>.log(map);</span><br><span class="line">      <span class="comment">//属性</span></span><br><span class="line">      <span class="built_in">console</span>.log(map.size);</span><br><span class="line">      <span class="comment">//add delete clear不在叙述和set一样下面说说set和get</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//向map集合后面追加键和值。</span></span><br><span class="line">      map.set(<span class="string">'friends'</span>,[<span class="string">'赵六'</span>,<span class="string">'力气'</span>]).set([<span class="string">'dog'</span>],<span class="string">'夏鸥'</span>);</span><br><span class="line">      <span class="comment">//获取name的值zs</span></span><br><span class="line">      <span class="built_in">console</span>.log(map.get(<span class="string">'name'</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//构造器MapIterator</span></span><br><span class="line">      <span class="built_in">console</span>.log(map.keys());</span><br><span class="line">      <span class="built_in">console</span>.log(map.values());</span><br><span class="line">      <span class="built_in">console</span>.log(map.entries());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//详细叙述一下集合的遍历</span></span><br><span class="line">      map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(index+value);</span><br><span class="line">      &#125;);</span><br><span class="line">      map.set(&#123;&#125;,<span class="string">"hhh"</span>);</span><br><span class="line">      map.set(&#123;&#125;,<span class="string">"666"</span>);</span><br><span class="line">      <span class="comment">//思考一下会只出现第一个吗？显然是不会的。</span></span><br><span class="line">      <span class="comment">//记住是地址不同。第二个虽然看似和第一个相同。但是指向的内存地址不同，所以是两个不同的对象</span></span><br><span class="line">      <span class="built_in">console</span>.log(&#123;&#125;===&#123;&#125;);<span class="comment">//false</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></div><h4 id="十、Symbol（）"><a href="#十、Symbol（）" class="headerlink" title="十、Symbol（）"></a>十、Symbol（）</h4><p><em>Symbol()解决命名冲突,独一无二的</em>不会与其他属性起冲突,在开发中经常作为规范！</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1=<span class="built_in">Symbol</span>();</span><br><span class="line">        <span class="keyword">let</span> str2 = <span class="built_in">Symbol</span>();</span><br><span class="line">        <span class="built_in">console</span>.log((str1 === str2));<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//通常怎么用呢</span></span><br><span class="line">        <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">        obj.name = <span class="string">"xz"</span>;</span><br><span class="line">        obj.name =<span class="string">"yo"</span>;<span class="comment">//ok 里面只有yo</span></span><br><span class="line">        obj[<span class="built_in">Symbol</span>(<span class="string">'name'</span>)] = <span class="string">'zs'</span>;</span><br><span class="line">        obj[<span class="built_in">Symbol</span>(<span class="string">'name'</span>)] = <span class="string">'xx'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure></div><h4 id="十一、Class"><a href="#十一、Class" class="headerlink" title="十一、Class"></a>十一、Class</h4><p>JavaScript是没有类这个概念的，但是我们es6新增加了类。个人感觉和Java有点类似</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;<span class="comment">//这个感觉像是Java中的构造函数，也就是构造器</span></span><br><span class="line">    print()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"打印"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">'张三'</span>，<span class="number">10</span>)；</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line">person.print();</span><br></pre></td></tr></table></figure></div><h4 id="十二、promise"><a href="#十二、promise" class="headerlink" title="十二、promise"></a>十二、promise</h4><blockquote><p>promise是承诺的意思，它是一种解决异步编程的一种方案，比传统的传统的解决方案（回掉函数和事件）更加的合理，所以我们使用fetch是建立再promise的基础之上。</p></blockquote><h5 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h5><p>promise是一个构造函数，用来生成promise实例，promise 接受一个参数作为函数，这个函数提供了两个参数分别是resolve和reject他们是两个函数，分别由JavaScript引擎提供，用户自己不用部署。then方法提供了两个回调函数，一个是由promise对象的状态变为resolved，另一个是把promise对象的状态变为rejected传出的值作为参数。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve();<span class="comment">//成功之后执行的函数，当然我们还可以携带参数。</span></span><br><span class="line">    reject();<span class="comment">//失败之后执行的函数</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"成功之后执行的结果"</span>)</span><br><span class="line">&#125;,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"失败之后的结果"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h4 id="十三、async-和await"><a href="#十三、async-和await" class="headerlink" title="十三、async 和await"></a>十三、async 和await</h4><p>其实async和await是promise封装的一个语法糖，内部还是用promise实现的，await代表的是异步的操作。其中await必须在async的函数内部。</p><p><strong>基本用法</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"第一步"</span>);</span><br><span class="line">                resolve();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        (<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">await</span> fn();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"第二步"</span>);</span><br><span class="line">        &#125;)();</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>处理await返回值</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    resolve(<span class="string">"你好"</span>);</span><br><span class="line">                &#125;,<span class="number">1000</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        (<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> res1 = <span class="keyword">await</span> fn();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"第一步"</span>+res1);</span><br><span class="line">            <span class="keyword">let</span> res2 = <span class="keyword">await</span> fn();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"第二步"</span>+res2);</span><br><span class="line">        &#125;)();</span><br></pre></td></tr></table></figure></div><p><strong>错误处理</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"开始执行"</span>);</span><br><span class="line">                resolve(<span class="string">"正确执行"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> res = <span class="keyword">await</span> fn();</span><br><span class="line">                <span class="built_in">console</span>.log(res);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Es6（ECMASCRIPT 6）是继ES5的新一代web前端开发的一个标准语法，JavaScript 和 ECMAScript 是什么关系呢？&lt;/p&gt;
&lt;p&gt;我只记得阮一峰老师的ES6标准入门的一句话  &lt;strong&gt;前者是后者的一种实现，后者是前者的一种规范&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、用let定义变量&quot;&gt;&lt;a href=&quot;#一、用let定义变量&quot; class=&quot;headerlink&quot; title=&quot;一、用let定义变量&quot;&gt;&lt;/a&gt;一、用let定义变量&lt;/h4&gt;&lt;p&gt;在es5中我们使用的用var定义变量这样带来的不好的问题有一下几点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用var定义的变量提升&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//运行结果： undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照我们普通的逻辑来说应该是报错的，但是却出现undefined显然不和我们的逻辑。如果是es6显然不会出现这种问题。所以变量在没有申明之前是不可以被使用的，术语称之为 ”暂时性死区“    &lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://powerlrl.gitee.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://powerlrl.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
