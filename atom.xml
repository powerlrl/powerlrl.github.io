<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lrl&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-10T02:01:14.813Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>林仁连</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue2.X</title>
    <link href="http://yoursite.com/2019/02/10/Vue2.X/"/>
    <id>http://yoursite.com/2019/02/10/Vue2.X/</id>
    <published>2019-02-10T01:56:14.205Z</published>
    <updated>2019-02-10T02:01:14.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h3 id="众所周知，现在前端领域最火的三大框架是React、Vue、Angular。其中Vue是最容易上手的。也是最流行的框架之一。相对于其他两个框架而言，vue更加容易。"><a href="#众所周知，现在前端领域最火的三大框架是React、Vue、Angular。其中Vue是最容易上手的。也是最流行的框架之一。相对于其他两个框架而言，vue更加容易。" class="headerlink" title="众所周知，现在前端领域最火的三大框架是React、Vue、Angular。其中Vue是最容易上手的。也是最流行的框架之一。相对于其他两个框架而言，vue更加容易。"></a>众所周知，现在前端领域最火的三大框架是React、Vue、Angular。其中Vue是最容易上手的。也是最流行的框架之一。相对于其他两个框架而言，vue更加容易。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/a&gt;Vue&lt;/h1&gt;&lt;h3 id=&quot;众所周知，现在前端领域最火的三大框架是React、Vue、Angular。其中Vue是最容易上手的。也是最流行的框架之一。
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>ES6简介</title>
    <link href="http://yoursite.com/2019/02/08/es6%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/02/08/es6简介/</id>
    <published>2019-02-08T05:28:33.232Z</published>
    <updated>2019-02-09T14:43:19.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6简介"><a href="#ES6简介" class="headerlink" title="ES6简介"></a>ES6简介</h1><blockquote><p>Es6（ECMASCRIPT 6）是继ES5的新一代web前端开发的一个标准语法，JavaScript 和 ECMAScript 是神马关系呢？</p><p>我只记得阮一峰老师的ES6标准入门的一句话  <strong>前者是后者的一种实现，后者是前者的一种规范</strong></p></blockquote><h4 id="一、用let定义变量"><a href="#一、用let定义变量" class="headerlink" title="一、用let定义变量"></a>一、用let定义变量</h4><p>在es5中我们使用的用var定义变量这样带来的不好的问题有一下几点。</p><ol><li>用var定义的变量提升</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果： undefined</span></span><br><span class="line"><span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p>按照我们普通的逻辑来说应该是报错的，但是却出现undefined显然不和我们的逻辑。如果是es6显然不会出现这种问题。所以变量在没有申明之前是不可以被使用的，术语称之为 ”暂时性死区“    </p><a id="more"></a><ol start="2"><li>用let定义变量不能重复定义</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span> .onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;<span class="comment">//或者let a = 3；const a = 5；都会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用let定义的变量，不能够允许第二次定义。用其他的定义变量的方式也是不行的。</p><ol start="3"><li>块级作用域的引入（{}）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> j = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(j);<span class="comment">//报错。</span></span><br><span class="line">    <span class="built_in">console</span>.log(i);<span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、对象的简洁写法"><a href="#二、对象的简洁写法" class="headerlink" title="二、对象的简洁写法"></a>二、对象的简洁写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"xm"</span>,</span><br><span class="line">age = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name : name;</span><br><span class="line">    age: age;</span><br><span class="line">    sayhello : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"nihao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br><span class="line"><span class="built_in">console</span>.log(obj.sayhello());</span><br></pre></td></tr></table></figure><p>像上面这样的变量名相同的情况下，完全可以另一种写法这种得到的结果是和上面的一样，是不是代码精简很多？上面的obj.name可以替换成obj[“name”]注意双引号不能省略。注意此时的左边name是属性名，如果替换为[name]: “zh”;此时用的正是用let定义的变量name。这是es6的新属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    sayhello()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"nihao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"zh"</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [name]: <span class="string">"cc"</span>;</span><br><span class="line">    [<span class="string">"he"</span>+<span class="string">"llo"</span>]:<span class="string">"hi"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);<span class="comment">//结果为cc用的是上面定义的name变量。</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hello);<span class="comment">//获取结果为hi；</span></span><br></pre></td></tr></table></figure><h4 id="三、rest参数"><a href="#三、rest参数" class="headerlink" title="三、rest参数"></a>三、rest参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b,c,...arr</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(fn.length);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">          &#125;</span><br><span class="line">          fn(<span class="number">2</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="number">34</span>,<span class="number">13</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//运行结果为  3 和 5</span></span><br></pre></td></tr></table></figure><h6 id="why？为什么是3和5呢？这里的rest参数搭配一个变量名使用，参数一个获取函数多余的参数生成一个数组。这里我也不是太清楚，至于arguments则是获取实参的长度。rest参数不能放在其他的位置，只能作为最后一个参数。"><a href="#why？为什么是3和5呢？这里的rest参数搭配一个变量名使用，参数一个获取函数多余的参数生成一个数组。这里我也不是太清楚，至于arguments则是获取实参的长度。rest参数不能放在其他的位置，只能作为最后一个参数。" class="headerlink" title="why？为什么是3和5呢？这里的rest参数搭配一个变量名使用，参数一个获取函数多余的参数生成一个数组。这里我也不是太清楚，至于arguments则是获取实参的长度。rest参数不能放在其他的位置，只能作为最后一个参数。"></a>why？为什么是3和5呢？这里的rest参数搭配一个变量名使用，参数一个获取函数多余的参数生成一个数组。这里我也不是太清楚，至于arguments则是获取实参的长度。rest参数不能放在其他的位置，只能作为最后一个参数。</h6><h4 id="四、函数默认参数值"><a href="#四、函数默认参数值" class="headerlink" title="四、函数默认参数值"></a>四、函数默认参数值</h4><ul><li><p>在es5中我们的写法是这个样子的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cn</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">            a = a || <span class="number">0</span>;</span><br><span class="line">            b = b || <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(a+b);</span><br><span class="line">          &#125;</span><br><span class="line">          cn(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//恩，运行结果是 4</span></span><br></pre></td></tr></table></figure><h5 id="如果没有那两句代码，则运行结果是NaN-那让我们看看在es6中的骚操作吧！"><a href="#如果没有那两句代码，则运行结果是NaN-那让我们看看在es6中的骚操作吧！" class="headerlink" title="如果没有那两句代码，则运行结果是NaN 那让我们看看在es6中的骚操作吧！"></a>如果没有那两句代码，则运行结果是NaN 那让我们看看在es6中的骚操作吧！</h5></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a,b=<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(a+b);</span><br><span class="line">          &#125;</span><br><span class="line">          fn(<span class="number">3</span>);</span><br><span class="line">fn(<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h5 id="没错了，结果是3，帅不帅气竟然可以在括号中直接赋值。是挺神奇的哈！如果传了参数，则会覆盖默认值的。这点要注意下。"><a href="#没错了，结果是3，帅不帅气竟然可以在括号中直接赋值。是挺神奇的哈！如果传了参数，则会覆盖默认值的。这点要注意下。" class="headerlink" title="没错了，结果是3，帅不帅气竟然可以在括号中直接赋值。是挺神奇的哈！如果传了参数，则会覆盖默认值的。这点要注意下。"></a>没错了，结果是3，帅不帅气竟然可以在括号中直接赋值。是挺神奇的哈！如果传了参数，则会覆盖默认值的。这点要注意下。</h5><h3 id="五、箭头函数"><a href="#五、箭头函数" class="headerlink" title="五、箭头函数"></a>五、箭头函数</h3><h4 id="当当当，盼望着盼望着。终于到了箭头函数了，这个可是es6语法中超级重要的部分了哟"><a href="#当当当，盼望着盼望着。终于到了箭头函数了，这个可是es6语法中超级重要的部分了哟" class="headerlink" title="当当当，盼望着盼望着。终于到了箭头函数了，这个可是es6语法中超级重要的部分了哟"></a>当当当，盼望着盼望着。终于到了箭头函数了，这个可是es6语法中超级重要的部分了哟</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(value,key);</span><br><span class="line">          &#125;</span><br><span class="line">       fn(<span class="number">3</span>,<span class="number">4</span>);<span class="comment">//3 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(value,key);</span><br><span class="line">          &#125;</span><br><span class="line">          fn(<span class="number">3</span>,<span class="number">3</span>);  <span class="comment">//3 3</span></span><br></pre></td></tr></table></figure><p>  恩？Excuse me？？还可以这样玩吗？这是针对有两个参数的必须用括号包裹起来，如果没有参数，或者只有一个参数我们还可以这样.</p><p>  <img src="C:\Users\LRY-NB\Desktop\u=2013839739,3971030568&amp;fm=27&amp;gp=0.jpg" alt="u=2013839739,3971030568&amp;fm=27&amp;gp=0"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">()=&gt;&#123;</span><br><span class="line">            statement</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>甚至还可以这样只有一个参数，省略括号    或者返回值是一个表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">value =&gt; &#123;</span><br><span class="line">            statement</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">value =&gt; expression</span><br></pre></td></tr></table></figure><p>如果加入返回值，what? 还可以这样？？？？妈耶真是intresting。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="params">value</span> =&gt;</span> value*<span class="number">2</span>;</span><br><span class="line">          <span class="built_in">console</span>.log(fn(<span class="number">3</span>));   <span class="comment">//6</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>ok,到这里你已经差不多会用箭头函数了吧。是不是语法更加的简洁，emmm 真香！</p><h3 id="箭头函数不会绑定this（以上如果打印this则都会指向Window对象）箭头函数内部没有this！使用的父级作用域的this不能和new一起使用，不能作为构造函数，没有arguments，那怎么办，我们可以使用rest参数。-。以下是摘录摘录。"><a href="#箭头函数不会绑定this（以上如果打印this则都会指向Window对象）箭头函数内部没有this！使用的父级作用域的this不能和new一起使用，不能作为构造函数，没有arguments，那怎么办，我们可以使用rest参数。-。以下是摘录摘录。" class="headerlink" title="箭头函数不会绑定this（以上如果打印this则都会指向Window对象）箭头函数内部没有this！使用的父级作用域的this不能和new一起使用，不能作为构造函数，没有arguments，那怎么办，我们可以使用rest参数。    。以下是摘录摘录。"></a>箭头函数不会绑定this（以上如果打印this则都会指向Window对象）箭头函数内部没有this！使用的父级作用域的this不能和new一起使用，不能作为构造函数，没有arguments，那怎么办，我们可以使用rest参数。    。以下是摘录摘录。</h3><blockquote><p><strong>箭头函数在定义时执行器上下文的this的指向（不具有块级作用域），即会取当前的函数的作用域链上的this，忽略块级作用域中的this</strong></p></blockquote><h4 id="六、解构赋值"><a href="#六、解构赋值" class="headerlink" title="六、解构赋值"></a>六、解构赋值</h4><ul><li>ES5中我们是不是这个样子赋值的,恩，当然还有es6的骚操作废话少说，直接上代码！</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>,b = <span class="number">3</span>,c = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当然二者是等价的。第二种是对应的关系。就像就像模式一样。</span></span><br><span class="line"><span class="keyword">let</span> [a,[b],c] = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]<span class="comment">//emmm当然报错啦，[b]对应的应该是[4];如果改成[4,2]再打印b的话就是4对应对应切记！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:a,<span class="attr">b</span>:b,<span class="attr">c</span>:c&#125; = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">44</span>,<span class="attr">c</span>:<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">        <span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="comment">//我们还可以这个样子写</span></span><br><span class="line"><span class="keyword">let</span> &#123;a,b,c&#125; = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">44</span>,<span class="attr">c</span>:<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印的是哪边的abc呢？</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:w,<span class="attr">b</span>:s,<span class="attr">c</span>:x&#125; = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">44</span>,<span class="attr">c</span>:<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(w);</span><br><span class="line">        <span class="built_in">console</span>.log(s);</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">//二者等价，前面只是属性的名字。</span></span><br></pre></td></tr></table></figure><h3 id="七、扩展运算符"><a href="#七、扩展运算符" class="headerlink" title="七、扩展运算符"></a>七、扩展运算符</h3><p>这里所说的扩展运算符是三个点…，不要小看这三个点。它可是用处大大的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展运算符</span></span><br><span class="line">        <span class="keyword">let</span> newDiv = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br><span class="line">        <span class="comment">//这获取的是一个类数组，我们如何获取它的每一个呢，哎，我们可以这样也就是数组的扩展。</span></span><br><span class="line">        <span class="built_in">console</span>.log([...newDiv]);</span><br><span class="line">        <span class="comment">//或者可以直接</span></span><br><span class="line">        <span class="keyword">let</span> newDiv = [...document.getElementsByTagName(<span class="string">"div"</span>)];</span><br><span class="line">        <span class="comment">//然后我们就可以对其进行操作</span></span><br><span class="line">        newDiv[<span class="number">0</span>].innerHTML = <span class="string">"你好啊，这个世界！"</span>;</span><br><span class="line">        <span class="comment">//对两个数组进行连接操作；</span></span><br><span class="line">        <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">let</span> arr2 = [...arr,<span class="number">34</span>,<span class="number">35</span>,<span class="number">535</span>];</span><br><span class="line">        <span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><h3 id="八、字符串扩展"><a href="#八、字符串扩展" class="headerlink" title="八、字符串扩展"></a>八、字符串扩展</h3><ul><li>includes()查看字符串中是否包含该参数</li><li>startsWith()字符串是否以该参数开头</li><li>endsWith()同理</li><li>repeat（）指定字符串重复多少次</li><li>padStart（参数1，参数2）；参数1必须大于字符串的个数，则用参数2补开头多少个是参数1</li><li>padEnd（）同理</li></ul><h4 id="字符串模板（也是挺main）"><a href="#字符串模板（也是挺main）" class="headerlink" title="字符串模板（也是挺main）"></a>字符串模板（也是挺main）</h4><p>要遵循它的规则，反引号和${}它会解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5中我们是这个样子的</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"木木"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我的名字叫"</span>+name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//再es6中</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"二人"</span>；</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`我的名字是<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二者等价</span></span><br></pre></td></tr></table></figure><p><strong>当然还有标签模板</strong>，这个啊，我可能要不是太了解，只知道它会把反引号解析成函数的单引号，从而生成一个数组。像这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name =<span class="string">"nn"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">13</span>；</span><br><span class="line"><span class="built_in">console</span>.log<span class="string">`我的名字<span class="subst">$&#123;name&#125;</span>我今年<span class="subst">$&#123;age&#125;</span>岁`</span></span><br><span class="line"><span class="comment">//结果是生成了一个数组</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>)</span><br><span class="line"><span class="number">0</span>: <span class="string">"我的名字"</span></span><br><span class="line"><span class="number">1</span>: <span class="string">"我今年"</span></span><br><span class="line"><span class="number">2</span>: <span class="string">"岁"</span></span><br><span class="line">length: <span class="number">3</span></span><br><span class="line"><span class="string">"nn"</span><span class="number">13</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES6简介&quot;&gt;&lt;a href=&quot;#ES6简介&quot; class=&quot;headerlink&quot; title=&quot;ES6简介&quot;&gt;&lt;/a&gt;ES6简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Es6（ECMASCRIPT 6）是继ES5的新一代web前端开发的一个标准语法，JavaScript 和 ECMAScript 是神马关系呢？&lt;/p&gt;
&lt;p&gt;我只记得阮一峰老师的ES6标准入门的一句话  &lt;strong&gt;前者是后者的一种实现，后者是前者的一种规范&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、用let定义变量&quot;&gt;&lt;a href=&quot;#一、用let定义变量&quot; class=&quot;headerlink&quot; title=&quot;一、用let定义变量&quot;&gt;&lt;/a&gt;一、用let定义变量&lt;/h4&gt;&lt;p&gt;在es5中我们使用的用var定义变量这样带来的不好的问题有一下几点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用var定义的变量提升&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//运行结果： undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照我们普通的逻辑来说应该是报错的，但是却出现undefined显然不和我们的逻辑。如果是es6显然不会出现这种问题。所以变量在没有申明之前是不可以被使用的，术语称之为 ”暂时性死区“    &lt;/p&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法简介</title>
    <link href="http://yoursite.com/2019/01/23/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%EF%BC%88Typora%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/23/markdown基本语法总结（Typora）/</id>
    <published>2019-01-23T06:15:13.357Z</published>
    <updated>2019-02-10T01:53:54.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对文字的特殊标注"><a href="#对文字的特殊标注" class="headerlink" title="对文字的特殊标注"></a>对文字的特殊标注</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><h4 id="1-6级标题（-）注意-号后面有空格"><a href="#1-6级标题（-）注意-号后面有空格" class="headerlink" title="1-6级标题（#-######）注意#号后面有空格"></a>1-6级标题（#-######）注意#号后面有空格</h4><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>可以使用超文本标记语言中的<u></u>标签或者（ctrl“+u即可产生下划线</p><h3 id="强调使用前后各2个星号"><a href="#强调使用前后各2个星号" class="headerlink" title="强调使用前后各2个星号"></a>强调使用前后各2个星号</h3><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>前后各一个星号</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><del>sdfkjs</del></p><p>前后加两个波浪线（必须时英文输入法下哟）</p><h3 id="方框"><a href="#方框" class="headerlink" title="方框"></a>方框</h3><p>//同上时英文输入法下一旁点的点号</p><p><code>框起来</code></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>今天天气很好啊 <a href="我是注释的内容啊！鼠标滑过即可看见">^s</a></p><p>注意我是中括号哟！然后加上^和后面我的注释名字，然后再下面重新一下其后跟上冒号，即可注释后面的文字了。</p><h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><p>高亮内容部分前后加入两等于号即可</p><p>==我是高亮部分==</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>ctrl+T即可快速打开创建表格的对话框。</p><table><thead><tr><th style="text-align:center">水果</th><th style="text-align:center">肉类</th><th style="text-align:center">饭</th></tr></thead><tbody><tr><td style="text-align:center">橙子</td><td style="text-align:center">猪肉</td><td style="text-align:center">米饭</td></tr><tr><td style="text-align:center">西瓜</td><td style="text-align:center">牛肉</td><td style="text-align:center">稀饭</td></tr><tr><td style="text-align:center">柚子</td><td style="text-align:center">狗肉</td><td style="text-align:center">馒头</td></tr><tr><td style="text-align:center">我是ctrl+enter产生出来的行</td><td style="text-align:center"></td></tr></tbody></table><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>输入三个以上的星号或者输入四个以上的减号我就会变成分割线啦</p><hr><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>把图片拖进来就可以啦</p><p><img src="C:\Users\LRY-NB\Desktop\QQ.png" alt="QQ"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>前面写你的链接名称（）小括号里面写你的链接地址</p><p>百度一下(<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a>)</p><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="number">23</span>);</span><br><span class="line">a.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"我是一个a"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">int a,int b</span>)</span>&#123;</span><br><span class="line">    alert(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>我是大于号打出来的</p><blockquote><p>我又打了一个大于号，嘻嘻！（以此类推）引用的嵌套。</p></blockquote></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>格式：1.空格即可</p><ol><li>神奇宝贝</li><li>神奇动物</li><li>我是一个小仙女</li><li>我可是要喝露水长大的</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>格式：+/-/*其后是空格都是无序列表的开头</p><ul><li>好好学习</li><li>身体健康<ul><li>按tab键即可得到我（二级列表）同理依次类推。<ul><li>看吧，没骗你吧。</li></ul></li></ul></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>中口号里面加上toc</p><p>[TOC]</p><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>[^]: </p><p><a href="我是注释的内容啊！鼠标滑过即可看见">^s</a>: </p><h2 id="头部标题"><a href="#头部标题" class="headerlink" title="头部标题"></a>头部标题</h2><p>三个横杠（—）</p><hr><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对文字的特殊标注&quot;&gt;&lt;a href=&quot;#对文字的特殊标注&quot; class=&quot;headerlink&quot; title=&quot;对文字的特殊标注&quot;&gt;&lt;/a&gt;对文字的特殊标注&lt;/h2&gt;&lt;h3 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Markdown" scheme="http://yoursite.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>HTML总结</title>
    <link href="http://yoursite.com/2019/01/22/HTML%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/01/22/HTML总结/</id>
    <published>2019-01-22T11:57:52.465Z</published>
    <updated>2019-02-09T03:03:38.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML总结（ps拖了很久的总结会继续更新-）"><a href="#HTML总结（ps拖了很久的总结会继续更新-）" class="headerlink" title="HTML总结（ps拖了很久的总结会继续更新~）"></a>HTML总结（ps拖了很久的总结会继续更新~）</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ul><li>HTML简介 </li></ul><blockquote><p>html又可称之为超文本标记语言（Http text mark language）是网络上应用最广泛的语言。最新的版本已经到了h5 HTML5又增加了许多新特性不如canvas svg 等等标签，整个前端可以分为HTML CSS JS 其中html是骨架部分，css是外形，而js是行为和方法。我们把html编写出来，拿到浏览器中去渲染。常用的浏览器有Google friefix IE     </p></blockquote><ul><li>HTML标签<br> html的标签有双标签和单标签，例如h1标签就是双标签，input这类标签就是单标签便签是具有属性的。虽然html不区分大小写，但是我们推荐标签使用小写形式。</li><li>HTML的基本结构</li></ul><p><img src="https://i.imgur.com/dPaeqei.png" alt=""></p><a id="more"></a><p>在上面的例子中，第一个标签<html>是告诉浏览器这是html文档的开始。Html文档的最后一个标签是</html>，是告诉浏览器这是html的终止。标签undefinedundefinedundefined<head></head>之间的文本是头部信息，在<title></title>之间的文本是文档标题，会显示在浏览器的窗口的标题栏。<body></body>之间的文本是正文。</p><ul><li>链接和锚点</li></ul><p>1、URL同一资源定位符,万维网的每一个文件都有一个URL</p><p>2、a标签属性：  href的值是URL、target新网页从哪个窗口打开（_self/_blank）、title 提示、download下载（H5新增）</p><p>3、锚点<a name="锚点的名字"></a>、使用超链接#跳到指定位置</p><ul><li><p>行内与块级标签    </p><p>  行内标签与块级标签可以互相转换。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML总结（ps拖了很久的总结会继续更新-）&quot;&gt;&lt;a href=&quot;#HTML总结（ps拖了很久的总结会继续更新-）&quot; class=&quot;headerlink&quot; title=&quot;HTML总结（ps拖了很久的总结会继续更新~）&quot;&gt;&lt;/a&gt;HTML总结（ps拖了很久的总结会继续更新~）&lt;/h1&gt;&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HTML简介 &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;html又可称之为超文本标记语言（Http text mark language）是网络上应用最广泛的语言。最新的版本已经到了h5 HTML5又增加了许多新特性不如canvas svg 等等标签，整个前端可以分为HTML CSS JS 其中html是骨架部分，css是外形，而js是行为和方法。我们把html编写出来，拿到浏览器中去渲染。常用的浏览器有Google friefix IE     &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;HTML标签&lt;br&gt; html的标签有双标签和单标签，例如h1标签就是双标签，input这类标签就是单标签便签是具有属性的。虽然html不区分大小写，但是我们推荐标签使用小写形式。&lt;/li&gt;
&lt;li&gt;HTML的基本结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/dPaeqei.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>jquery总结</title>
    <link href="http://yoursite.com/2018/11/29/jquery%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/11/29/jquery总结/</id>
    <published>2018-11-29T13:59:48.000Z</published>
    <updated>2019-02-09T03:03:52.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h1><p>总体来说总结一下jquery</p><h1 id="二、正文"><a href="#二、正文" class="headerlink" title="二、正文"></a>二、正文</h1><blockquote><p>学习了大约一个多月的jQuery,我发现jQuery的特性就是用更小的代码，实现很强大的功能，就像它的那句话，The Write Less, Do More。</p></blockquote><h6 id="一、首先是它的入口函数就有三种，"><a href="#一、首先是它的入口函数就有三种，" class="headerlink" title="一、首先是它的入口函数就有三种，"></a>一、首先是它的入口函数就有三种，</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"入口函数1"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"入口函数2"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line">jquery.(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"入口函数3"</span>)；</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="二、而且还有多种方法"><a href="#二、而且还有多种方法" class="headerlink" title="二、而且还有多种方法"></a>二、而且还有多种方法</h5><ol><li>列如animate（）这个方法是可以做动画效果。个人非常喜欢</li><li>sibling()除了自身的兄弟节点</li><li>preall()自己前面的兄弟节点，</li><li>与之对应的nextall（）,后继所有兄弟节点。而</li><li>且jquery操作样式也是非常的方便。就像css的属性，可以传入一个对象。js不可以调用jquery对象，但是jquery可以调用js对象。这一点是要注意的。而且jQuery对事件的处理也是非常好，jQuery可以处理委托事件。重点重点（敲黑板！）jQuery不用担心兼容性问题。</li></ol><h1 id="三、结尾"><a href="#三、结尾" class="headerlink" title="三、结尾"></a>三、结尾</h1><p>实在记不得方法，可以去查看手册。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、绪论&quot;&gt;&lt;a href=&quot;#一、绪论&quot; class=&quot;headerlink&quot; title=&quot;一、绪论&quot;&gt;&lt;/a&gt;一、绪论&lt;/h1&gt;&lt;p&gt;总体来说总结一下jquery&lt;/p&gt;
&lt;h1 id=&quot;二、正文&quot;&gt;&lt;a href=&quot;#二、正文&quot; class=&quot;headerlink&quot; title=&quot;二、正文&quot;&gt;&lt;/a&gt;二、正文&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;学习了大约一个多月的jQuery,我发现jQuery的特性就是用更小的代码，实现很强大的功能，就像它的那句话，The Write Less, Do More。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;一、首先是它的入口函数就有三种，&quot;&gt;&lt;a href=&quot;#一、首先是它的入口函数就有三种，&quot; class=&quot;headerlink&quot; title=&quot;一、首先是它的入口函数就有三种，&quot;&gt;&lt;/a&gt;一、首先是它的入口函数就有三种，&lt;/h6&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第一种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;入口函数1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第二种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;).ready(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;入口函数2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第三种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jquery.(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;入口函数3&quot;&lt;/span&gt;)；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="分类别" scheme="http://yoursite.com/categories/%E5%88%86%E7%B1%BB%E5%88%AB/"/>
    
    
      <category term="关于某方面的标签" scheme="http://yoursite.com/tags/%E5%85%B3%E4%BA%8E%E6%9F%90%E6%96%B9%E9%9D%A2%E7%9A%84%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>js篇</title>
    <link href="http://yoursite.com/2018/08/04/js%E7%AF%87/"/>
    <id>http://yoursite.com/2018/08/04/js篇/</id>
    <published>2018-08-04T12:57:40.000Z</published>
    <updated>2019-02-09T14:15:04.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-JavaScript（小小的简介一下）"><a href="#JS-JavaScript（小小的简介一下）" class="headerlink" title="JS   JavaScript（小小的简介一下）"></a>JS   JavaScript（小小的简介一下）</h2><blockquote><p>js代码用标签包裹起来，js代码可以放在行内，body的后面，或者body之前，外部，但是通常我们会将js代码放在title的标签之下，但是如果这样的话，浏览器会先加载js代码，而不会先加载html的部分。由此，我们可以用window.onload = function(){js..代码}这种写法，但请不要忘记script标签。</p></blockquote><h6 id="一、attributes-属性"><a href="#一、attributes-属性" class="headerlink" title="一、attributes 属性"></a>一、attributes 属性</h6><p>该属性是获取标签中的属性，列如class，id，和href之类的属性，如果一个标签中包含多个属性则使用attributes[num]获取的是第几个属性。该属性还可以有length和value属性。</p><h6 id="二、cookie属性"><a href="#二、cookie属性" class="headerlink" title="二、cookie属性"></a>二、cookie属性</h6><p>是浏览器存储信息的东西document.cookie().</p><a id="more"></a><h3 id="一、面向对象"><a href="#一、面向对象" class="headerlink" title="一、面向对象"></a>一、面向对象</h3><p>面向对象的三大特性：继承，封装，多态。现在我要求我们要创建3个对象,但是我们看到是不是都有shoool属性，而且这些个属性还不带变的，所以我们由此引出来原型的概念。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xx = &#123;</span><br><span class="line">    name: <span class="string">'xx'</span>,</span><br><span class="line">    age: <span class="number">13</span>,</span><br><span class="line">    shool: <span class="string">"hn"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> cc = &#123;</span><br><span class="line">    name: <span class="string">'cc'</span>,</span><br><span class="line">    age: <span class="number">14</span>,</span><br><span class="line">    shool: <span class="string">"hn"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> ww = &#123;</span><br><span class="line">    name: <span class="string">'ww'</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    shool: <span class="string">"hn"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//ok,下面我们用到面向对象的一种特性，封装。是不是简洁清晰。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.name = name;</span><br><span class="line">          <span class="keyword">this</span>.age = age;</span><br><span class="line">      <span class="keyword">this</span>.shool = <span class="string">"hn"</span>;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> ww = <span class="keyword">new</span> Person(<span class="string">"ww"</span>,<span class="number">13</span>);</span><br><span class="line">        <span class="keyword">let</span> cc = <span class="keyword">new</span> Person(<span class="string">"cc"</span>,<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line">四、JS原型</span><br></pre></td></tr></table></figure><h3 id="二、JS原型"><a href="#二、JS原型" class="headerlink" title="二、JS原型"></a>二、JS原型</h3><h5 id="首先我们看一个例子："><a href="#首先我们看一个例子：" class="headerlink" title="首先我们看一个例子："></a>首先我们看一个例子：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age,name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.eat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是构造函数中吃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> (<span class="number">13</span>,<span class="string">"小红"</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> (<span class="number">15</span>,<span class="string">"小明"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1 == p2);<span class="comment">//结果会是什么呢？  false</span></span><br></pre></td></tr></table></figure><p>为什么会是false呢？不都是构造函数中的方法嘛，因为实例化对象不同，所以调用的方法也不同，有一百个对象，那么就要调用一百次这个方法，那么这不浪费内存空间嘛，由此引出————原型（prototype）函数都有原型，不是只有构造函数才有原型。</p><h5 id="原型的作用：数据共享，节省内存空间。"><a href="#原型的作用：数据共享，节省内存空间。" class="headerlink" title="原型的作用：数据共享，节省内存空间。"></a>原型的作用：数据共享，节省内存空间。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age,name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向原型中添加方法</span></span><br><span class="line">Person.prototype.eat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是原型中的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> (<span class="number">13</span>,<span class="string">"小红"</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> (<span class="number">15</span>,<span class="string">"小明"</span>);</span><br><span class="line">p1.eat();</span><br><span class="line">p2.eat();<span class="comment">//这样我们就调用的是同一个方法了。</span></span><br></pre></td></tr></table></figure><h4 id="原型链（最终结果：Object-Prototype）"><a href="#原型链（最终结果：Object-Prototype）" class="headerlink" title="原型链（最终结果：Object.Prototype）"></a>原型链（最终结果：Object.Prototype）</h4><p>首先我们实例化对象的时候，如果构造函数中没有对应的方法或者属性，那么我们就要到原型中去寻找。如过没有找到，就会报错，如果在构造函数中找到，则输出相应的结果。自身=&gt;构造函数中的原型=&gt;原型中构造函数中的原型</p><p><img src="C:\Users\LRY-NB\Desktop\QQ图片20190209175749.png" alt="QQ图片20190209175749"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="number">34</span>;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="number">450</span>;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p1.name);<span class="comment">//是34没错了</span></span><br></pre></td></tr></table></figure><h3 id="三、JS-dom-操作"><a href="#三、JS-dom-操作" class="headerlink" title="三、JS dom 操作"></a>三、JS dom 操作</h3><p>众说周知JS其实可以分为两个大块，dom和bom部分，今天我们就来说说dom部分。document代表的是整个文档。</p><h5 id="1-dom选择器"><a href="#1-dom选择器" class="headerlink" title="1. dom选择器"></a>1. dom选择器</h5><ol><li>document.getElementById();//在开发过程中我们并不太常使用这种方法来获取id属性</li><li>document.getElementsByClassName()[]//类数组获取样式</li><li>document.getElementsByTagName()[]//获取标签名类似一个数组，但不是一个数组，简单来说是类数组</li><li>document.getElementByName()获取某些具有name属性的标签</li><li>document.querySelectorAll()获取css选择器，有缺点，包括ie7和一下都没有</li><li>document.querySelector()css选择器，同上。</li></ol><h5 id="2-dom节点类型"><a href="#2-dom节点类型" class="headerlink" title="2. dom节点类型"></a>2. dom节点类型</h5><ul><li><p>parentNode-&gt;父节点<strong>（body-&gt;html-&gt;document-&gt;null）</strong></p></li><li><p>childNodes-&gt;子节点们</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;section&gt;&lt;/section&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">      window.onload = function()&#123;</span></span><br><span class="line"><span class="regexp">        var odiv = document.getElementsByTagName("div")[0];</span></span><br><span class="line"><span class="regexp">        console.log(odiv.childNodes.length);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line"><span class="comment">//猜猜结果是什么？ 是7为什么呢？因为里面包含了文本节点，不可能是3的哟。</span></span><br></pre></td></tr></table></figure></li><li><p>lastChild-&gt;最后一个子节点</p></li><li><p>fristChild-&gt;第一个子节点（这两个取决你是否换行，如果有则是文本节点）</p></li><li><p>nextSibling-&gt;后一个兄弟节点</p></li><li><p>previousSibling-&gt;前一个兄弟节点</p></li></ul><h5 id="3-基于元素节点树的遍历"><a href="#3-基于元素节点树的遍历" class="headerlink" title="3. 基于元素节点树的遍历"></a>3. 基于元素节点树的遍历</h5><p>parentElement-&gt;父元素节点</p><p>children-&gt;当前元素子节点</p><p>fristElement-&gt;第一个元素节点</p><p>lastElement-&gt;最后一个元素节点（IE不兼容同上）</p><p>nextElementSibling/preElementSibling-&gt;后一个/前一个兄弟节点</p><h5 id="4-节点的四个属性"><a href="#4-节点的四个属性" class="headerlink" title="4. 节点的四个属性"></a>4. 节点的四个属性</h5><ol><li>nodeName-&gt;元素的标签名</li><li>nodeValue-&gt;text节点或Comment节点的文本内容，可读写</li><li>nodeType 该节点的类型<ul><li>元素节点——-1</li><li>属性节点——–2</li><li>文本节点———–3</li><li>注释节点————-8</li><li>document———-9</li><li>DocumentFragment—-11</li></ul></li><li>Attributes  该节点的属性集合</li></ol><h5 id="5-节点的增删改查"><a href="#5-节点的增删改查" class="headerlink" title="5. 节点的增删改查"></a>5. 节点的增删改查</h5><ol><li>创建节点———–&gt;createElement(“节点名称”);</li><li>创建文本节点————&gt;createTextNode(“节点名称”)</li><li>删除节点—————&gt; removeChild(“节点名称”)；</li><li>增加节点—————-&gt;appendChild(“节点名称”)往后追加节点<ul><li>insertBefore(节点1，节点2)    //追加节点2 在节点1的前面</li><li>insertAfter（）同上。</li></ul></li></ol><h3 id="四、JS-正则部分"><a href="#四、JS-正则部分" class="headerlink" title="四、JS 正则部分"></a>四、JS 正则部分</h3><h4 id="js中的正则又很多种方法不过常用的还是"><a href="#js中的正则又很多种方法不过常用的还是" class="headerlink" title="js中的正则又很多种方法不过常用的还是"></a>js中的正则又很多种方法不过常用的还是</h4><p>test（），search() ,repleace()    act..</p><h5 id="1-正则表达式模式"><a href="#1-正则表达式模式" class="headerlink" title="1. 正则表达式模式"></a>1. 正则表达式模式</h5><table><thead><tr><th style="text-align:center">^</th><th>//g</th><th>{4，11}</th><th>/d</th><th>/w</th><th>(任意值/)</th></tr></thead><tbody><tr><td style="text-align:center">开始符号</td><td>类是与全局</td><td>最少是4次，最多为11次数字相当于区间</td><td>全为数字</td><td>全为字母，数字，下划线</td><td>任意一个值</td></tr><tr><td style="text-align:center">$</td><td>[1-9]</td><td>{4，}最少为4次</td><td>/D</td><td>/W</td><td>n+,n*,n?</td></tr><tr><td style="text-align:center">结束符号</td><td>出现1-9中的任何一个数字</td><td>{，11}最多为11次</td><td>非数字</td><td>非数字，字母，数字，下划线</td><td>(至少一个)(至少0个或多个)（0个或多个）</td></tr></tbody></table><h5 id="2-使用RegExp对象"><a href="#2-使用RegExp对象" class="headerlink" title="2. 使用RegExp对象"></a>2. 使用RegExp对象</h5><blockquote><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p></blockquote><blockquote><p>使用 test()</p><p>test() 方法是一个正则表达式方法。</p><p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p><p>以下实例用于搜索字符串中的字符 “e”：</p></blockquote><p>两种定义方式，如果不引入变量则使用最多的还是第一种方式，如果字符串中包含\则需要使用转义字符/\即可~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/e/g</span>;</span><br><span class="line">patt.test(<span class="string">"this is best"</span>);<span class="comment">//test的方法返回值是Boolean型如果查找对则返回true否则反之。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//要引入变量的话</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(x);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test());</span><br></pre></td></tr></table></figure><h5 id="3-举个例子（验证QQ号）"><a href="#3-举个例子（验证QQ号）" class="headerlink" title="3. 举个例子（验证QQ号）"></a>3. 举个例子（验证QQ号）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> input_qq = <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>);</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> input_value = input_qq.value;</span><br><span class="line">        <span class="keyword">var</span> reg = <span class="regexp">/^[1-9][0-9]&#123;4,11&#125;$/g</span>;</span><br><span class="line">        <span class="keyword">var</span> result = reg.test(input_value);</span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            alert(<span class="string">"正确的qq号"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">"qq号不对哦"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS-JavaScript（小小的简介一下）&quot;&gt;&lt;a href=&quot;#JS-JavaScript（小小的简介一下）&quot; class=&quot;headerlink&quot; title=&quot;JS   JavaScript（小小的简介一下）&quot;&gt;&lt;/a&gt;JS   JavaScript（小小的简介一下）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;js代码用标签包裹起来，js代码可以放在行内，body的后面，或者body之前，外部，但是通常我们会将js代码放在title的标签之下，但是如果这样的话，浏览器会先加载js代码，而不会先加载html的部分。由此，我们可以用window.onload = function(){js..代码}这种写法，但请不要忘记script标签。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;一、attributes-属性&quot;&gt;&lt;a href=&quot;#一、attributes-属性&quot; class=&quot;headerlink&quot; title=&quot;一、attributes 属性&quot;&gt;&lt;/a&gt;一、attributes 属性&lt;/h6&gt;&lt;p&gt;该属性是获取标签中的属性，列如class，id，和href之类的属性，如果一个标签中包含多个属性则使用attributes[num]获取的是第几个属性。该属性还可以有length和value属性。&lt;/p&gt;
&lt;h6 id=&quot;二、cookie属性&quot;&gt;&lt;a href=&quot;#二、cookie属性&quot; class=&quot;headerlink&quot; title=&quot;二、cookie属性&quot;&gt;&lt;/a&gt;二、cookie属性&lt;/h6&gt;&lt;p&gt;是浏览器存储信息的东西document.cookie().&lt;/p&gt;
    
    </summary>
    
      <category term="分类别" scheme="http://yoursite.com/categories/%E5%88%86%E7%B1%BB%E5%88%AB/"/>
    
    
      <category term="关于某方面的标签" scheme="http://yoursite.com/tags/%E5%85%B3%E4%BA%8E%E6%9F%90%E6%96%B9%E9%9D%A2%E7%9A%84%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>纪念博客搭载完成</title>
    <link href="http://yoursite.com/2018/07/26/%E7%BA%AA%E5%BF%B5%E5%8D%9A%E5%AE%A2%E6%90%AD%E8%BD%BD%E5%AE%8C%E6%88%90/"/>
    <id>http://yoursite.com/2018/07/26/纪念博客搭载完成/</id>
    <published>2018-07-26T11:19:39.000Z</published>
    <updated>2018-07-27T00:45:47.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、工具"><a href="#一、工具" class="headerlink" title="一、工具"></a>一、工具</h1><p>博客是利用github+hexo搭建而成。<br>首先你想的pc里面要有git，其次你还要下载nodeJS（非常强大的一款软件，适合前端同学学习！）</p><h1 id="二、发展"><a href="#二、发展" class="headerlink" title="二、发展"></a>二、发展</h1><p>搭建博客路遇到非常多的坑，期间有想过放弃。<br>只要功夫深，铁锤磨成针。一开始照着网上的教程勉勉强强的只能在本地运行。并不能部署到GitHub上感到非常的烦躁，就放在了那里。最后经过同学的指点，一步一步搭载出今天的博客，详情请参照<a href="https://limjk.tech/2018/07/25/Hexo%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">博客链接</a>很不错的一篇博客，强烈推荐。</p><h1 id="三、致谢"><a href="#三、致谢" class="headerlink" title="三、致谢"></a>三、致谢</h1><p>感谢百度+阿里云+GitHub+hexo+git+nodeJS+同学技术支持。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、工具&quot;&gt;&lt;a href=&quot;#一、工具&quot; class=&quot;headerlink&quot; title=&quot;一、工具&quot;&gt;&lt;/a&gt;一、工具&lt;/h1&gt;&lt;p&gt;博客是利用github+hexo搭建而成。&lt;br&gt;首先你想的pc里面要有git，其次你还要下载nodeJS（非常强大的一款软件，适合前端同学学习！）&lt;/p&gt;
&lt;h1 id=&quot;二、发展&quot;&gt;&lt;a href=&quot;#二、发展&quot; class=&quot;headerlink&quot; title=&quot;二、发展&quot;&gt;&lt;/a&gt;二、发展&lt;/h1&gt;&lt;p&gt;搭建博客路遇到非常多的坑，期间有想过放弃。&lt;br&gt;只要功夫深，铁锤磨成针。一开始照着网上的教程勉勉强强的只能在本地运行。并不能部署到GitHub上感到非常的烦躁，就放在了那里。最后经过同学的指点，一步一步搭载出今天的博客，详情请参照&lt;a href=&quot;https://limjk.tech/2018/07/25/Hexo%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/
&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客链接&lt;/a&gt;很不错的一篇博客，强烈推荐。&lt;/p&gt;
&lt;h1 id=&quot;三、致谢&quot;&gt;&lt;a href=&quot;#三、致谢&quot; class=&quot;headerlink&quot; title=&quot;三、致谢&quot;&gt;&lt;/a&gt;三、致谢&lt;/h1&gt;&lt;p&gt;感谢百度+阿里云+GitHub+hexo+git+nodeJS+同学技术支持。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="博客搭载过程" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
</feed>
