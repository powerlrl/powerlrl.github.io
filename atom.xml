<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinYo.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-15T05:07:38.623Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LinYo.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dart</title>
    <link href="http://yoursite.com/2019/08/15/%E5%90%8E%E7%AB%AF%E7%B1%BB/dart/"/>
    <id>http://yoursite.com/2019/08/15/后端类/dart/</id>
    <published>2019-08-15T05:04:10.326Z</published>
    <updated>2019-08-15T05:07:38.623Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Dart是谷歌开发的计算机编程语言，后来被<a href="https://baike.baidu.com/item/Ecma" target="_blank" rel="noopener">Ecma</a> (ECMA-408)认定为标准 [1]  。它被用于web、服务器、移动应用 [2]  和物联网等领域的开发。它是宽松开源许可证（修改的BSD证书）下的开源软件。</p><p>Dart是面向对象的、类定义的、单继承的语言。它的语法类似C语言，可以转译为JavaScript，支持接口(interfaces)、混入(mixins)、抽象类(abstract classes)、具体化泛型(reified generics)、可选类型(optional typing)和sound type system</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><code>number、String、double、blooean、map、list</code>基本语法和c类似但是也有不同</p><ul><li>可以用var定义变量</li><li>可以用$变量名（其他类型），用于和字符串相加，也可以toString（）</li><li>不同类型的不可以相加</li><li>同样支持三目运算，分支结构</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果name为null，则替换成？？相应右边的字符串。为其他则不行。</span></span><br><span class="line"> <span class="built_in">String</span> name = <span class="keyword">null</span>;</span><br><span class="line"> <span class="built_in">String</span> nameToPrint = name ?? <span class="string">"319986895@qq.com"</span>;</span><br><span class="line"> <span class="built_in">print</span>(nameToPrint);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="循环列表和关键字"><a href="#循环列表和关键字" class="headerlink" title="循环列表和关键字"></a>循环列表和关键字</h3><p>使用<code>List</code>定义一个数组，可以用for in，for，do while，while来循环获取数组中的值。当然也可是使用，break，loop，continue等关键字来停止，和跳出循环。当然dart提出了一个可以停止指定循环的。</p><blockquote><p>对循环命名，如果要停止或跳出某个循环，则break/continue 循环名。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">outerloop:</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">    innerloop:</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i==<span class="number">1</span> &amp;&amp; j==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span> outerloop;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"$i $j"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>和其他强类型的语言一样，都是，函数数据类型，函数名，参数，返回值。</p><p>箭头函数有返回值和无返回值</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> sumValue(<span class="built_in">int</span> a,<span class="built_in">int</span> b) =&gt; <span class="built_in">print</span>(<span class="string">"<span class="subst">$&#123;a+b&#125;</span>"</span>);</span><br><span class="line">去除<span class="built_in">print</span></span><br><span class="line">sumValue(<span class="number">3</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Dart是谷歌开发的计算机编程语言，后来被&lt;a href=&quot;https://baike.baidu.com/item/Ecma&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ecma&lt;/a&gt; (ECMA-408)认定为标准 [1]  。它被用于web、服务器、移动应用 [2]  和物联网等领域的开发。它是宽松开源许可证（修改的BSD证书）下的开源软件。&lt;/p&gt;
&lt;p&gt;Dart是面向对象的、类定义的、单继承的语言。它的语法类似C语言，可以转译为JavaScript，支持接口(interfaces)、混入(mixins)、抽象类(abstract classes)、具体化泛型(reified generics)、可选类型(optional typing)和sound type system&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;p&gt;&lt;code&gt;number、String、double、blooean、map、list&lt;/code&gt;基本语法和c类似但是也有不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以用var定义变量&lt;/li&gt;
&lt;li&gt;可以用$变量名（其他类型），用于和字符串相加，也可以toString（）&lt;/li&gt;
&lt;li&gt;不同类型的不可以相加&lt;/li&gt;
&lt;li&gt;同样支持三目运算，分支结构&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果name为null，则替换成？？相应右边的字符串。为其他则不行。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; name = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; nameToPrint = name ?? &lt;span class=&quot;string&quot;&gt;&quot;319986895@qq.com&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(nameToPrint);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>liunx</title>
    <link href="http://yoursite.com/2019/08/15/%E5%90%8E%E7%AB%AF%E7%B1%BB/linux/"/>
    <id>http://yoursite.com/2019/08/15/后端类/linux/</id>
    <published>2019-08-15T05:03:25.071Z</published>
    <updated>2019-08-15T05:08:03.996Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h4><p>关机：<strong>shutdown -h now（正常关机）、init 0、halt（关闭内存）</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h4&gt;&lt;p&gt;关机：&lt;strong&gt;shutdown -h now（正常关机）、init 0、ha
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>react</title>
    <link href="http://yoursite.com/2019/08/15/%E5%BA%93%E5%92%8C%E6%A1%86%E6%9E%B6%E7%B1%BB/react/"/>
    <id>http://yoursite.com/2019/08/15/库和框架类/react/</id>
    <published>2019-08-15T05:03:08.233Z</published>
    <updated>2019-08-15T05:03:59.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><blockquote><p>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。</p></blockquote><p>一开始是想自己配置webpack来运行react，但是发现好像没配置好，所以决定先学习其脚手架，react-app</p><h4 id="react-app（搭建脚手架）"><a href="#react-app（搭建脚手架）" class="headerlink" title="react-app（搭建脚手架）"></a>react-app（搭建脚手架）</h4><ul><li>全局安装 react的脚手架create-react-app -g</li><li>create-react-app 项目名</li><li>npm start</li></ul><p>可以在app.js中return中编写相应的jsx语法。</p><a id="more"></a><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">     &lt;h1&gt;hello world&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">     &lt;p&gt;hi react&lt;/</span>p&gt;</span><br><span class="line">     &lt;Person name=<span class="string">"yo"</span> count=<span class="string">"30"</span>/&gt;</span><br><span class="line">     &lt;Person name=<span class="string">"w"</span> count=<span class="string">"10"</span> /&gt;</span><br><span class="line">     &lt;Person name=<span class="string">"m"</span> count=<span class="string">"10"</span>&gt;非常感谢大家对我的支持！&lt;<span class="regexp">/Person&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>person.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;//因为是jsx语法所以要引入react</span><br><span class="line"></span><br><span class="line">const Person = (props) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;大家好我是&#123;props.name&#125;,我的作品是&#123;props.count&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;&#123;props.children&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Person</span><br></pre></td></tr></table></figure><p><code>利用props（也可以为其他的名字，属性传值）可以传值，props.children可以获取到双标签中的内容。</code></p><h4 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h4><p>该标签类似于vue中的template，主要的作用，是作为一个根标签来使用，但是页面渲染的时候不会渲染出来。</p><h4 id="react中的虚拟dom"><a href="#react中的虚拟dom" class="headerlink" title="react中的虚拟dom"></a>react中的虚拟dom</h4><p><img src="https://i.loli.net/2019/08/09/2ihZKaYTNmIxSfn.png" alt="QQ图片20190809161843.png"></p><h4 id="组件中的生命周期"><a href="#组件中的生命周期" class="headerlink" title="组件中的生命周期"></a>组件中的生命周期</h4><blockquote><p>组件在某一个时刻会自动被执行。</p></blockquote><p><code>当组件的state和props发生改变的时候，render函数会重新执行</code></p><ul><li>componentWillMount是在组件挂载之前被执行，</li><li>render组件挂载</li><li>componentDidMount是在组件挂载之后被执行</li></ul><h4 id="组件中的无状态组件"><a href="#组件中的无状态组件" class="headerlink" title="组件中的无状态组件"></a>组件中的无状态组件</h4><p><code>当一个组件中只有render函数的时候，完全不用类可以用一个函数，return 出要（以前render中return）返回的内容</code></p><p>从性能上来讲，普通组件是赶不上无状态组件的</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;react&quot;&gt;&lt;a href=&quot;#react&quot; class=&quot;headerlink&quot; title=&quot;react&quot;&gt;&lt;/a&gt;react&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一开始是想自己配置webpack来运行react，但是发现好像没配置好，所以决定先学习其脚手架，react-app&lt;/p&gt;
&lt;h4 id=&quot;react-app（搭建脚手架）&quot;&gt;&lt;a href=&quot;#react-app（搭建脚手架）&quot; class=&quot;headerlink&quot; title=&quot;react-app（搭建脚手架）&quot;&gt;&lt;/a&gt;react-app（搭建脚手架）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;全局安装 react的脚手架create-react-app -g&lt;/li&gt;
&lt;li&gt;create-react-app 项目名&lt;/li&gt;
&lt;li&gt;npm start&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以在app.js中return中编写相应的jsx语法。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>天气小程序demo</title>
    <link href="http://yoursite.com/2019/08/02/%E5%AE%9E%E6%88%98%E7%B1%BB/%E5%A4%A9%E6%B0%94%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/08/02/实战类/天气小程序/</id>
    <published>2019-08-02T01:44:14.726Z</published>
    <updated>2019-08-15T05:02:43.117Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日天气小程序"><a href="#今日天气小程序" class="headerlink" title="今日天气小程序"></a>今日天气小程序</h3><blockquote><p>一个简陋的查询天气信息的小程序demo，大约是这样。。</p></blockquote><a id="more"></a><p><img src="https://i.loli.net/2019/07/31/5d4124ba0627126675.png" alt="Snipaste_2019-07-31_13-18-37.png"></p><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>省级联动采用了<code>picker</code>标签，mode为regio就会为省级联动的选择。</p><p>这里的天气接口采用的是极速数据中的天气api，第一次申请只有1000次，已经用掉100次了。</p><p>picker标签中有个bindchange只要value发生改变，就会调用该函数，所以利用这一特性，在该事件中绑定一个函数，只要值发生改变，发出请求，返回的结果相应的天气的数据，利用setData改变相应的数据，来达到页面的及时更新。</p><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><p><strong>JS</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    city: <span class="string">'选择城市'</span>,</span><br><span class="line">    weather: <span class="string">'多云'</span>,</span><br><span class="line">    week: <span class="string">'星期三'</span>,</span><br><span class="line">    temphight: <span class="string">'1'</span>,</span><br><span class="line">    pressure: <span class="string">'0'</span>,</span><br><span class="line">    humidity: <span class="string">'0'</span>,</span><br><span class="line">    winddirect: <span class="string">'东南风'</span>,</span><br><span class="line">    windspeed: <span class="string">'0k/h'</span>,</span><br><span class="line">    windpower: <span class="string">'0级'</span>,</span><br><span class="line">    date: <span class="string">''</span>,</span><br><span class="line">    detail: <span class="string">''</span>,</span><br><span class="line">    imgSrc: <span class="string">'0'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  changeCity: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> result = e.detail.value</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      city: result</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="string">"https://api.jisuapi.com/weather/query?appkey=6543d2444cbc0776&amp;city="</span> + result[<span class="number">2</span>],</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        _this.setData(&#123;</span><br><span class="line">          temphight: res.data.result.temphigh,</span><br><span class="line">          pressure: res.data.result.pressure,</span><br><span class="line">          humidity: res.data.result.humidity,</span><br><span class="line">          winddirect: res.data.result.winddirect,</span><br><span class="line">          windspeed: res.data.result.windspeed,</span><br><span class="line">          windpower: res.data.result.windpower,</span><br><span class="line">          weather: res.data.result.weather,</span><br><span class="line">          week: res.data.result.week,</span><br><span class="line">          date: res.data.result.date,</span><br><span class="line">          detail: res.data.result.index[<span class="number">6</span>].detail,</span><br><span class="line">          imgSrc: res.data.result.img</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>wxml</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 省份选择区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">picker</span> <span class="attr">mode</span>=<span class="string">"region"</span> <span class="attr">class</span>=<span class="string">"city"</span><span class="attr">bindchange</span>=<span class="string">"changeCity"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;city&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 温度显示区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>&#123;&#123;temphight&#125;&#125;&#123;&#123;weather&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;date&#125;&#125;&#123;&#123;week&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 图片显示区 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"imgBox"</span> <span class="attr">src</span>=<span class="string">"../../images/&#123;&#123;imgSrc&#125;&#125;.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 状态显示区 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusBar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>温度<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>气压<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>能见度<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusBar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>&#123;&#123;temphight&#125;&#125;°C<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>&#123;&#123;pressure&#125;&#125;hpa<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>&#123;&#123;humidity&#125;&#125;km<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusBar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>风向<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>风速<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>风力<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusBar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>&#123;&#123;winddirect&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>&#123;&#123;windspeed&#125;&#125;k/h<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"statusItem"</span>&gt;</span>&#123;&#123;windpower&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 穿衣指数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"detailBar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>穿衣建议：&#123;&#123;detail&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>wxss</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.city</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3a5d96</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgBox</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.statusBox</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.statusBar</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10</span>rpx <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.statusItem</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33.3%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.detailBar</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3a5d96</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;今日天气小程序&quot;&gt;&lt;a href=&quot;#今日天气小程序&quot; class=&quot;headerlink&quot; title=&quot;今日天气小程序&quot;&gt;&lt;/a&gt;今日天气小程序&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一个简陋的查询天气信息的小程序demo，大约是这样。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="实战" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>mock与easy-mock</title>
    <link href="http://yoursite.com/2019/07/30/%E5%B7%A5%E5%85%B7%E7%B1%BB/mock%E4%B8%8Eeasy-mock%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2019/07/30/工具类/mock与easy-mock数据/</id>
    <published>2019-07-30T09:54:38.580Z</published>
    <updated>2019-08-15T05:00:31.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mock-js"><a href="#mock-js" class="headerlink" title="mock.js"></a>mock.js</h3><blockquote><p>mock数据是真实的数据的存在之前，调试时期的替代品，通俗来讲就是<code>备胎</code>。前后端分离的开发模式兴起，所以mockjs就是让前端工程师独立于后端进行开发。<code>生成随机数据，拦截 Ajax 请求。</code></p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>官方文档已经讲的非常清楚了。<a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">mock文档</a></p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>属性名</li><li>规则</li><li>属性值</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li>navList是长度为8的数组</li><li>navList中数组每一个元素都是一个对象，里面包含了两个属性<code>id</code>,<code>text</code></li><li><code>id从0开始一直自增到7</code></li><li><code>text</code>依次遍历</li></ul><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> resource = Mock.mock(&#123;</span><br><span class="line">      <span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">"navList|8"</span>: [&#123;</span><br><span class="line">        <span class="string">"id|+1"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">"text|+1"</span>: [<span class="string">"首页"</span>,<span class="string">"动画"</span>,<span class="string">"番剧"</span>,<span class="string">"国创"</span>,<span class="string">"音乐"</span>,<span class="string">"舞蹈"</span>,<span class="string">"科技"</span>,<span class="string">"游戏"</span>] </span><br><span class="line">      &#125;]</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/07/30/5d400eb55a92383129.png" alt="Snipaste_2019-07-30_16-48-48.png"></p><h3 id="easy-mock"><a href="#easy-mock" class="headerlink" title="easy-mock"></a>easy-mock</h3><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p><a href="https://easy-mock.com/" target="_blank" rel="noopener">easy-mock</a>官网，登录即注册，暂时不能提供修改密码，所以不要忘记密码。</p><ul><li>创建项目</li><li>每一个用户都会有一个演示的demo</li><li>可以团队协作项目，也可以开发个人项目</li></ul><p><img src="https://i.loli.net/2019/07/30/5d40105167ecd27432.png" alt="Snipaste_2019-07-30_17-39-08.png"></p><p>点击项目即可查看项目信息。并且对其修改，预览，删除，克隆等操作。</p><p><a href="https://i.loli.net/2019/07/30/5d4010e45cb0240701.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/30/5d4010e45cb0240701.png" alt="Snipaste_2019-07-30_17-41-40.png"></a></p><h4 id="接口的更新"><a href="#接口的更新" class="headerlink" title="接口的更新"></a>接口的更新</h4><p><img src="https://i.loli.net/2019/07/30/5d4011b61606438786.png" alt="Snipaste_2019-07-30_17-43-26.png"></p><p>左边为mockjs的语法</p><p><img src="https://i.loli.net/2019/07/30/5d40121e6382126700.png" alt="Snipaste_2019-07-30_17-43-41.png"></p><p>这样我们的接口也就更新好了。</p><h4 id="接口预览"><a href="#接口预览" class="headerlink" title="接口预览"></a>接口预览</h4><p><img src="https://i.loli.net/2019/07/30/5d40126a039bf69597.png" alt="Snipaste_2019-07-30_17-44-01.png"></p><p>接口方式</p><p><img src="https://i.loli.net/2019/07/30/5d401296d8da954183.png" alt="Snipaste_2019-07-30_17-44-15.png"></p><p>ok 剩下的自己去发现吧。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mock-js&quot;&gt;&lt;a href=&quot;#mock-js&quot; class=&quot;headerlink&quot; title=&quot;mock.js&quot;&gt;&lt;/a&gt;mock.js&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;mock数据是真实的数据的存在之前，调试时期的替代品，通俗来讲就是&lt;code&gt;备胎&lt;/code&gt;。前后端分离的开发模式兴起，所以mockjs就是让前端工程师独立于后端进行开发。&lt;code&gt;生成随机数据，拦截 Ajax 请求。&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;p&gt;官方文档已经讲的非常清楚了。&lt;a href=&quot;http://mockjs.com/examples.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mock文档&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;规则&quot;&gt;&lt;a href=&quot;#规则&quot; class=&quot;headerlink&quot; title=&quot;规则&quot;&gt;&lt;/a&gt;规则&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;属性名&lt;/li&gt;
&lt;li&gt;规则&lt;/li&gt;
&lt;li&gt;属性值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;navList是长度为8的数组&lt;/li&gt;
&lt;li&gt;navList中数组每一个元素都是一个对象，里面包含了两个属性&lt;code&gt;id&lt;/code&gt;,&lt;code&gt;text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id从0开始一直自增到7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt;依次遍历&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>HTML5</title>
    <link href="http://yoursite.com/2019/07/27/H5C3/H5%E5%92%8Cc3/"/>
    <id>http://yoursite.com/2019/07/27/H5C3/H5和c3/</id>
    <published>2019-07-27T10:55:07.051Z</published>
    <updated>2019-08-15T04:57:18.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h3><ul><li><p>（1）取消了过时的标签如：font和center</p></li><li><p>（2）新表单元素的引入（如email，可以不用写js代码即可验证邮箱）</p></li><li><p>（3）新语义便签的引入（header，section，footer..）</p></li><li><p>（4）canvas标签</p></li><li><p>（5）本地数据库（列如：localstorage）</p></li><li><p>（6）新增API</p></li></ul><h5 id="1、解决语义问题，html5新增的标签在我们的低版本的浏览器中有的是识别不出来的，尤其是ie浏览器。以下是解决的方案"><a href="#1、解决语义问题，html5新增的标签在我们的低版本的浏览器中有的是识别不出来的，尤其是ie浏览器。以下是解决的方案" class="headerlink" title="1、解决语义问题，html5新增的标签在我们的低版本的浏览器中有的是识别不出来的，尤其是ie浏览器。以下是解决的方案"></a>1、解决语义问题，html5新增的标签在我们的低版本的浏览器中有的是识别不出来的，尤其是ie浏览器。以下是解决的方案</h5><ul><li>在script标签中创建列如：（document.createElement(‘nav’));</li><li>利用插件html5shiv.min.js，注意如果只用一个插件的话，我们谷歌浏览器其实是无需加载这个插件的所以我们只需要兼容ie即可（lte是小于）</li></ul><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lte IE 6]&gt;</span></span><br><span class="line"><span class="comment">       &lt;script src="node_modules/html5shiv.min.js/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment"> &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多媒体标签新属性"><a href="#多媒体标签新属性" class="headerlink" title="多媒体标签新属性"></a>多媒体标签新属性</h4><p>video和audio</p><ul><li><p>添加了状态栏（controls属性）</p></li><li><p>添加了自动播放属性、循环播放（autoplay、loop）</p></li><li><p>解决浏览器兼容问题可以用source</p><p><img src="/2019/07/27/H5C3/H5和c3/C:/Users\LRY-NB\AppData\Roaming\Typora\typora-user-images\1562296060977.png" alt="1562296060977"></p></li></ul><p>表单新特性：</p><p>email、url、color、number、month…..</p><h4 id="类的增加"><a href="#类的增加" class="headerlink" title="类的增加"></a>类的增加</h4><p>以前我们需要增加或者移除一个类，我们需要引用jquery，但是我们h5给我们提供了新特性classList</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .wrapper&#123;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background: palegreen;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"add"</span> <span class="attr">value</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"remove"</span> <span class="attr">value</span>=<span class="string">"remove"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">value</span>=<span class="string">"toggle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"contains"</span> <span class="attr">value</span>=<span class="string">"contains"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            let obj_div = document.querySelector("div");</span></span><br><span class="line"><span class="undefined">            let add_btn = document.querySelector(".add");</span></span><br><span class="line"><span class="undefined">            let remove_btn = document.querySelector(".remove");</span></span><br><span class="line"><span class="undefined">            let toggle_btn = document.querySelector(".toggle");</span></span><br><span class="line"><span class="undefined">            let contain_btn = document.querySelector(".contains");</span></span><br><span class="line"><span class="undefined">            add_btn.onclick = function ()&#123;</span></span><br><span class="line"><span class="undefined">                obj_div.classList.add("wrapper");</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义属性data"><a href="#自定义属性data" class="headerlink" title="自定义属性data-"></a>自定义属性data-</h4><p>h5中提供自定义属性统一规定以data-开头</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意如果是data-test-data则使用驼峰命名法获取数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-test</span>=<span class="string">"134"</span>&gt;</span>ggg<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">       let list = document.querySelector("div").dataset;</span></span><br><span class="line"><span class="undefined">        console.log(list);</span></span><br><span class="line"><span class="undefined">        // 获取属性值</span></span><br><span class="line"><span class="undefined">        console.log(list.test);</span></span><br><span class="line"><span class="undefined">        // 设置属性值</span></span><br><span class="line"><span class="undefined">        list.resource = 50;</span></span><br><span class="line"><span class="undefined">        // 同样的注意驼峰获取属性</span></span><br><span class="line"><span class="undefined">        console.log(list.resource)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="获取网络状态"><a href="#获取网络状态" class="headerlink" title="获取网络状态"></a>获取网络状态</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window.ononline = function()&#123;</span><br><span class="line">            alert("当前处于联网状态");</span><br><span class="line">        &#125;</span><br><span class="line">        window.onoffline = function()&#123;</span><br><span class="line">            alert("当前处于断网状态");</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="获取地理位置"><a href="#获取地理位置" class="headerlink" title="获取地理位置"></a>获取地理位置</h4><p>h5中获取地理位置有实时和一次性</p><p>实时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.navigator.geolocation.watchPosition(success,error);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">success</span> (<span class="params">msg,position</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(msg);</span><br><span class="line">            <span class="built_in">console</span>.log(position);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">error</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(msg);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><p>localStorage（永久）和sessionStorage（临时）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"添加"</span> <span class="attr">class</span>=<span class="string">"btn1"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"删除"</span> <span class="attr">class</span>=<span class="string">"btn2"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取"</span> <span class="attr">class</span>=<span class="string">"btn3"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"清空"</span> <span class="attr">class</span>=<span class="string">"btn4"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> btn1 = <span class="built_in">document</span>.querySelector(<span class="string">".btn1"</span>);</span></span><br><span class="line"><span class="javascript">       btn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">window</span>.localStorage.setItem(<span class="string">"name"</span>,<span class="string">"zs"</span>);</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> btn2 = <span class="built_in">document</span>.querySelector(<span class="string">".btn2"</span>);</span></span><br><span class="line"><span class="javascript">       btn2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">window</span>.localStorage.removeItem(<span class="string">"name"</span>);</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> btn3 = <span class="built_in">document</span>.querySelector(<span class="string">".btn3"</span>);</span></span><br><span class="line"><span class="javascript">       btn3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">window</span>.localStorage.getItem(<span class="string">"name"</span>);</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> btn4 = <span class="built_in">document</span>.querySelector(<span class="string">".btn4"</span>);</span></span><br><span class="line"><span class="javascript">       btn4.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">window</span>.localStorage.clear();</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTML5新特性&quot;&gt;&lt;a href=&quot;#HTML5新特性&quot; class=&quot;headerlink&quot; title=&quot;HTML5新特性&quot;&gt;&lt;/a&gt;HTML5新特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;（1）取消了过时的标签如：font和center&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（2）新表单元素的引入（如email，可以不用写js代码即可验证邮箱）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（3）新语义便签的引入（header，section，footer..）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（4）canvas标签&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（5）本地数据库（列如：localstorage）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;（6）新增API&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;1、解决语义问题，html5新增的标签在我们的低版本的浏览器中有的是识别不出来的，尤其是ie浏览器。以下是解决的方案&quot;&gt;&lt;a href=&quot;#1、解决语义问题，html5新增的标签在我们的低版本的浏览器中有的是识别不出来的，尤其是ie浏览器。以下是解决的方案&quot; class=&quot;headerlink&quot; title=&quot;1、解决语义问题，html5新增的标签在我们的低版本的浏览器中有的是识别不出来的，尤其是ie浏览器。以下是解决的方案&quot;&gt;&lt;/a&gt;1、解决语义问题，html5新增的标签在我们的低版本的浏览器中有的是识别不出来的，尤其是ie浏览器。以下是解决的方案&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;在script标签中创建列如：（document.createElement(‘nav’));&lt;/li&gt;
&lt;li&gt;利用插件html5shiv.min.js，注意如果只用一个插件的话，我们谷歌浏览器其实是无需加载这个插件的所以我们只需要兼容ie即可（lte是小于）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>PHP</title>
    <link href="http://yoursite.com/2019/07/27/%E5%90%8E%E7%AB%AF%E7%B1%BB/php/"/>
    <id>http://yoursite.com/2019/07/27/后端类/php/</id>
    <published>2019-07-27T10:54:47.651Z</published>
    <updated>2019-08-15T05:01:11.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><p>在php中定义变量是以$开头， 不能以其他的字符开头。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出字符串可以用echo，其余的可以用print_r或者var_dump（可以输入其他）</p><a id="more"></a><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>普通数组的定义方式</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">array</span> = <span class="keyword">array</span>(<span class="string">"zs"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>);</span><br><span class="line">var_dump(<span class="keyword">array</span>);</span><br></pre></td></tr></table></figure><ul><li>键值对的数组方式</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">array</span> = <span class="keyword">array</span>(<span class="string">"username"</span> =&gt; <span class="string">"zs"</span>, <span class="string">"age"</span> =&gt; <span class="number">17</span>);</span><br><span class="line">var_dump(<span class="keyword">array</span>);</span><br></pre></td></tr></table></figure><ul><li>常用方法 <ul><li>count(数组名) 统计出数组的长度</li><li>in_array(“某元素”,数组名)判断该数组是否包含某元素</li><li>strstr(“字符串”,字符串的某一部分)查看字符串某一部份是否为字符串的一部分。</li></ul></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串链接用点进行连接。</p><h3 id="a链接的GET请求（只有）"><a href="#a链接的GET请求（只有）" class="headerlink" title="a链接的GET请求（只有）"></a>a链接的GET请求（只有）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"02a标签发送get请求.php?username=zs&amp;age=19"</span>&gt;</span>发送给自己的服务器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $name = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    $age = $_GET[<span class="string">'age'</span>];</span><br><span class="line">    <span class="keyword">echo</span> $name.$age;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单的请求"><a href="#表单的请求" class="headerlink" title="表单的请求"></a>表单的请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"02a标签发送get请求.php?username=zs"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交数据"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $name = $_GET[<span class="string">'username'</span>];</span><br><span class="line">    <span class="comment">// $age = $_GET['age'];</span></span><br><span class="line">    <span class="keyword">echo</span> $name;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>其中$_GET是GET请求获得数据，_POST是post获取数据</strong></p><h3 id="实现文件和图片上传"><a href="#实现文件和图片上传" class="headerlink" title="实现文件和图片上传"></a>实现文件和图片上传</h3><p>前端实现上传文件，后端负责把上传的文件存储起来，然后存储到数据库中</p><p>前端</p><ul><li>必须加入（enctype=”multipart/form-data”）</li><li>method必须为post上传</li><li>上传之后需要提交才行。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"03.php"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">      上传照片<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端（php）</p><ul><li>必须加入请求头（header(“Content-Type:text/html;charset=utf-8”)）防止乱码</li><li>$_FILES是提供的上传的文件的信息的一个数组</li><li>可以取出数组中的对应的文件名和文件临时存放的位置以及文件的类型。</li><li>move_uploaded_file(临时存放的文件的位置，新的文件夹地址和名字)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//设置一个请求头防止乱码</span></span><br><span class="line">    header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line">    $file = $_FILES;</span><br><span class="line">    <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">    $file_name = $file[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">    <span class="comment">//获取上传文件的临时存储地址</span></span><br><span class="line">    $tmp_name = $file[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line">    <span class="comment">//将临时存放的文件上传存到我们要存放的目录文件下</span></span><br><span class="line">    move_uploaded_file($tmp_name,<span class="string">"image/"</span>.$file_name);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"上传成功"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="请求头处理"><a href="#请求头处理" class="headerlink" title="请求头处理"></a>请求头处理</h3><p>客户端向服务器端请求数据，而服务器端则向客户端响应数据。</p><ul><li>getallheader()获取浏览器的所有请求头</li></ul><p><strong> 查看浏览器是否为谷歌浏览器</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $arr = getallheaders();</span><br><span class="line">  $userAgent = $arr[<span class="string">"User-Agent"</span>];</span><br><span class="line">  <span class="keyword">if</span>(strstr($userAgent,<span class="string">"Chrome"</span>))&#123;</span><br><span class="line">    var_dump(<span class="string">"谷歌浏览器"</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    var_dump(<span class="string">"其他浏览器"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>cookie是客户端发送给服务器端的一个字条，当客户端第一次向服务端请求数据的时候，服务端会发送给客户端一个cookie，用以保存数据，客户端接受到cookie会保存起来，如果当客户端再次请求数据的时候会把cookie携带上。并把cookie中的数据写入服务端。</p><p><strong>cookie的生命周期</strong></p><ul><li>存在内存中cookie，当关闭浏览器的时候cookie就会消失。</li><li>存在硬盘上的cookie，即使关闭电脑cookie也不会消失。主要设置方法是（time（））</li><li>追杀cookie。把cookie清除掉</li></ul><p>（1）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">//向客户端输入cookie，以键值对的方式输入</span></span><br><span class="line">  setcookie(<span class="string">"username"</span>,<span class="string">"zhangshang"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>（2）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  setcookie(<span class="string">"password"</span>,<span class="string">"1111"</span>,time() * <span class="number">60</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>（3）再一次请求就会显示passwor deleted，代表cookie被杀死了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  setcookie(<span class="string">"password"</span>,<span class="string">""</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="cookie记住用户名"><a href="#cookie记住用户名" class="headerlink" title="cookie记住用户名"></a>cookie记住用户名</h4><p><strong>前端获取cookie，并且判断cookie是否存在</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cookiename = <span class="built_in">document</span>.cookie;</span><br><span class="line">      <span class="keyword">if</span>(cookiename)&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">"input[type='text']"</span>).value = cookiename.split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>后端发送cookie</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $cookie = $_GET[<span class="string">"username"</span>];</span><br><span class="line">  setcookie(<span class="string">"username"</span>,$cookie,time()+<span class="number">60</span>*<span class="number">20</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>session存储在服务器中的，依赖于cookie</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line">  $username = <span class="string">"程式"</span>;</span><br><span class="line"><span class="comment">//开启会话</span></span><br><span class="line">  session_start();</span><br><span class="line"><span class="comment">//$_SESSION是一个关联数组</span></span><br><span class="line">  $_SESSION[<span class="string">"username"</span>] = $username;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line">  session_start();</span><br><span class="line">  <span class="keyword">echo</span> $_SESSION[<span class="string">"username"</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP&quot;&gt;&lt;a href=&quot;#PHP&quot; class=&quot;headerlink&quot; title=&quot;PHP&quot;&gt;&lt;/a&gt;PHP&lt;/h1&gt;&lt;h3 id=&quot;变量的定义&quot;&gt;&lt;a href=&quot;#变量的定义&quot; class=&quot;headerlink&quot; title=&quot;变量的定义&quot;&gt;&lt;/a&gt;变量的定义&lt;/h3&gt;&lt;p&gt;在php中定义变量是以$开头， 不能以其他的字符开头。&lt;/p&gt;
&lt;h3 id=&quot;输出&quot;&gt;&lt;a href=&quot;#输出&quot; class=&quot;headerlink&quot; title=&quot;输出&quot;&gt;&lt;/a&gt;输出&lt;/h3&gt;&lt;p&gt;输出字符串可以用echo，其余的可以用print_r或者var_dump（可以输入其他）&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>实战md</title>
    <link href="http://yoursite.com/2019/07/27/%E5%AE%9E%E6%88%98%E7%B1%BB/%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/07/27/实战类/简易博客/</id>
    <published>2019-07-27T10:48:39.101Z</published>
    <updated>2019-08-15T05:02:29.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><blockquote><p>使用nodejs中的koa2框架先实现登录注册功能</p></blockquote><h2 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h2><ul><li>用户登录</li><li>用户注册</li><li>增加记录</li><li>删除记录</li><li>修改记录</li><li>查询记录</li></ul><a id="more"></a><h2 id="项目所依赖的模块"><a href="#项目所依赖的模块" class="headerlink" title="项目所依赖的模块"></a>项目所依赖的模块</h2><ul><li>koa</li><li>co-mysql</li><li>mysql</li><li>koa-session</li><li>koa-art-template</li><li>koa-router</li><li>koa-static</li><li>Koa-better-body</li></ul><h2 id="项目中路由设计"><a href="#项目中路由设计" class="headerlink" title="项目中路由设计"></a>项目中路由设计</h2><ul><li>首页（/index）get</li><li>登录（/login）get</li><li><p>注册（/regesiter）get</p></li><li><p>添加博客（add-blog）post</p></li><li>删除博客（delete-article）get</li><li>发表博客（send-article）post</li><li>阅读博客（read-article）get</li><li>编辑博客（edit-blog）get</li><li>编辑博客（edit-blog）post</li></ul><h2 id="项目中数据库设计"><a href="#项目中数据库设计" class="headerlink" title="项目中数据库设计"></a>项目中数据库设计</h2><p>数据库用的是mysql</p><p>users表</p><table><thead><tr><th>user_id</th><th>username</th><th>password</th><th>email</th></tr></thead><tbody><tr><td>1</td><td>admin</td><td>123</td><td>邮箱名</td></tr><tr><td>2</td><td>yo</td><td>222</td><td></td></tr><tr><td>3</td><td>yo2</td><td>222</td></tr></tbody></table><table><thead><tr><th>user_id</th><th>article_id</th><th>title</th><th>remark</th><th>editorValue</th><th>startTime</th><th>lastTime</th><th>author</th></tr></thead><tbody><tr><td>用户的id</td><td>文章id</td><td>文章名</td><td>文章简介</td><td>正文</td><td>创建时间</td><td>最后编辑时间</td><td>作者</td></tr></tbody></table><p>ps：命名不太规范，谨记以后使用驼峰命名法。</p><h2 id="项目所遇到坑"><a href="#项目所遇到坑" class="headerlink" title="项目所遇到坑"></a>项目所遇到坑</h2><p>（1）表单提交，后台获取不到数据，以为是中间件的问题，原来是我的type给错</p><p>（2）数据插入不到数据库中</p><p>（3）静态资源库的问题，导致页面渲染不出来。</p><h2 id="项目中session问题"><a href="#项目中session问题" class="headerlink" title="项目中session问题"></a>项目中session问题</h2><p>已解决问题</p><p>（1）注册过后，重定向到登录</p><p>（2）登录过后，重定向到首页</p><p>（3）如何解决点击登录，注册按钮页面异常问题（ps：已解决把html文件中的a标签跳转路径的.html删掉即可）</p><p>（4）登录在postman中测试是用户名和密码正确显示登录成功，但是在）</p><p>（5）ajax发送请求过后，获取到后台发送过来的数据，这时后台如果要重定向页面是不行的，必须由前端来重定向。</p><p>（6）根据用户的sessionid不同，请求的博客文章也不同。用户不登录即访问不到主页和其他页面</p><p>待解决问题</p><p>（1）session、cookie存储和使用</p><p>（2）前端交互数据ing</p><p>（3）首页编写ing</p><p>（4）ajax中post请求获取不到数据ing</p><p>（5）前端利用hash值来使用公共的头部底部区域</p><p>（6）发表博客，需要等模态框弹出来过后，方可重定向。</p><p>（7）实现点击加载刷新很多</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot; title=&quot;项目描述&quot;&gt;&lt;/a&gt;项目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用nodejs中的koa2框架先实现登录注册功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目功能&quot;&gt;&lt;a href=&quot;#项目功能&quot; class=&quot;headerlink&quot; title=&quot;项目功能&quot;&gt;&lt;/a&gt;项目功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用户登录&lt;/li&gt;
&lt;li&gt;用户注册&lt;/li&gt;
&lt;li&gt;增加记录&lt;/li&gt;
&lt;li&gt;删除记录&lt;/li&gt;
&lt;li&gt;修改记录&lt;/li&gt;
&lt;li&gt;查询记录&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="实战" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序</title>
    <link href="http://yoursite.com/2019/07/27/%E5%AE%9E%E6%88%98%E7%B1%BB/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/07/27/实战类/微信小程序/</id>
    <published>2019-07-27T10:48:36.621Z</published>
    <updated>2019-08-15T05:02:55.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><blockquote><p>我的微信以前搞过微信公众号，所以微信公众平台显示的是微信公众号的后台，而不是小程序的开发后台。具体我也不知道怎么搞，≧ ﹏ ≦</p></blockquote><h3 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h3><p><code>需要到官网上去下载，可以先下载稳定版本</code></p><p><code>选择小程序开发</code></p><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>目录树</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:app.js</span><br><span class="line">│  app.json</span><br><span class="line">│  app.wxss</span><br><span class="line">│  project.config.json//后添加的</span><br><span class="line">│  sitemap.json//后添加的</span><br><span class="line">│</span><br><span class="line">├─images</span><br><span class="line">│      head.jpg</span><br><span class="line">│</span><br><span class="line">└─pages</span><br><span class="line">    └─index</span><br><span class="line">            index.js</span><br><span class="line">            index.json</span><br><span class="line">            index.wxml</span><br><span class="line">            index.wxss</span><br></pre></td></tr></table></figure><ul><li>其中app.json,app.wxss,app.js这三个文件是全局，对整个项目进行操作</li><li>index.js（页面逻辑）</li><li>index.json（状态信息）</li><li>index.wxml（页面绘制）</li><li>index.wxss（排版布局）</li></ul><h3 id="小程序1"><a href="#小程序1" class="headerlink" title="小程序1"></a>小程序1</h3><blockquote><p>实现获取用户头像和名称</p></blockquote><p>依次建好仨个全局文件和一个项目文件夹。项目文件夹中包括我们的页面文件夹</p><p>在index件四个文件，我们只需要右键–新建pages，输入index，立刻会帮我们生成四个文件。</p><p>这时就可以在全局中的app.json文件中看到对应的页面信息了，（前提是一开始建app.json的时候写了花括号在里面）</p><p><strong>index.wxml</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">wx:if</span>=<span class="string">'&#123;&#123;src&#125;&#125;'</span> <span class="attr">class</span>=<span class="string">'imgWrapper'</span> <span class="attr">src</span>=<span class="string">'&#123;&#123;src&#125;&#125;'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'btn'</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> <span class="attr">bindgetuserinfo</span>=<span class="string">"getMyInfo"</span>&gt;</span>点击获取微信头像<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    src: <span class="string">'https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=350479878,4015742982&amp;fm=27&amp;gp=0.jpg'</span>,</span><br><span class="line">    name: <span class="string">'null'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getMyInfo: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> results = e.detail.userInfo</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      src : results.avatarUrl,</span><br><span class="line">      name : results.nickName</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>index.wxss</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgWrapper</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">360</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>app.json</strong></p><p><code>这里的window是对头部状态栏的设置，写一下window敲回车自动生成</code> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"window": &#123;</span><br><span class="line">    "navigationBarBackgroundColor": "#ffffff",</span><br><span class="line">    "navigationBarTextStyle": "black",</span><br><span class="line">    "navigationBarTitleText": "获取用户信息",</span><br><span class="line">    "backgroundColor": "#eeeeee",</span><br><span class="line">    "backgroundTextStyle": "light",</span><br><span class="line">    "enablePullDownRefresh": false</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>（1）checkbox中的checked中为<code></code></p><p>（2）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;微信小程序&quot;&gt;&lt;a href=&quot;#微信小程序&quot; class=&quot;headerlink&quot; title=&quot;微信小程序&quot;&gt;&lt;/a&gt;微信小程序&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我的微信以前搞过微信公众号，所以微信公众平台显示的是微信公众号的后台，而不是小程序的开发后台。具体我也不知道怎么搞，≧ ﹏ ≦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;开发者工具&quot;&gt;&lt;a href=&quot;#开发者工具&quot; class=&quot;headerlink&quot; title=&quot;开发者工具&quot;&gt;&lt;/a&gt;开发者工具&lt;/h3&gt;&lt;p&gt;&lt;code&gt;需要到官网上去下载，可以先下载稳定版本&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;选择小程序开发&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="实战" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>zepto</title>
    <link href="http://yoursite.com/2019/07/12/%E5%BA%93%E5%92%8C%E6%A1%86%E6%9E%B6%E7%B1%BB/zepto/"/>
    <id>http://yoursite.com/2019/07/12/库和框架类/zepto/</id>
    <published>2019-07-12T11:52:56.000Z</published>
    <updated>2019-08-15T05:01:58.403Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>zepto是一款轻量级的框架，其用法和jQuery用法相同，jQuery是pc端比较好一点，但是移动端就不行了，从而诞生了zepto。zepto适用于移动端。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>官网<a href="https://www.html.cn/doc/zeptojs_api/" target="_blank" rel="noopener">https://www.html.cn/doc/zeptojs_api/</a></li><li>GitHub地址（<a href="https://github.com/madrobby/zepto" target="_blank" rel="noopener">https://github.com/madrobby/zepto</a>）</li></ol><p>在GitHub中把zepto下载下来之后，在其目录打开命令行窗口或者power shall窗口，（前提是你已经安装了nodejs）执行</p><p>npm i 把所需要的依赖下载下来。</p><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>zepto是一个模块的文件，需要什么我们就要引入什么，所以这里需要我们定制自己zepto。</p></blockquote><p>在下载下来的文件中打开make文件，定位到41行，这里的touch是我们自己添加的，其余的五个是核心模块。</p><p><img src="/2019/07/12/库和框架类/zepto/C:/Users\LRY-NB\AppData\Roaming\Typora\typora-user-images\1562933013137.png" alt="1562933013137"></p><p>接下来我们就可以使用我们的zepto.js</p><p>我们页面需要调到模拟手机的页面，要不然不显示。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;zepto是一款轻量级的框架，其用法和jQuery用法相同，jQuery是pc端比较好一点，但是移动端就不行了，从而诞生了zepto。zepto适用于移动端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;官网&lt;a href=&quot;https://www.html.cn/doc/zeptojs_api/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.html.cn/doc/zeptojs_api/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub地址（&lt;a href=&quot;https://github.com/madrobby/zepto&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/madrobby/zepto&lt;/a&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在GitHub中把zepto下载下来之后，在其目录打开命令行窗口或者power shall窗口，（前提是你已经安装了nodejs）执行&lt;/p&gt;
&lt;p&gt;npm i 把所需要的依赖下载下来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://yoursite.com/2019/05/23/%E5%B7%A5%E5%85%B7%E7%B1%BB/webpack/"/>
    <id>http://yoursite.com/2019/05/23/工具类/webpack/</id>
    <published>2019-05-23T11:26:23.000Z</published>
    <updated>2019-08-15T05:00:40.144Z</updated>
    
    <content type="html"><![CDATA[<h4 id="webpack的安装及其使用"><a href="#webpack的安装及其使用" class="headerlink" title="webpack的安装及其使用"></a>webpack的安装及其使用</h4><h4 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h4><p>安装webpack之前必须要安装nodejs，而且nodejs必须为最新的版本，要不然可能会有一个些问题。接下来就要全局的安装webpack，可以使用yarn或者npm包管理器，这里我们使用npm管理器。</p><ul><li>npm i webpack -g（全局安装webpack）</li><li>npm i –save-dev webpack@（版本号）（如果没有全局安装webpck，则这条语句就会报错）</li><li>npm i -D webpack-dev-server（安装webpack热更新）</li><li>npm i -D css-loader（此处只是举一个例子，并不一定非要是css-loader也有可能是别的loader）</li><li>npm i -D webpack-cli -g（全局安装webpack-cli）</li></ul><a id="more"></a><h4 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h4><ul><li><p>首先第一步要初始化npm Init -y（生成package.json）</p></li><li><p>利用npm安装webpack</p><ul><li><p>安装webpack-cli和webpack-dev-server（可以去pakeage.json的文件中确定是否安装该依赖）</p></li><li><p>创建一个webpack.config.js的文件</p></li></ul></li><li><p>接下来就是配置webpack.config.js文件</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 设置以开发者模式</span></span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  <span class="comment">//设置一个入口的文件</span></span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    <span class="comment">//出口文件的名称和路径，并把出口文件都放在dist文件夹，这个文件如果没有则会创建</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename : <span class="string">'bundle.js'</span>,</span><br><span class="line">    <span class="comment">// 在当前的路径下创建一个dist文件夹，并把出口文件生成一个前面为任意8为哈希值-bundle.js</span></span><br><span class="line">    path: path.join(__dirname,<span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//配置热更新</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">3000</span></span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//可以加载css和图片还有html文件</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(htm|html)/</span>,</span><br><span class="line">        use: [<span class="string">'html-withimg-loader'</span>,<span class="string">'raw-loader'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpeg|gif|webp|jpg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'file-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="comment">//配置模板，在index.html中会使用模板来应用title</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'hello webpack'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      template: <span class="string">'./src/index.html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>index.js文件中（入口文件）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./style.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.html'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello webpack2'</span>)</span><br></pre></td></tr></table></figure><h4 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h4><p><code>webpack4</code>会把src的.js文件打包生成一个dist文件夹，并且新增了mode属性,可以指定我们的为生产或者开发模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode: &apos;development/production&apos;</span><br></pre></td></tr></table></figure><ul><li>entry可以为一个对象（键值对的形式），指定多个入口文件。</li><li>可以用[key]为上面的key</li></ul><h4 id="四、loaders"><a href="#四、loaders" class="headerlink" title="四、loaders"></a>四、loaders</h4><h4 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h4><p>url-loader（如果图片的大小小于limit则会压缩为base64，大于的会变成普通的物理文件）基于file-loader</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|gif)$/i</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">28192</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a>sass-loader</h4><p><code>利用sass-loader可以把scss转换为css代码并且打包到js文件中</code>，但是这样并不好，可以利用Plugins把css抽离出来</p><h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;webpack的安装及其使用&quot;&gt;&lt;a href=&quot;#webpack的安装及其使用&quot; class=&quot;headerlink&quot; title=&quot;webpack的安装及其使用&quot;&gt;&lt;/a&gt;webpack的安装及其使用&lt;/h4&gt;&lt;h4 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h4&gt;&lt;p&gt;安装webpack之前必须要安装nodejs，而且nodejs必须为最新的版本，要不然可能会有一个些问题。接下来就要全局的安装webpack，可以使用yarn或者npm包管理器，这里我们使用npm管理器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npm i webpack -g（全局安装webpack）&lt;/li&gt;
&lt;li&gt;npm i –save-dev webpack@（版本号）（如果没有全局安装webpck，则这条语句就会报错）&lt;/li&gt;
&lt;li&gt;npm i -D webpack-dev-server（安装webpack热更新）&lt;/li&gt;
&lt;li&gt;npm i -D css-loader（此处只是举一个例子，并不一定非要是css-loader也有可能是别的loader）&lt;/li&gt;
&lt;li&gt;npm i -D webpack-cli -g（全局安装webpack-cli）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>浅谈h5与c3</title>
    <link href="http://yoursite.com/2019/03/29/H5C3/%E6%B5%85%E8%B0%88h5%E4%B8%8Ec3/"/>
    <id>http://yoursite.com/2019/03/29/H5C3/浅谈h5与c3/</id>
    <published>2019-03-29T06:47:32.879Z</published>
    <updated>2019-08-15T04:56:58.187Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>布局的方式有很多种，利用浮动，定位这一类的布局真的是烦。。无力吐槽😧，今天来浅浅的了解一下flex布局</p></blockquote><h2 id="弹性布局（flex）"><a href="#弹性布局（flex）" class="headerlink" title="弹性布局（flex）"></a>弹性布局（flex）</h2><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .box&#123;</span></span><br><span class="line"><span class="undefined">      border: 1px solid #000;</span></span><br><span class="line"><span class="undefined">      width: 400px;</span></span><br><span class="line"><span class="undefined">      height: 500px;</span></span><br><span class="line"><span class="undefined">      box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .item&#123;</span></span><br><span class="line"><span class="undefined">      width: 100px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">      font-size: 20px;</span></span><br><span class="line"><span class="undefined">      background: red;</span></span><br><span class="line"><span class="undefined">      color: #fff;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      line-height: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/03/29/H5C3/浅谈h5与c3/QQ图片20190329145548.png" alt=""></p><h4 id="使用方法（父级加入display-flex）"><a href="#使用方法（父级加入display-flex）" class="headerlink" title="使用方法（父级加入display: flex）"></a>使用方法（父级加入display: flex）</h4><p>这是初始化的样子，如果我们想让它横过来显示是不是还要设置它的float属性，当然float对我们的文档流会有一点影响，还要清除浮动。不仅如此，是不是如果我们继续添加盒子，是不是还会超出来。哎，这时候就需要到我们的弹性布局了。</p><p>我们只需要给它的父级加上display: flex这个样子我们既是横排显示，并且添加其他的盒子它会重新计算将他的宽度，并不会超出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .box&#123;</span></span><br><span class="line"><span class="undefined">      border: 1px solid #000;</span></span><br><span class="line"><span class="undefined">      width: 400px;</span></span><br><span class="line"><span class="undefined">      height: 500px;</span></span><br><span class="line"><span class="undefined">      box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">      /* 默认横向排列 */</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      /*  水平方向的属性：center flex-start(开始对齐) flex-end（结尾对齐）</span></span><br><span class="line"><span class="undefined">       space-around（相当于手拉手的方式排列） space-between（两端对齐） */</span></span><br><span class="line"><span class="undefined">      justify-content: center;</span></span><br><span class="line"><span class="undefined">      /* 垂直方向的属性... */</span></span><br><span class="line"><span class="undefined">      align-items: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .item&#123;</span></span><br><span class="line"><span class="undefined">      /* 有两个item盒子，相当于1/2各占一半 */</span></span><br><span class="line"><span class="undefined">      /* flex: 1; */</span></span><br><span class="line"><span class="undefined">      width: 100px;</span></span><br><span class="line"><span class="undefined">      height: 100px;</span></span><br><span class="line"><span class="undefined">      font-size: 20px;</span></span><br><span class="line"><span class="undefined">      background: red;</span></span><br><span class="line"><span class="undefined">      color: #fff;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      line-height: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常见的父级元素属性"><a href="#常见的父级元素属性" class="headerlink" title="常见的父级元素属性"></a>常见的父级元素属性</h4><ul><li>display: flex</li><li>justify-content（水平方向的属性）<ul><li>center(居中)</li><li>space-around（这个解释就有意思了，相当与每个盒子伸开手）</li><li>space-between（两端对齐）</li><li>flex-start（开始位置）</li><li>flex-end(末尾位置)</li></ul></li><li>align-items（垂直方向的属性）<ul><li>center</li><li>…（等）</li></ul></li><li>flex-direction（排列方向）<ul><li>column（纵，）</li><li>row(横，默认)</li></ul></li></ul><h4 id="常见的子级元素"><a href="#常见的子级元素" class="headerlink" title="常见的子级元素"></a>常见的子级元素</h4><ul><li>flex: 1（ 有两个item盒子，相当于1/2各占一半 flex: 1）</li></ul><p><img src="/2019/03/29/H5C3/浅谈h5与c3/QQ图片20190329151536.png" alt=""></p><h4 id="利用flex布局实现底部固定导航栏"><a href="#利用flex布局实现底部固定导航栏" class="headerlink" title="利用flex布局实现底部固定导航栏"></a>利用flex布局实现底部固定导航栏</h4><p>我们经常看到某宝，某猫的app中都会有类似的底部固定导航栏。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.nav-box&#123;</span><br><span class="line">      position: fixed;</span><br><span class="line">      left: 0;</span><br><span class="line">      bottom: 0;</span><br><span class="line">      width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    .box&#123;</span><br><span class="line">      display: flex;</span><br><span class="line">    &#125;</span><br><span class="line">    .item&#123;</span><br><span class="line">      font-size: 20px; </span><br><span class="line">      color: #fff;</span><br><span class="line">      text-align: center;</span><br><span class="line">      height: 100px;</span><br><span class="line">      line-height: 100px;</span><br><span class="line">      flex: 1;</span><br><span class="line">      background: red;</span><br><span class="line">      border: 1px solid #aaa;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'nav-box'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里注意一下我们为什么没有直接给box定位，而是又多此一举的套了一层盒子，是因为我们box里面用了弹性布局，如果还用定位布局可能会挂掉，所以我们都会多套一层盒子。</p><p><img src="/2019/03/29/H5C3/浅谈h5与c3/QQ图片20190329183736.png" alt=""></p><h2 id="C3中的calc属性"><a href="#C3中的calc属性" class="headerlink" title="C3中的calc属性"></a>C3中的calc属性</h2><p>列如我们想要实现一个可以pc和移动端都可以看的页面，那么我们的宽度，和高度都不能给固定的px，所以这个时候就用到了我们的calc属性</p><p><img src="/2019/03/29/H5C3/浅谈h5与c3/QQ图片20190329213356.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    *&#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .nav&#123;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      height: 70px;</span></span><br><span class="line"><span class="undefined">      background: #aaa;</span></span><br><span class="line"><span class="undefined">      color: #fff;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      line-height: 70px;  </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .container&#123;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .slide&#123;</span></span><br><span class="line"><span class="undefined">      width: 30%;</span></span><br><span class="line"><span class="undefined">      height: calc(100vh - 70px);</span></span><br><span class="line"><span class="undefined">      color: #fff;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      background: bisque;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .main&#123;</span></span><br><span class="line"><span class="undefined">      width: calc(100vw - 30%);</span></span><br><span class="line"><span class="undefined">      height: calc(100vh - 70px);</span></span><br><span class="line"><span class="undefined">      background: blueviolet;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'nav'</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'slide'</span>&gt;</span>slide<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'main'</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这把弹性布局和calc结合在一起用，相当舒适。。</p><ul><li>1vh相当于高度的1%</li><li>1vw相当于宽度的1%</li><li>减号前后都应有空格，不然默认为像background-image(这种属性识别不出)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;布局的方式有很多种，利用浮动，定位这一类的布局真的是烦。。无力吐槽😧，今天来浅浅的了解一下flex布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;弹性布局（flex）&quot;&gt;&lt;a href=&quot;#弹性布局（flex）&quot; class=&quot;headerlink&quot; title=&quot;弹性布局（flex）&quot;&gt;&lt;/a&gt;弹性布局（flex）&lt;/h2&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>字体图标使用</title>
    <link href="http://yoursite.com/2019/03/25/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/25/工具类/字体图标使用/</id>
    <published>2019-03-25T05:05:07.000Z</published>
    <updated>2019-08-15T05:00:56.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阿里巴巴矢量图标库的使用"><a href="#阿里巴巴矢量图标库的使用" class="headerlink" title="阿里巴巴矢量图标库的使用"></a>阿里巴巴矢量图标库的使用</h3><ol><li><p>选中我们需要使用到的图标，添加到购物车中</p><p><img src="/2019/03/25/工具类/字体图标使用/QQ图片20190325130548.png" alt=""></p></li></ol><a id="more"></a><ol start="2"><li>添加到项目</li></ol><p><img src="/2019/03/25/工具类/字体图标使用/QQ图片20190325130610.png" alt=""></p><ol start="3"><li><p>三种方式使用字体图标（使用font-class）</p><ul><li>symbol</li><li>Unicode</li><li>font-class</li></ul><p><img src="/2019/03/25/工具类/字体图标使用/QQ图片20190325130615.png" alt=""></p></li><li><p>下载到本地（只留下iconfont.css和demo.css demo_index.html(引入之后也可以删除)）但是iconfont是不能删除的</p><p><img src="/2019/03/25/工具类/字体图标使用/QQ图片20190325130620.png" alt=""></p></li></ol><ol start="5"><li><p>引入iconfont.css(类名在demo_index.html中)</p><p><img src="/2019/03/25/工具类/字体图标使用/QQ图片20190325130633.png" alt=""></p></li><li><p>修改字体图标的大小和颜色</p><p><img src="/2019/03/25/工具类/字体图标使用/QQ图片20190325130638.png" alt=""></p></li><li><p>效果展示</p><p><img src="/2019/03/25/工具类/字体图标使用/QQ图片20190325130647.png" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;阿里巴巴矢量图标库的使用&quot;&gt;&lt;a href=&quot;#阿里巴巴矢量图标库的使用&quot; class=&quot;headerlink&quot; title=&quot;阿里巴巴矢量图标库的使用&quot;&gt;&lt;/a&gt;阿里巴巴矢量图标库的使用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;选中我们需要使用到的图标，添加到购物车中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/25/工具类/字体图标使用/QQ图片20190325130548.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>node</title>
    <link href="http://yoursite.com/2019/03/15/node/node/"/>
    <id>http://yoursite.com/2019/03/15/node/node/</id>
    <published>2019-03-15T06:31:06.000Z</published>
    <updated>2019-08-15T04:58:16.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h1><h2 id="what‘s-node？"><a href="#what‘s-node？" class="headerlink" title="what‘s node？"></a>what‘s node？</h2><blockquote><p>node既不是一种语言，也不是一个框架，更不是一个库。而是一种能让JavaScript运行在服务器上的一个平台</p></blockquote><blockquote><p>首先要下载node.js 自行到官网中下载。注意两个版本的区别</p></blockquote><h3 id="node中是以模块来划分作用域"><a href="#node中是以模块来划分作用域" class="headerlink" title="node中是以模块来划分作用域"></a>node中是以模块来划分作用域</h3><blockquote><p>node里面分为两个作用域，全局作用域（glogbal）和模块作用域</p></blockquote><ul><li><p>require（’模块标识符’） —–我们需引入模块需要用到的方法</p></li><li><p>模块</p><ul><li>用户自定义模块—-自己定义的一个js文件模块</li><li>系统提供模块—例如:fs,http…</li></ul></li></ul><a id="more"></a><h6 id="例如我们想要读取一个txt文件-JavaScript中是不可能实现的"><a href="#例如我们想要读取一个txt文件-JavaScript中是不可能实现的" class="headerlink" title="例如我们想要读取一个txt文件,JavaScript中是不可能实现的"></a>例如我们想要读取一个txt文件,JavaScript中是不可能实现的</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">//如果读取成功，则返回一个回调函数，erro----null，data----一串16进制，否则的话，erro----报错，data---undefined</span></span><br><span class="line">fs.readFile(<span class="string">'txt路径'</span>,(erro,data)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(erro)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="comment">//如果想要获取文件中的内容，只需要把16进制转换为字符串即可</span></span><br><span class="line">    <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>基本上路径如果，对的话是没有问题的，还有可能文件不存在。</li></ul><h5 id="现在我们不止想要读一个文件，我还想写入一个文件"><a href="#现在我们不止想要读一个文件，我还想写入一个文件" class="headerlink" title="现在我们不止想要读一个文件，我还想写入一个文件"></a>现在我们不止想要读一个文件，我还想写入一个文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line">fs.writeFile(<span class="string">'路径'</span>,<span class="string">'文件内容'</span>,error=&gt;&#123;</span><br><span class="line">    <span class="comment">//写入文件，如果成功则 error为null null又默认为0</span></span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件写入失败'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件写入成功'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入http模块</span></span><br><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    url = req.url</span><br><span class="line">    <span class="comment">//查找url</span></span><br><span class="line">    <span class="keyword">if</span>(url === <span class="string">'/'</span>)&#123;</span><br><span class="line">        res.end(<span class="string">'http 的使用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//开启服务器</span></span><br><span class="line">server.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running is server...'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="exports和module-exports的区别"><a href="#exports和module-exports的区别" class="headerlink" title="exports和module exports的区别"></a>exports和module exports的区别</h4><blockquote><p>很多时候我们需要引入到别的模块中的变量，这个时候我们就需要使用的exports或者module.exports来暴露我们需要使用的变量或者对象。每一个模块中都有一个module.exports对象，每一个module.exports对象都有一个exports对象，所以我们把需要暴露的对象都挂载在module.exports对象上。所以每次暴露都是module.exports.xxx = xxx但是为了方便同时又在每一个模块中提供了一个exports成员，还有exports === module.exports是为true假如我们只需要暴露xxx我们可以直接exports.xxx即可</p><p>如果我们暴露单个成员则需要使用module.exports不能使用exports因为最终返回的都是module.exports即使exports=xxx也不行，</p><p>但是有一种特别的特殊方法 exports=module.exports是可以的，</p><p>多次暴露使用exports</p><p>单次暴露使用module.exports</p><p>module.exports也可以多个暴露（module.exports={}即可）</p></blockquote><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><h3 id="一、安装express框架（npm-i-S-express）"><a href="#一、安装express框架（npm-i-S-express）" class="headerlink" title="一、安装express框架（npm i -S express）"></a>一、安装express框架（npm i -S express）</h3><ul><li>引入express模块</li><li>定义变量接受express（）方法</li></ul><p>利用express实现helloworld</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="comment">//使用路由</span></span><br><span class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用路由</span></span><br><span class="line">app.get(<span class="string">'/login'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'login'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//开启服务器</span></span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>总的来说比我们之前写原生简单易懂的多。</p><h3 id="二、nodemon的使用"><a href="#二、nodemon的使用" class="headerlink" title="二、nodemon的使用"></a>二、nodemon的使用</h3><p>每一次修改完代码是不是每一次都要node app.js 还要每一次都要开启服务器。nodemon是我们每一次修改完代码后只要ctrl+s然后刷新浏览器就可以更改。</p><ul><li>npm i -g nodemon（安装nodemon）</li><li>nodenom -v （查看版本号）</li><li>nodemon xxx.js（运行js文件）</li></ul><h3 id="三、模板引擎的使用"><a href="#三、模板引擎的使用" class="headerlink" title="三、模板引擎的使用"></a>三、模板引擎的使用</h3><ul><li>先下载art-template</li><li>使用engine（’以什么文件后缀’，’express-art-template’）引入express-art-template包</li><li>使用路由get（）方式</li><li>使用render(‘渲染的文件’，{对象数据}) 默认到views文件夹中去寻找，若要修改则app.set(‘views’,’文件夹路径’)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line">app.engine(<span class="string">'html'</span>,<span class="built_in">require</span>(<span class="string">'art-template-express'</span>))</span><br><span class="line">app.get(<span class="string">'index.html'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.render(<span class="string">'index.html'</span>)<span class="comment">//没有数据就无需写第二个参数</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置插件开始</span></span><br><span class="line"><span class="keyword">let</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">//配置body-parser</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//插件配置结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用get方法获取数据，这个/pinglung是表单的action='/pinglun'，methond='get'</span></span><br><span class="line">app.get(<span class="string">'/pinglun'</span>,(req,res)=&gt;&#123;</span><br><span class="line"> <span class="keyword">let</span> comment = req.query</span><br><span class="line">  comment.dataTime = <span class="string">'2019-5-1'</span></span><br><span class="line">   comments.unshift(comment)</span><br><span class="line">  res.redirect(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用post方法获取数据需要借助中间的插件body-parser才可以获取数据，不想get有一个内置的api (req.query),需要借助第三方插件，还需要配置</span></span><br><span class="line">app.post(<span class="string">'/post'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> comment = req.body</span><br><span class="line">  comment.dataTime = <span class="string">'2018-3-5'</span></span><br><span class="line">  comments.unshift(comment)</span><br><span class="line">  res.redirect(<span class="string">'/'</span>)<span class="comment">//重定向</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="四、提取路由模块"><a href="#四、提取路由模块" class="headerlink" title="四、提取路由模块"></a>四、提取路由模块</h3><p>我们每一次写路由的时候都会用很多的页面，那么这个时候都写在app中似乎有些不妥，这个时候我们可以把路由模块单独提取出来，生成一个router.js 而app.js只作为入口文件，具体操作如下。</p><p><strong>app.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="comment">//加载用户自定义router.js模块</span></span><br><span class="line"><span class="keyword">let</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"><span class="comment">//使用路由</span></span><br><span class="line">app.use(router)</span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>router.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">//路由都挂载在router上</span></span><br><span class="line"><span class="keyword">let</span> router = express.Router()</span><br><span class="line">router.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'index'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/login'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'login'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/register'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'register'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//导出路由，以后任何的入口文件要使用路由，都可以使用</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p>把路由与入口文件这个样子就可以彻底分开，这样感觉显得更加整洁。</p><h3 id="五、静态资源库的开放"><a href="#五、静态资源库的开放" class="headerlink" title="五、静态资源库的开放"></a>五、静态资源库的开放</h3><p>在这里我们首先来看path模块中的join函数和<strong>dirname与</strong>basename</p><ul><li>__dirname——–针对与当前文件目录（没有当前文件的名字和扩展名）（动态的）</li><li><p>__basename——–当前文件的名字和扩展名（动态的的）</p></li><li><p>join（’c:\project\’，’\foo’）———–返回值c:\project\foo（将两个路径拼接在一起）</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">//要使用/public这个文件夹下的文件,开放当前路径下的/public文件夹中的所有文件</span></span><br><span class="line">app.use(<span class="string">'/public'</span>，express.static(path.join(__dirname,<span class="string">'/public'</span>)))</span><br></pre></td></tr></table></figure><h3 id="六、MongoDB"><a href="#六、MongoDB" class="headerlink" title="六、MongoDB"></a>六、MongoDB</h3><h4 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h4><h5 id="（1）安装"><a href="#（1）安装" class="headerlink" title="（1）安装"></a>（1）安装</h5><p>在官网中下载安装包</p><p>分为，完整安装和自定义安装（只要改个路径就行了）一般我们选择完整安装</p><p><img src="/2019/03/15/node/node/Node/QQ图片20190402131646.png" alt=""></p><h5 id="（2）配置环境变量"><a href="#（2）配置环境变量" class="headerlink" title="（2）配置环境变量"></a>（2）配置环境变量</h5><p>完整安装一般默认是放在C盘目录下</p><p><img src="/2019/03/15/node/node/Node/QQ图片20190402131657.png" alt=""></p><h5 id="（3）测试是否安装成功"><a href="#（3）测试是否安装成功" class="headerlink" title="（3）测试是否安装成功"></a>（3）测试是否安装成功</h5><p>一般如果我们在bin目录下直接点击mongod.exe会出现闪退，这也是我们为什么要配置环境变量的原因。</p><p><img src="/2019/03/15/node/node/Node/QQ图片20190402131700.png" alt=""></p><p>如果出现以上的信息那么就代表我们安装成功。</p><h5 id="（4）开启数据库"><a href="#（4）开启数据库" class="headerlink" title="（4）开启数据库"></a>（4）开启数据库</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># </span><br><span class="line">mongod 默认使用时会把mongod根目录盘中的/data/db作为数据存储目录</span><br><span class="line"><span class="comment">//开启数据库</span></span><br><span class="line">在命令行中输入</span><br><span class="line">mongod</span><br></pre></td></tr></table></figure><p><strong>attention： 在第一次开启数据库的时候我们必须要在盘符根目录下（我的是c盘）新建一个/data/db两个文件夹下</strong>，不然就会出现连接不成功（shutting down）</p><p>修改默认路径：mongod –dbpath=数据存储目录</p><p><img src="/2019/03/15/node/node/Node/QQ图片20190402154330.png" alt=""></p><p>如果新建了文件夹，则会success（看不懂吧。。是的）</p><p><img src="/2019/03/15/node/node/Node/QQ图片20190402154815.png" alt=""></p><h5 id="（5）关闭数据库"><a href="#（5）关闭数据库" class="headerlink" title="（5）关闭数据库"></a>（5）关闭数据库</h5><h6 id="ctrl加c或者点击上面的叉即可"><a href="#ctrl加c或者点击上面的叉即可" class="headerlink" title="ctrl加c或者点击上面的叉即可"></a><strong>ctrl加c或者点击上面的叉即可</strong></h6><h4 id="2、连接数据库"><a href="#2、连接数据库" class="headerlink" title="2、连接数据库"></a>2、连接数据库</h4><h5 id="（1）默认连接本地数据库"><a href="#（1）默认连接本地数据库" class="headerlink" title="（1）默认连接本地数据库"></a>（1）默认连接本地数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><h5 id="（2）在连接的时候退出数据库"><a href="#（2）在连接的时候退出数据库" class="headerlink" title="（2）在连接的时候退出数据库"></a>（2）在连接的时候退出数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h5 id="（3）基本命令"><a href="#（3）基本命令" class="headerlink" title="（3）基本命令"></a>（3）基本命令</h5><ul><li>show dbs<ul><li>显示所有数据库名称</li></ul></li><li><p>use “数据库名称”</p><ul><li>如果有该数据库则切换到，如没有则新建一个数据库</li></ul></li><li><p>db</p><ul><li>查看当前使用的数据库</li></ul></li><li>show collections<ul><li>查看当前数据库中的所有的集合</li></ul></li><li>show.[collections].find()<ul><li>查看数据库中集合的所有数据</li></ul></li></ul><p><strong>这里需要说明一下，如果直接db的话，会出现test，但是我们show dbs的时候却没有test这个数据库，这是怎么回事呢？这个原因是因为我的test的数据库中没有数据，如果插入数据的话，再show dbs的话，则会出现test数据库（任何一个空的数据库都是这样，除非里面有数据，否则的话不会出现）</strong></p><p>举个例子吧(假设下面的是终端)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//创建或者切换数据库</span><br><span class="line">use itcast</span><br><span class="line">//向当前数据库中插入一个集合并且插入数据</span><br><span class="line">db.students.insertOne(&#123;&quot;name&quot;:&quot;jack&quot;&#125;)</span><br><span class="line">//查看数据库(插入成功的话就会有这个数据库，相反却没有)</span><br><span class="line">show dbs</span><br><span class="line">//查看当前数据库的集合(应该会是students)</span><br><span class="line">show collections</span><br><span class="line">//查看当前集合中的所有元素（&#123; &quot;_id&quot; : ObjectId(&quot;5ca346b9b0e4018e76041ca1&quot;), &quot;name&quot; : &quot;jack&quot; &#125;）</span><br><span class="line">db.students.find()</span><br></pre></td></tr></table></figure><h4 id="3、MongoDB基本概念"><a href="#3、MongoDB基本概念" class="headerlink" title="3、MongoDB基本概念"></a>3、MongoDB基本概念</h4><p>看到黑马视频一个描述MongoDB的挺有意思的:</p><ul><li>最外层的括号相当于MongoDB</li><li>qq，taobao，baidu。。相当于我们里面有很多数据库</li><li>user，product。。相当于数据库中的集合</li><li>name,age集合中的记录</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    qq:&#123;</span><br><span class="line">        user:[</span><br><span class="line">            &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;,</span><br><span class="line">            &#123;<span class="string">"name"</span>:<span class="string">"张三34"</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"张三34"</span>,<span class="attr">age</span>:<span class="number">45</span>&#125;，</span><br><span class="line">            ....</span><br><span class="line">        ],</span><br><span class="line">       product:[</span><br><span class="line">            ....</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    taobao:&#123;</span><br><span class="line">            ...</span><br><span class="line">    &#125;,</span><br><span class="line">   baidu:&#123;</span><br><span class="line">              </span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、使用mongoose操作mongodb"><a href="#4、使用mongoose操作mongodb" class="headerlink" title="4、使用mongoose操作mongodb"></a>4、使用mongoose操作mongodb</h4><p>（1）安装mongoose包（npm i mongoose）</p><p>（2）引入mongoose模块 （let mongoose = require(mongoose)）</p><p>（3）创建架构</p><p>（4）连接数据库</p><p>（5）设计结合的结构</p><p>（6）将文档结构发布为模型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">let</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="keyword">let</span> Schema = mongoose.Schema</span><br><span class="line"><span class="comment">//4</span></span><br><span class="line">mongoose.connect(<span class="string">'mongoose://localhost/数据库名称'</span>)</span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//里面的字段就是集合结构中的属性名称</span></span><br><span class="line"><span class="comment">//约束的条件是为了防止有脏数据</span></span><br><span class="line"><span class="keyword">let</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span>,<span class="comment">//必须有该属性</span></span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  email: &#123;</span><br><span class="line">    type: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//将文档结构发布为模型</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  第一个参数，大写的单数字符串作为你的数据库名称，mongoose会自动将你的数据库名称转换为小写复数集合名称</span></span><br><span class="line"><span class="comment">  列如这里的User最终会变成users集合名称</span></span><br><span class="line"><span class="comment">  第二个参数，架构Schema</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  返回值：模型构造函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> User = mongoose.model(<span class="string">'User'</span>,userSchema)</span><br></pre></td></tr></table></figure><h4 id="5、增加数据"><a href="#5、增加数据" class="headerlink" title="5、增加数据"></a>5、增加数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> admin = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span>,</span><br><span class="line">  email: <span class="string">'3199895@qq.com'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">admin.save(<span class="function">(<span class="params">err,ret</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'保存失败'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'保存成功'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="6、查询数据"><a href="#6、查询数据" class="headerlink" title="6、查询数据"></a>6、查询数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有的数据</span></span><br><span class="line">User.find(<span class="function">(<span class="params">err,ret</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//查询符合记录的数据</span></span><br><span class="line">User.findOne(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span></span><br><span class="line">&#125;,(err,ret)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="7、删除数据"><a href="#7、删除数据" class="headerlink" title="7、删除数据"></a>7、删除数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">User.remove(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span></span><br><span class="line">&#125;,(err,ret)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除成功'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="8、更新数据"><a href="#8、更新数据" class="headerlink" title="8、更新数据"></a>8、更新数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新数据 id，修改内容，名称</span></span><br><span class="line"></span><br><span class="line">User.findByIdAndUpdate(<span class="string">'5ca35aaa914afc2efceed812'</span>,&#123;</span><br><span class="line">  password: <span class="string">'123456'</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ret</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'更新失败'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'更新成功'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h1><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul><li>全局对象：随时都能访问<ul><li>process.env</li><li>__filename（获取当前运行文件的绝对路径）</li><li>__dirname（获取当前运行文件目录的绝对路径）</li></ul></li><li>内置对象：向系统索要，引入即可</li><li>自定义对象：引入正确的路径即可</li></ul><h3 id="node所实现的规范"><a href="#node所实现的规范" class="headerlink" title="node所实现的规范"></a>node所实现的规范</h3><ul><li>CommonJS：规范nodeJS作为后端运行的标准    <ul><li>模块应该怎么写module<ul><li>依赖某一模块require</li><li>被依赖的模块需要module.exports = 外部数据</li></ul></li><li>一个文件就是一个模块</li></ul></li></ul><h3 id="文件的读取和写入"><a href="#文件的读取和写入" class="headerlink" title="文件的读取和写入"></a>文件的读取和写入</h3><blockquote><p>如果要对文件进行操作，就要先引入文件模块fs</p></blockquote><ul><li><em>readFile</em>(文件路径和名，’utf-8’，回调函数)异步读取文件的内容</li><li>readFileSync（）同步读取文件的内容</li><li>writeFile（文件的路径和名，文件内容，回调函数）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line">fs.readFile(<span class="string">"./public/a.txt"</span>,<span class="string">"utf-8"</span>,(err,data)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">fs.writeFile(<span class="string">"./public/b.txt"</span>,<span class="string">"哈哈哈，几天也是很难熬的一天啊"</span>,(err)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"写入文件完成"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><blockquote><p>http是node中的核心模块，同样的要先引入</p></blockquote><ul><li>createServer（）创建一个本地的服务器</li><li>http.on（）执行request请求，并有一回调函数，获取到request和，response参数。<ul><li>request是只读不能写入</li><li>response是可以写入</li></ul></li><li>http.listen（端口号，回调函数）用以开启服务器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT | <span class="number">3000</span></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 多次写入 写头</span></span><br><span class="line">  res.setHeader(<span class="string">'a'</span>,<span class="string">'a'</span>)</span><br><span class="line">  res.setHeader(<span class="string">'c'</span>,<span class="string">'c'</span>)</span><br><span class="line">  <span class="comment">// 一次性写入，一定在多次写入的后面</span></span><br><span class="line">  res.writeHead(<span class="number">200</span>,&#123;<span class="string">'content-type'</span>:<span class="string">'text/html;charset=utf-8'</span>&#125;)</span><br><span class="line">  <span class="comment">//多次写体</span></span><br><span class="line">  res.write(<span class="string">'第一次写入'</span>)</span><br><span class="line">  res.end(<span class="string">'最后一次写入'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.listen(port,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul><li>1开头正在执行</li><li>2开头已完成</li><li>3开头重定向</li><li>4开头客户端出现错误</li><li>5开头服务端出现错误</li></ul><h3 id="连接Mysql数据库"><a href="#连接Mysql数据库" class="headerlink" title="连接Mysql数据库"></a>连接Mysql数据库</h3><ul><li>npm i mysql -g（全局下载项目依赖模块）</li><li>复制对应代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var mysql = require(&apos;mysql&apos;);</span><br><span class="line">var pool = mysql.createConnection(&#123;</span><br><span class="line">  host: &apos;localhost&apos;,</span><br><span class="line">  user: &apos;root&apos;,</span><br><span class="line">  password: &apos;&apos;,</span><br><span class="line">  database: &apos;node_music&apos;</span><br><span class="line">&#125;);</span><br><span class="line">pool.connect()</span><br><span class="line">let db = &#123;&#125;</span><br><span class="line">db.q = function(sql,params)&#123;</span><br><span class="line">  pool.query(sql, params,function (error, results, fields) &#123;</span><br><span class="line">    if (error) throw error;</span><br><span class="line">    else&#123;</span><br><span class="line">      console.log(&apos;成功插入到数据库中&apos;)</span><br><span class="line">      console.log(results)</span><br><span class="line">      pool.end()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">module.exports = db</span><br></pre></td></tr></table></figure><h3 id="KOA框架"><a href="#KOA框架" class="headerlink" title="KOA框架"></a>KOA框架</h3><blockquote><p>主要介绍koa框架，express在上一篇文章已经介绍过了。koa框架是express的作者是同一个人，比起express（太大，太全）反而koa（轻量级，按需引入）</p></blockquote><ul><li>引入koa</li><li>创建一个koa对象</li><li>处理响应</li><li>开启服务器</li></ul><p><code>koa是非常智能的，如果我们读一个二进制的文件，它会帮我们下载下来。</code></p><p> <code>另外需要注意的是：koa采用的是es7中的async 和await需要和promise联合使用，废弃掉了express采用回调函数的机制</code></p><p><code>中间件的使用也是按需引入，比较方便</code></p><h4 id="koa-bodyparser"><a href="#koa-bodyparser" class="headerlink" title="koa-bodyparser"></a><strong>koa-bodyparser</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(bodyParser())</span><br><span class="line">app.use( <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = ctx.request.body</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'./db_test_01'</span>)</span><br><span class="line">db.q(<span class="string">`insert into users (title,single,time,file,uid) values(?,?,?,?,?)`</span>,[<span class="string">'小菜'</span>,<span class="string">'青花瓷'</span>,<span class="string">'03:00'</span>,<span class="string">'d:/'</span>,<span class="number">6</span>])</span><br></pre></td></tr></table></figure><h4 id="koa-router"><a href="#koa-router" class="headerlink" title="koa-router**"></a>koa-router**</h4><ul><li>npm i koa-router</li><li>引入路由模块</li><li>创建对象</li><li>和app相关联</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>,<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'首页'</span></span><br><span class="line">&#125;)</span><br><span class="line">.post(<span class="string">'/post'</span>,<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = ctx.request.body</span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.use(bodyParser())</span><br><span class="line"><span class="comment">//优化状态码的处理405和501不再是单一的404</span></span><br><span class="line">app.use(router.allowedMethods())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> <strong>路由嵌套</strong></p><p>koa中把路由模块单独抽离出来，是希望可以开发大型的企业项目，可以有多级的路由嵌套。</p><p>以下是我们的目录树：</p><blockquote><p>├─03_koa_router<br>│  │  app.js<br>│<br>└─router<br>├─cat<br>├─new<br>└─user<br>       admin.js<br>       company.js<br>       index.js</p></blockquote><p>app.js中我们需要引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router.use(<span class="string">'/user'</span>,<span class="built_in">require</span>(<span class="string">'./router/user'</span>))</span><br><span class="line">app.use(router.routes())</span><br></pre></td></tr></table></figure><p>index.js</p><p><code></code></p><h4 id="koa-art-template"><a href="#koa-art-template" class="headerlink" title="koa-art-template**"></a>koa-art-template**</h4><ul><li>模板引擎</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> render = <span class="built_in">require</span>(<span class="string">'koa-art-template'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">render(app,&#123;</span><br><span class="line">    <span class="comment">//到view中去找</span></span><br><span class="line">  root: path.join(__dirname,<span class="string">'view'</span>),</span><br><span class="line">    <span class="comment">//后缀文件名</span></span><br><span class="line">  extname: <span class="string">'.html'</span>,</span><br><span class="line">  debug: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/'</span>,<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="comment">//使用render函数</span></span><br><span class="line">  ctx.render(<span class="string">'index'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.use(router.allowedMethods())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="koa-static"><a href="#koa-static" class="headerlink" title="koa-static"></a><strong>koa-static</strong></h4><blockquote><p>这里面有点难以理解，我们只需要在上面的代码加上以下的两句代码即可，但是我们的index.html中的</p><p><script src="index.js"></script>//这里面不需要写目录文件夹名，一旦写就错了，如果写的话，我们需要判断</p></blockquote><ul><li>const static = require(‘koa-static’)</li><li>app.use(static(path.resolve(‘./js’)))</li></ul><p><code>前端静态写了目录文件夹名称的需要进行判断</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx,next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(ctx.url.startsWith(<span class="string">'/js'</span>))&#123;</span><br><span class="line">      <span class="comment">//一般的request请求不能修改，但是例外</span></span><br><span class="line">    ctx.url = ctx.url.replace(<span class="string">'/js'</span>,<span class="string">''</span>)</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//无论满足不满足都应该放行</span></span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="koa-session"><a href="#koa-session" class="headerlink" title="koa-session"></a>koa-session</h4><ul><li>必须引入koa-session</li><li>必须在路由挂载之前</li><li>一般都为默认值，不修改</li><li>signed如果设置false</li></ul><p><img src="/2019/03/15/node/node/C:/Users\LRY-NB\AppData\Roaming\Typora\typora-user-images\1563256801627.png" alt="1563256801627"></p><p>则别人会获取到，然后进行解密。再篡改就麻烦了，所以我们一般设置为true，这样就会有个签名和初始值是对应的，修改的话后台会报异常</p><ul><li>httpOnly如果为true，我们客户端document.cookie就会获得到。反正不会</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> render = <span class="built_in">require</span>(<span class="string">'koa-art-template'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">render(app,&#123;</span><br><span class="line">  root: path.join(__dirname,<span class="string">'view'</span>),</span><br><span class="line">  extname: <span class="string">'.html'</span>,</span><br><span class="line">  debug: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/'</span>,<span class="keyword">async</span> ctx =&gt;&#123;</span><br><span class="line">  ctx.render(<span class="string">'index'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.post(<span class="string">'/login'</span>,<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> username = ctx.request.body.username;</span><br><span class="line">  <span class="keyword">let</span> password = ctx.request.body.password;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(username != <span class="string">"admin"</span> || password != <span class="string">"123"</span>)&#123;</span><br><span class="line">    ctx.throw(<span class="number">200</span>,<span class="string">'有急事去啦~'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//在session中存放东西</span></span><br><span class="line">    ctx.session.user = &#123;</span><br><span class="line">      username: <span class="string">'admin'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.body = <span class="string">'登录成功'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">/加密算法字符串/</span><br><span class="line">app.keys = [<span class="string">'some secret hurr'</span>]</span><br><span class="line"><span class="keyword">const</span> CONFIG = &#123;</span><br><span class="line">  key: <span class="string">'koa:sess'</span>, <span class="comment">//cookie名称</span></span><br><span class="line">  maxAge: <span class="number">86400000</span>, </span><br><span class="line">  overwrite: <span class="literal">true</span>, </span><br><span class="line">  httpOnly: <span class="literal">true</span>, 不允许客户端修改cookie</span><br><span class="line">  signed: <span class="literal">true</span>, 数字签名，保证数据不被串改</span><br><span class="line">  rolling: <span class="literal">false</span>,过期时间顺延</span><br><span class="line">  renew: <span class="literal">false</span>, 是否开启一个新的</span><br><span class="line">&#125;</span><br><span class="line">app.use(<span class="keyword">static</span>(path.resolve(<span class="string">'./js'</span>)) )</span><br><span class="line">app.use(bodyParser())</span><br><span class="line">app.use(session(CONFIG, app));</span><br><span class="line">app.use(router.routes())</span><br><span class="line">app.use(router.allowedMethods())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上的方法并不能保证信息的安全性，并且cookie的值还会有长度限制，所以改用以下的方式，解不了密</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.keys = [<span class="string">'some secret hurr'</span>]</span><br><span class="line"><span class="keyword">let</span> store = &#123;</span><br><span class="line">  storage: &#123;&#125;,</span><br><span class="line">  get(key)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.storage[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  set(key,sess)&#123;</span><br><span class="line">    <span class="keyword">this</span>.storage[key] = sess</span><br><span class="line">  &#125;,</span><br><span class="line">  destroy (key) &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.storage[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">app.use(session(&#123;store&#125;, app));</span><br></pre></td></tr></table></figure><h4 id="koa中出错处理"><a href="#koa中出错处理" class="headerlink" title="koa中出错处理"></a>koa中出错处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ctx.throw()<span class="comment">//抛出异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx,next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">  &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    ctx.status = <span class="number">200</span></span><br><span class="line">    ctx.body = <span class="string">`&lt;div&gt;你访问的页面失联了&lt;/div&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> key_len = <span class="number">1024</span></span><br><span class="line"><span class="keyword">const</span> key_count = <span class="number">2048</span></span><br><span class="line"><span class="keyword">let</span> char = <span class="string">'idOFIGLSFGJKSFGfHSGFHusakjfds#￥#@6556aHGSFff&#123;&#125;D&#125;&#123;：SFJAfdsafJ*（……%5KFSdgfdasfkdsjDJF355435&amp;*'</span></span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; key_count; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> key = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; key_len; j++)&#123;</span><br><span class="line">    key += char[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*char.length)]</span><br><span class="line">  &#125;</span><br><span class="line">  arr.push(key)</span><br><span class="line">&#125;</span><br><span class="line">fs.writeFileSync(<span class="string">'.keys'</span>,arr.join(<span class="string">'/n'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`get <span class="subst">$&#123;key_count&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一篇&quot;&gt;&lt;a href=&quot;#第一篇&quot; class=&quot;headerlink&quot; title=&quot;第一篇&quot;&gt;&lt;/a&gt;第一篇&lt;/h1&gt;&lt;h2 id=&quot;what‘s-node？&quot;&gt;&lt;a href=&quot;#what‘s-node？&quot; class=&quot;headerlink&quot; title=&quot;what‘s node？&quot;&gt;&lt;/a&gt;what‘s node？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;node既不是一种语言，也不是一个框架，更不是一个库。而是一种能让JavaScript运行在服务器上的一个平台&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;首先要下载node.js 自行到官网中下载。注意两个版本的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;node中是以模块来划分作用域&quot;&gt;&lt;a href=&quot;#node中是以模块来划分作用域&quot; class=&quot;headerlink&quot; title=&quot;node中是以模块来划分作用域&quot;&gt;&lt;/a&gt;node中是以模块来划分作用域&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;node里面分为两个作用域，全局作用域（glogbal）和模块作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;require（’模块标识符’） —–我们需引入模块需要用到的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户自定义模块—-自己定义的一个js文件模块&lt;/li&gt;
&lt;li&gt;系统提供模块—例如:fs,http…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="node" scheme="http://yoursite.com/categories/node/"/>
    
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://yoursite.com/2019/03/10/JavaScript/Ajax/"/>
    <id>http://yoursite.com/2019/03/10/JavaScript/Ajax/</id>
    <published>2019-03-10T07:14:03.000Z</published>
    <updated>2019-07-28T05:03:48.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、AJAX"><a href="#1、AJAX" class="headerlink" title="1、AJAX"></a>1、AJAX</h1><h2 id="为什么会发生Ajax跨域？"><a href="#为什么会发生Ajax跨域？" class="headerlink" title="为什么会发生Ajax跨域？"></a>为什么会发生Ajax跨域？</h2><ul><li>浏览器限制</li><li>跨域（不是本地）同源策略</li><li>XHR请求</li></ul><p>所以解决思路：利用jsonp，利用jsonp解决跨域，后台需要改动代码</p><h3 id="一、Ajax的作用是什么：可以实现网页异步更新，这就意味着我们无需加载整个页面的情况下，实行对网页的某一个部分进行更新。也就是实现了页面与web服务器之间数据的异步传输。好了以上都是废话，言简意赅的就是：可以实现页面的局部刷新。"><a href="#一、Ajax的作用是什么：可以实现网页异步更新，这就意味着我们无需加载整个页面的情况下，实行对网页的某一个部分进行更新。也就是实现了页面与web服务器之间数据的异步传输。好了以上都是废话，言简意赅的就是：可以实现页面的局部刷新。" class="headerlink" title="一、Ajax的作用是什么：可以实现网页异步更新，这就意味着我们无需加载整个页面的情况下，实行对网页的某一个部分进行更新。也就是实现了页面与web服务器之间数据的异步传输。好了以上都是废话，言简意赅的就是：可以实现页面的局部刷新。"></a>一、Ajax的作用是什么：可以实现网页异步更新，这就意味着我们无需加载整个页面的情况下，实行对网页的某一个部分进行更新。也就是实现了页面与web服务器之间数据的异步传输。好了以上都是废话，言简意赅的就是：可以实现页面的局部刷新。</h3><a id="more"></a><h3 id="二、源生的ajax请求纯文本"><a href="#二、源生的ajax请求纯文本" class="headerlink" title="二、源生的ajax请求纯文本"></a>二、源生的ajax请求纯文本</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 源生ajax --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">'GET'</span>,<span class="string">'./simple.txt'</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// xhr.onload = function()&#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   console.log(this.status);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   console.log(this.readyState);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(this.status);</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(this.readyState);</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.innerHTML = <span class="keyword">this</span>.responseText;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">      xhr.send();</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大约整个ajax可以分为四个部分。</p><ul><li><p>创建 XMLHttpRequest对象</p></li><li><p>使用open（’方式’，url，true/false）方法，第一个参数是我们以什么方式请求数据post还是get？url是我们需要请求文件的路径，第三个参数是否是按照异步请求方式（大多数都是true）；</p></li><li>发送请求</li><li>onreadystatechange中我们可以获取到返回值，来更新我们的页面。</li></ul><table><thead><tr><th style="text-align:left"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">status</td><td style="text-align:center">readyState</td></tr><tr><td style="text-align:left">0—请求未初始化</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">1—服务器已经建立连接</td><td style="text-align:center">200—-‘ok’</td></tr><tr><td style="text-align:left">2—请求以建立</td><td style="text-align:center">404—-‘未找到页面’</td></tr><tr><td style="text-align:left">3—请求已连接</td><td style="text-align:center">500—-服务器错误</td></tr><tr><td style="text-align:left">4—请求已完成，且响应就绪</td></tr></tbody></table><p>一般我们使用的状态码是，status=4 并且readyState = 200.</p><h3 id="三、ajax请求json文件"><a href="#三、ajax请求json文件" class="headerlink" title="三、ajax请求json文件"></a>三、ajax请求json文件</h3><p>这里说明一下，我在这里也遇到一个坑啊，我一开是使用的是onreadystatechange，但是没有判断状态码，这就导致了可能响应还没就绪，我就获取利用json.parse方法解析json文件。从而导致报错，如果这里不使用onreadystatechange可以使用onload，它是响应就绪才执行的。</p><ul><li>json.parse —–可以返回给定 JSON 字符串转换后的对象。</li><li>json.stringify—–将对象或者数组转换为字符串。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn'</span>&gt;</span>获取单个用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 源生ajax请求json文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>,loadUser);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">loadUser</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">'GET'</span>,<span class="string">'json1.json'</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="keyword">this</span>.status == <span class="number">200</span> &amp;&amp; <span class="keyword">this</span>.readyState == <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> str = <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined">          str += `</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>$&#123;data[0].name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>$&#123;data[0].id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">li</span>&gt;</span>$&#123;data[0].sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="undefined">          `;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.getElementById(<span class="string">'user'</span>).innerHTML = str;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      xhr.send();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、ajax请求github接口"><a href="#四、ajax请求github接口" class="headerlink" title="四、ajax请求github接口"></a>四、ajax请求github接口</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn'</span>&gt;</span>请求多个用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"users"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).addEventListener(<span class="string">'click'</span>,loadUsers);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">loadUsers</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">'GET'</span>,<span class="string">'https://api.github.com/users'</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="keyword">this</span>.status == <span class="number">200</span> &amp;&amp; <span class="keyword">this</span>.readyState == <span class="number">4</span> )&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> users = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(users);</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 遍历整个数组</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> str = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span>( <span class="keyword">let</span> i <span class="keyword">in</span> users)&#123;</span></span><br><span class="line"><span class="undefined">            str += `</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;users[i].login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="undefined">            `</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.getElementById(<span class="string">'users'</span>).innerHTML = <span class="string">'用户名：'</span>+str;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      xhr.send();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、ajax请求php"><a href="#五、ajax请求php" class="headerlink" title="五、ajax请求php"></a>五、ajax请求php</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'text'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">'btn'</span>&gt;</span>获取php数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).addEventListener(<span class="string">'click'</span>,getMessage);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> name = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).value;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> xhr =  <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">'GET'</span>,<span class="string">'demo3.php?name='</span>+name,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">      xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      xhr.send();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]))&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">'GET:你的名字是'</span>.$_GET[<span class="string">'name'</span>];</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/03/10/JavaScript/Ajax/QQ图片20190310170526.png" alt=""></p><h3 id="六、jquery中ajax的应用"><a href="#六、jquery中ajax的应用" class="headerlink" title="六、jquery中ajax的应用"></a>六、jquery中ajax的应用</h3><p>在jquery中ajax用着就特别方便，比起源生的较容易的多。</p><ul><li>dateType—指定的请求数据的方式</li><li>url—路径</li><li>success—-响应就绪会执行一个回调函数，data是返回的值。恩 。。相当于this.responseText</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">'btn'</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        dateType: <span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">        url: <span class="string">'./demo3.php?name=herry'</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="以上有没有发现都是GET请求呢？"><a href="#以上有没有发现都是GET请求呢？" class="headerlink" title="以上有没有发现都是GET请求呢？"></a>以上有没有发现都是GET请求呢？</h2><h3 id="七、POST请求数据"><a href="#七、POST请求数据" class="headerlink" title="七、POST请求数据"></a>七、POST请求数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">'POST'</span>,<span class="string">'./demo2.php'</span>);</span></span><br><span class="line"><span class="javascript">    xhr.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span></span><br><span class="line"><span class="javascript">    xhr.send(<span class="string">'name=zs&amp;age=14'</span>);</span></span><br><span class="line"><span class="javascript">    xhr.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(xhr.responseText); </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是，我们如果携带参数的话，不是在url中写了，而是以密文的方式，用send发送。同样注意的是，<strong>我们必须要设置请求头，不然的话是post不到数据的</strong></p><h1 id="2、fetch"><a href="#2、fetch" class="headerlink" title="2、fetch"></a>2、fetch</h1><p>会了ajax为何还要学习fetch</p><ul><li>语法简洁，更加语义化</li><li>基于promise实现，支持asyn/awit</li><li>脱离了xhr</li></ul><h4 id="1-fetch中的get操作"><a href="#1-fetch中的get操作" class="headerlink" title="1.fetch中的get操作"></a>1.fetch中的get操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fetch(url,&#123;</span><br><span class="line">    method: <span class="string">'GET/POST'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//json方法中包含一个promise对象，但是这个我们无需写resolve和reject，因为计算机会帮助我们判断时候成功还是失败</span></span><br><span class="line">    res.json(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)<span class="comment">//res是后台返回的数据</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"服务器错误"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2、fetch-nodejs操作"><a href="#2、fetch-nodejs操作" class="headerlink" title="2、fetch+nodejs操作"></a>2、fetch+nodejs操作</h3><p><strong>前端</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pass"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="javascript">            btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(`http://localhost:3000/login?user=$&#123;user.value&#125;&amp;pass=$&#123;pass.value&#125;`);</span></span></span><br><span class="line"><span class="javascript">                fetch(<span class="string">`http://localhost:3000/login?user=<span class="subst">$&#123;user.value&#125;</span>&amp;pass=<span class="subst">$&#123;pass.value&#125;</span>`</span>,&#123;</span></span><br><span class="line"><span class="javascript">                    method: <span class="string">'GET'</span></span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                    res.json(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    &#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res)</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(res.ok)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">document</span>.body.style.background = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">document</span>.body.style.background = <span class="string">"green"</span>;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;,()=&gt;&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"服务器错误"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;)</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>后端</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(<span class="string">""</span>,express.static(<span class="string">"./"</span>))</span><br><span class="line"><span class="keyword">let</span> users = &#123;</span><br><span class="line">    leo: <span class="string">"1111"</span></span><br><span class="line">&#125;</span><br><span class="line">app.use(<span class="string">"/login"</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(users[req.query.user] == req.query.pass)&#123;</span><br><span class="line">        res.send(&#123;<span class="attr">ok</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">"登录成功"</span>&#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.send(&#123;<span class="attr">ok</span>:<span class="number">0</span>,<span class="attr">msg</span>:<span class="string">"登录失败"</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span></span><br><span class="line">app.listen(port,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server is running <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1、AJAX&quot;&gt;&lt;a href=&quot;#1、AJAX&quot; class=&quot;headerlink&quot; title=&quot;1、AJAX&quot;&gt;&lt;/a&gt;1、AJAX&lt;/h1&gt;&lt;h2 id=&quot;为什么会发生Ajax跨域？&quot;&gt;&lt;a href=&quot;#为什么会发生Ajax跨域？&quot; class=&quot;headerlink&quot; title=&quot;为什么会发生Ajax跨域？&quot;&gt;&lt;/a&gt;为什么会发生Ajax跨域？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浏览器限制&lt;/li&gt;
&lt;li&gt;跨域（不是本地）同源策略&lt;/li&gt;
&lt;li&gt;XHR请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以解决思路：利用jsonp，利用jsonp解决跨域，后台需要改动代码&lt;/p&gt;
&lt;h3 id=&quot;一、Ajax的作用是什么：可以实现网页异步更新，这就意味着我们无需加载整个页面的情况下，实行对网页的某一个部分进行更新。也就是实现了页面与web服务器之间数据的异步传输。好了以上都是废话，言简意赅的就是：可以实现页面的局部刷新。&quot;&gt;&lt;a href=&quot;#一、Ajax的作用是什么：可以实现网页异步更新，这就意味着我们无需加载整个页面的情况下，实行对网页的某一个部分进行更新。也就是实现了页面与web服务器之间数据的异步传输。好了以上都是废话，言简意赅的就是：可以实现页面的局部刷新。&quot; class=&quot;headerlink&quot; title=&quot;一、Ajax的作用是什么：可以实现网页异步更新，这就意味着我们无需加载整个页面的情况下，实行对网页的某一个部分进行更新。也就是实现了页面与web服务器之间数据的异步传输。好了以上都是废话，言简意赅的就是：可以实现页面的局部刷新。&quot;&gt;&lt;/a&gt;一、Ajax的作用是什么：可以实现网页异步更新，这就意味着我们无需加载整个页面的情况下，实行对网页的某一个部分进行更新。也就是实现了页面与web服务器之间数据的异步传输。好了以上都是废话，言简意赅的就是：可以实现页面的局部刷新。&lt;/h3&gt;
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>art-template</title>
    <link href="http://yoursite.com/2019/03/09/%E5%B7%A5%E5%85%B7%E7%B1%BB/art-template/"/>
    <id>http://yoursite.com/2019/03/09/工具类/art-template/</id>
    <published>2019-03-09T06:35:20.000Z</published>
    <updated>2019-08-15T04:59:05.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前端如何引用"><a href="#一、前端如何引用" class="headerlink" title="一、前端如何引用"></a>一、前端如何引用</h2><ul><li>可以使用npm方式</li><li>可以使用script标签</li></ul><blockquote><p>这里我们使用script标签</p><script src="https://unpkg.com/art-template@4.13.2/lib/template-web.js"></script></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/template'</span> <span class="attr">id</span>=<span class="string">'box'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;test&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      test: <span class="string">'h'</span>,</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> html = template(<span class="string">'box'</span>,obj);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.innerHTML = html;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上就是一个模板引擎的基本使用。首先我们先写一个模板，注意不要忘记给id值，里面是我们要创建的模板，接着我们要创建一个模板对象（一定要是对象）然后创建一个模板，第一个参数是id值，第二参数是创建模板对象名。向文档中插入模板。</p><p>如果我们想要多个模板，这时候就可以使用到遍历，（个人感觉这里 有点像vue中的v-for指令）</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">'text/template'</span> id=<span class="string">'wrap'</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;&#123;each test&#125;&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123;$value&#125;&#125;&lt;li&gt;</span><br><span class="line">      &#123;&#123;/each&#125;&#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  let obj = &#123;</span></span><br><span class="line"><span class="regexp">       test : ['z','h','s'],</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     let value = template('wrap',obj);</span></span><br><span class="line"><span class="regexp">     console.log(value);</span></span><br><span class="line"><span class="regexp">     document.body.innerHTML = value;</span></span><br></pre></td></tr></table></figure><p>这样就可在页面中创建三个li标签，他们的值分别是数组中的值，当然出来each遍历，我们还有判断</p><p>if （可去官方文档中查阅）对于模板引擎也只是一点点的了解！😭</p><p><strong>浏览器中的模板引擎的应用，和jq中的ajax实例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"出发站"</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"终点站"</span> <span class="attr">id</span>=<span class="string">"end"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查询"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>车次<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>类型<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>出发站<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>到达站<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>出发时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>到达时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>距离<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"templateId"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#123;&#123;each list&#125;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.trainno&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.type&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.station&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.endstation&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.departuretime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.arrivaltime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;$value.sequenceno&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    &#123;&#123;/each&#125;&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"public/node_modules/art-template/lib/template-web.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"input[type=button]"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> start = $(<span class="string">"#start"</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> end = $(<span class="string">"#end"</span>).val();</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">          url: <span class="string">"https://api.jisuapi.com/train/station2s"</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="javascript">          data: &#123;     <span class="comment">//此时的data是相当于字符串拼接在url中</span></span></span><br><span class="line"><span class="javascript">            appkey: <span class="string">"6543d2444cbc0776"</span>,</span></span><br><span class="line"><span class="undefined">            start: start,</span></span><br><span class="line"><span class="undefined">            end: end</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          dataType: <span class="string">"jsonp"</span>,</span></span><br><span class="line"><span class="javascript">          success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="undefined">              list: data.result.list</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> html = template(<span class="string">"templateId"</span>,obj);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(html);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"table"</span>).append(html);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">         </span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、node中的模板引擎"><a href="#二、node中的模板引擎" class="headerlink" title="二、node中的模板引擎"></a>二、node中的模板引擎</h2><blockquote><p>最近发现模板引擎真是个好东西，它竟然还可以继承和引入？？牛批，这里的挖坑和填坑，我又感觉像是vue中的插槽。。</p></blockquote><h4 id="1-先看下我们的目录树"><a href="#1-先看下我们的目录树" class="headerlink" title="1. 先看下我们的目录树"></a>1. 先看下我们的目录树</h4><p><img src="/2019/03/09/工具类/art-template/QQ图片20190407122814.png" alt=""></p><ul><li>public 是存放我们的静态资源库</li><li><p>views 存放我们的视图</p><ul><li>_ layout文件夹存放我们的母版_</li><li>_ partials 存放我们的公共头部，尾部，导航栏</li><li>index .html login.html register.html（渲染文件默认到views文件夹下）</li></ul></li><li><p>app.js 入口文件</p></li></ul><h4 id="2-如何用公共的头部和尾部"><a href="#2-如何用公共的头部和尾部" class="headerlink" title="2.如何用公共的头部和尾部"></a>2.如何用公共的头部和尾部</h4><p>​    app.js中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">'html'</span>,<span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"><span class="comment">//配置插件开始</span></span><br><span class="line"><span class="keyword">let</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">//配置body-parser</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//插件配置结束</span></span><br><span class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.render(<span class="string">'index.html'</span>,&#123;</span><br><span class="line">    title: <span class="string">'hello wolrd'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​    home.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 留个样式的插槽 这样我就可以有自己单独的样式了, --&gt;</span></span><br><span class="line">  &#123;&#123;block 'style'&#125;&#125;</span><br><span class="line">  &#123;&#123;/block&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  &#123;&#123;include '../_partials/header.html'&#125;&#125;</span><br><span class="line">  <span class="comment">&lt;!-- 一个页面基本的头部和尾部都有，但是只有我们的内容不一样，所以我们就要留个坑，无论哪一个页面需要的话，填坑就行了 --&gt;</span></span><br><span class="line">  &#123;&#123;block 'content'&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>默认坑里的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  &#123;&#123;/block&#125;&#125;</span><br><span class="line">  &#123;&#123;include '../_partials/footer.html'&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 留个script插槽 --&gt;</span></span><br><span class="line">  &#123;&#123;block 'script'&#125;&#125;</span><br><span class="line">  &#123;&#123;/block&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 继承home模板 --&gt;</span></span><br><span class="line">&#123;&#123;extend './_layout/home.html'&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 填坑样式 --&gt;</span></span><br><span class="line">&#123;&#123;block 'style'&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body&#123;</span></span><br><span class="line"><span class="undefined">      background: brown;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 填坑操作 --&gt;</span></span><br><span class="line">&#123;&#123;block 'content'&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容，我会把默认内容覆盖掉<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure><p>​    footer.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>公共尾部<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    header.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>公共的头部<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、结果"><a href="#三、结果" class="headerlink" title="三、结果"></a>三、结果</h2><p><img src="/2019/03/09/工具类/art-template/QQ图片20190407125142.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前端如何引用&quot;&gt;&lt;a href=&quot;#一、前端如何引用&quot; class=&quot;headerlink&quot; title=&quot;一、前端如何引用&quot;&gt;&lt;/a&gt;一、前端如何引用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以使用npm方式&lt;/li&gt;
&lt;li&gt;可以使用script标签&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里我们使用script标签&lt;/p&gt;
&lt;script src=&quot;https://unpkg.com/art-template@4.13.2/lib/template-web.js&quot;&gt;&lt;/script&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;text/template&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;box&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;test&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;      test: &lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; html = template(&lt;span class=&quot;string&quot;&gt;&#39;box&#39;&lt;/span&gt;,obj);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.innerHTML = html;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上就是一个模板引擎的基本使用。首先我们先写一个模板，注意不要忘记给id值，里面是我们要创建的模板，接着我们要创建一个模板对象（一定要是对象）然后创建一个模板，第一个参数是id值，第二参数是创建模板对象名。向文档中插入模板。&lt;/p&gt;
&lt;p&gt;如果我们想要多个模板，这时候就可以使用到遍历，（个人感觉这里 有点像vue中的v-for指令）&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="中间件" scheme="http://yoursite.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>jsonp百度跨域搜索</title>
    <link href="http://yoursite.com/2019/03/08/%E5%AE%9E%E6%88%98%E7%B1%BB/jsonp%E7%99%BE%E5%BA%A6%E8%B7%A8%E5%9F%9F%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2019/03/08/实战类/jsonp百度跨域搜索/</id>
    <published>2019-03-08T05:18:39.000Z</published>
    <updated>2019-08-15T05:02:09.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jsonp百度跨域搜索"><a href="#jsonp百度跨域搜索" class="headerlink" title="jsonp百度跨域搜索"></a>jsonp百度跨域搜索</h1><p>恩？好像有很久没有更新博客了吧？最近了解到一点点的（也只有一点点）jsonp跨域的操作，差不多我们每天都会打开这个网页，当然不包括那些打开Google的人（没翻墙软件）那么我们是如何实现这个效果的呢？</p><p><img src="/2019/03/08/实战类/jsonp百度跨域搜索/QQ图片20190308132734.png" alt=""></p><h2 id="一、骨架"><a href="#一、骨架" class="headerlink" title="一、骨架"></a>一、骨架</h2><p>那么我们的一个基本骨架就搭建好了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">'text'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'btn'</span> &gt;</span>百度一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'show'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、功能"><a href="#二、功能" class="headerlink" title="二、功能"></a>二、功能</h2><a id="more"></a><p>这里我们用es6的语法，恩。。。当然是因为学了要用嘛</p><p>思路：我们应该首先获取到基本的元素，这里无论你用何种方式获取到。（当然这里用个坑啊，因为我一开是用的button标签从而导致浏览器默认它的类型是submit从而我一点击的时候它就会默认提交表单，所以我们要换成input标签）当然我们应该有个事件对这些元素进行基本操作，我们想一下，我们经常在百度的时候我们边打字其下的下拉列表框会有时会出现我们在文本框中搜索的关键字。当然用onkeyup(键盘抬起事件)，在这个事件中，我们首先获取的是文本框的值，其次我们要创建一个script标签，（为什么要创建script标签呢？因为script的标签有src，当然你也可以使用Img但是已经没有很多人用Img标签）xhr浏览器回拦截，不允许跨域。接着将script标签的src拼接到我们需要搜索的值，向页面中插入我们创建的标签，当然还是要删掉这个标签（要不然就会很多script标签）这里我们是执行完回调函数才删除script标签的。</p><p><img src="/2019/03/08/实战类/jsonp百度跨域搜索/QQ图片20190309142538.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> search = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>);</span><br><span class="line">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">    <span class="keyword">let</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> show = <span class="built_in">document</span>.getElementById(<span class="string">'show'</span>);</span><br><span class="line">    search.onkeydown = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> value = search.value;</span><br><span class="line">      <span class="keyword">let</span> script= <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">      script.src=<span class="string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='</span>+value+<span class="string">'&amp;cb=jsonp'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> data = arg.s;</span><br><span class="line">      ul.innerHTML = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">if</span>(data.length)</span><br><span class="line">      &#123;</span><br><span class="line">          show.style.display = <span class="string">'block'</span>;</span><br><span class="line">          data.forEach(<span class="function">(<span class="params">el,index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">          li.innerHTML = el;</span><br><span class="line">          ul.appendChild(li);</span><br><span class="line">          li.onclick = <span class="function"><span class="params">()</span>=&gt;</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">'https://www.baidu.com/s?wd='</span>+el;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        show.style.display = <span class="string">'none'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><p>cors实现跨域，它允许浏览器向跨源浏览器发出XMLHttpRequest请求，从而克服了只能同源使用的限制。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jsonp百度跨域搜索&quot;&gt;&lt;a href=&quot;#jsonp百度跨域搜索&quot; class=&quot;headerlink&quot; title=&quot;jsonp百度跨域搜索&quot;&gt;&lt;/a&gt;jsonp百度跨域搜索&lt;/h1&gt;&lt;p&gt;恩？好像有很久没有更新博客了吧？最近了解到一点点的（也只有一点点）jsonp跨域的操作，差不多我们每天都会打开这个网页，当然不包括那些打开Google的人（没翻墙软件）那么我们是如何实现这个效果的呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/08/实战类/jsonp百度跨域搜索/QQ图片20190308132734.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、骨架&quot;&gt;&lt;a href=&quot;#一、骨架&quot; class=&quot;headerlink&quot; title=&quot;一、骨架&quot;&gt;&lt;/a&gt;一、骨架&lt;/h2&gt;&lt;p&gt;那么我们的一个基本骨架就搭建好了&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;box&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;btn&#39;&lt;/span&gt; &amp;gt;&lt;/span&gt;百度一下&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;show&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二、功能&quot;&gt;&lt;a href=&quot;#二、功能&quot; class=&quot;headerlink&quot; title=&quot;二、功能&quot;&gt;&lt;/a&gt;二、功能&lt;/h2&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>json-sever</title>
    <link href="http://yoursite.com/2019/02/27/%E5%B7%A5%E5%85%B7%E7%B1%BB/json-sever/"/>
    <id>http://yoursite.com/2019/02/27/工具类/json-sever/</id>
    <published>2019-02-27T08:09:49.000Z</published>
    <updated>2019-08-15T05:00:03.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="json-server的作用是什么呢？"><a href="#json-server的作用是什么呢？" class="headerlink" title="json-server的作用是什么呢？"></a>json-server的作用是什么呢？</h2><h4 id="搭建一个本地的数据接口，对本地的数据进行增删改查"><a href="#搭建一个本地的数据接口，对本地的数据进行增删改查" class="headerlink" title="搭建一个本地的数据接口，对本地的数据进行增删改查"></a>搭建一个本地的数据接口，对本地的数据进行增删改查</h4><h3 id="配置json-server"><a href="#配置json-server" class="headerlink" title="配置json-server"></a>配置json-server</h3><h4 id="在终端中我们要安装全局的json-server-可以使用命令，npm-i-g-json-server-接着我们在任意目录下创建一个文件夹cd到这个文件夹下。初始化pakeage-json-使用命令-npm-init-y"><a href="#在终端中我们要安装全局的json-server-可以使用命令，npm-i-g-json-server-接着我们在任意目录下创建一个文件夹cd到这个文件夹下。初始化pakeage-json-使用命令-npm-init-y" class="headerlink" title="在终端中我们要安装全局的json-server  可以使用命令，npm i -g json-server.接着我们在任意目录下创建一个文件夹cd到这个文件夹下。初始化pakeage.json 使用命令 npm init -y"></a>在终端中我们要安装全局的json-server  可以使用命令，npm i -g json-server.接着我们在任意目录下创建一个文件夹cd到这个文件夹下。初始化pakeage.json 使用命令 npm init -y</h4><p><img src="/2019/02/27/工具类/json-sever/QQ图片20190227155842.png" alt=""></p><h3 id="我们需要在此文件夹下安装一个json-server"><a href="#我们需要在此文件夹下安装一个json-server" class="headerlink" title="我们需要在此文件夹下安装一个json-server"></a>我们需要在此文件夹下安装一个json-server</h3><p><img src="/2019/02/27/工具类/json-sever/QQ图片20190227155904.png" alt=""></p><p>恩，到这里你就可以看见了一个pakeage.json文件里面有。</p><a id="more"></a><p><img src="/2019/02/27/工具类/json-sever/QQ图片20190227155912.png" alt=""></p><p>如果你想启动json文件的话，正常的方式应该是：<strong>json-server –watch db.json</strong></p><p>但是不知道那个老几发现了一种更加简便的方法：把上面的这句代码拷贝到”test”:”对就是这个地方”，test我们可以改成json：server，就像这样。在终端中输入：npm run json：server</p><p><img src="/2019/02/27/工具类/json-sever/QQ图片20190227155918.png" alt=""></p><p>运行成功会有：localhost：3000，我们打开</p><ul><li>localhost:3000/users   可以获取所有用户的信息</li><li>localhost:3000/users/1 可以获取id为1的用户信息</li></ul><h2 id="使用POSTMAN（post、get、pach（更新）、delete数据）"><a href="#使用POSTMAN（post、get、pach（更新）、delete数据）" class="headerlink" title="使用POSTMAN（post、get、pach（更新）、delete数据）"></a>使用POSTMAN（post、get、pach（更新）、delete数据）</h2><p>下载postman这个软件可能会有一些困难，解决方法：自行百度</p><p>这里是选择操作数据的方式，地址栏</p><p><img src="/2019/02/27/工具类/json-sever/QQ图片20190227155924.png" alt=""></p><p><img src="/2019/02/27/工具类/json-sever/QQ图片20190227155930.png" alt=""></p><p>这里是请求头中需要填写的字段</p><p>下图就是我们的身体部分了，如果我们要是选择raw选项的话，我们必须不能够忘记花括号，而且还是英文状态下的。为此填过不少坑。</p><p><img src="/2019/02/27/工具类/json-sever/QQ图片20190227155934.png" alt=""></p><p>运行结果出现如下图，就可以代表我们post请求成功了，默认会给我们加入一个id。我们的db.json文件中会出现我们新增的内容。</p><p><img src="/2019/02/27/工具类/json-sever/QQ图片20190227155940.png" alt=""></p><h3 id="我们还可以，jsonplaceholder-com-db中的json数据"><a href="#我们还可以，jsonplaceholder-com-db中的json数据" class="headerlink" title="我们还可以，jsonplaceholder.com/db中的json数据"></a>我们还可以，<a href="http://jsonplaceholder.typicode.com/db" target="_blank" rel="noopener">jsonplaceholder.com/db</a>中的json数据</h3><p><img src="/2019/02/27/工具类/json-sever/QQ图片20190227174931.png" alt=""></p><p>我们再运行：npm json:server:remote  出现下图，则获取成功，如果报错的话我们把端口号和文件重新打开，再重新运行即可。</p><p><img src="/2019/02/27/工具类/json-sever/QQ图片20190227175339.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;json-server的作用是什么呢？&quot;&gt;&lt;a href=&quot;#json-server的作用是什么呢？&quot; class=&quot;headerlink&quot; title=&quot;json-server的作用是什么呢？&quot;&gt;&lt;/a&gt;json-server的作用是什么呢？&lt;/h2&gt;&lt;h4 id=&quot;搭建一个本地的数据接口，对本地的数据进行增删改查&quot;&gt;&lt;a href=&quot;#搭建一个本地的数据接口，对本地的数据进行增删改查&quot; class=&quot;headerlink&quot; title=&quot;搭建一个本地的数据接口，对本地的数据进行增删改查&quot;&gt;&lt;/a&gt;搭建一个本地的数据接口，对本地的数据进行增删改查&lt;/h4&gt;&lt;h3 id=&quot;配置json-server&quot;&gt;&lt;a href=&quot;#配置json-server&quot; class=&quot;headerlink&quot; title=&quot;配置json-server&quot;&gt;&lt;/a&gt;配置json-server&lt;/h3&gt;&lt;h4 id=&quot;在终端中我们要安装全局的json-server-可以使用命令，npm-i-g-json-server-接着我们在任意目录下创建一个文件夹cd到这个文件夹下。初始化pakeage-json-使用命令-npm-init-y&quot;&gt;&lt;a href=&quot;#在终端中我们要安装全局的json-server-可以使用命令，npm-i-g-json-server-接着我们在任意目录下创建一个文件夹cd到这个文件夹下。初始化pakeage-json-使用命令-npm-init-y&quot; class=&quot;headerlink&quot; title=&quot;在终端中我们要安装全局的json-server  可以使用命令，npm i -g json-server.接着我们在任意目录下创建一个文件夹cd到这个文件夹下。初始化pakeage.json 使用命令 npm init -y&quot;&gt;&lt;/a&gt;在终端中我们要安装全局的json-server  可以使用命令，npm i -g json-server.接着我们在任意目录下创建一个文件夹cd到这个文件夹下。初始化pakeage.json 使用命令 npm init -y&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/27/工具类/json-sever/QQ图片20190227155842.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;我们需要在此文件夹下安装一个json-server&quot;&gt;&lt;a href=&quot;#我们需要在此文件夹下安装一个json-server&quot; class=&quot;headerlink&quot; title=&quot;我们需要在此文件夹下安装一个json-server&quot;&gt;&lt;/a&gt;我们需要在此文件夹下安装一个json-server&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2019/02/27/工具类/json-sever/QQ图片20190227155904.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;恩，到这里你就可以看见了一个pakeage.json文件里面有。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli脚手架搭建项目</title>
    <link href="http://yoursite.com/2019/02/20/%E5%BA%93%E5%92%8C%E6%A1%86%E6%9E%B6%E7%B1%BB/vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2019/02/20/库和框架类/vue-cli脚手架搭建项目步骤/</id>
    <published>2019-02-20T01:47:31.095Z</published>
    <updated>2019-08-15T05:01:48.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue脚手架的搭建我们所依赖的环境有：node-js可自行去官网下载。"><a href="#vue脚手架的搭建我们所依赖的环境有：node-js可自行去官网下载。" class="headerlink" title="vue脚手架的搭建我们所依赖的环境有：node.js可自行去官网下载。"></a>vue脚手架的搭建我们所依赖的环境有：node.js可自行去官网下载。</h2><h3 id="第一步-npm-i-g-vue-cli"><a href="#第一步-npm-i-g-vue-cli" class="headerlink" title="第一步 npm i -g vue -cli"></a>第一步 npm i -g vue -cli</h3><blockquote><p>我们需要打开我们的终端cmd，或者打开powershell窗口也可。你先测试一下你的node和npm是否安装成功，</p><p>node -v 和npm -v如果node或者npm版本过低也不可以安装vue脚手架。我们需要更新npm&gt;3.1的版本（npm install npm@latest -g）</p></blockquote><blockquote><p>我默认你第一步都完成了，在我们终端输入 npm install  -g vue-cli(-g默认为全局)</p></blockquote><p><img src="/2019/02/20/库和框架类/vue-cli脚手架搭建项目步骤/QQ图片20190220095019.png" alt=""></p><p>安装会有几分钟，请等待（安装一次就行了，不必多次安装）</p><a id="more"></a><h3 id="第二步-vue-init-webpack-你的项目名称"><a href="#第二步-vue-init-webpack-你的项目名称" class="headerlink" title="第二步 vue init webpack (你的项目名称)"></a>第二步 vue init webpack (你的项目名称)</h3><p><img src="/2019/02/20/库和框架类/vue-cli脚手架搭建项目步骤/QQ图片20190220095038.png" alt="QQ图片20190220095038"></p><p>然后会出现 项目的名称。我们点击回车，将会默认。然后将会出现一下的信息，project description是对项目的描述，author是作者，反正只要我们一直敲回车即可。</p><p><img src="/2019/02/20/库和框架类/vue-cli脚手架搭建项目步骤/QQ图片20190220095042.png" alt="QQ图片20190220095042"></p><p>有一个图片没有，询问我们是否安装vue-router和vue-rescource这里我们回答n,如果我们需要安装的话我们可以：前提是我们必须在这个项目文件夹下</p><p><img src="/2019/02/20/库和框架类/vue-cli脚手架搭建项目步骤/QQ图片20190220095056.png" alt="QQ图片20190220095056"></p><p>Ok到这里我们出现一下图片的信息，我们就默认为安装好了。我们只要cd到文件目录下，然后输入npm run dev 即可，如果端口号有冲突的话，我们可以在dev-server中修改。</p><p><img src="/2019/02/20/库和框架类/vue-cli脚手架搭建项目步骤/QQ图片20190220095045.png" alt="QQ图片20190220095045"></p><p>这一步就是初始化我们需要安装的依赖。</p><p><img src="/2019/02/20/库和框架类/vue-cli脚手架搭建项目步骤/QQ图片20190220095049.png" alt="QQ图片20190220095049"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vue脚手架的搭建我们所依赖的环境有：node-js可自行去官网下载。&quot;&gt;&lt;a href=&quot;#vue脚手架的搭建我们所依赖的环境有：node-js可自行去官网下载。&quot; class=&quot;headerlink&quot; title=&quot;vue脚手架的搭建我们所依赖的环境有：node.js可自行去官网下载。&quot;&gt;&lt;/a&gt;vue脚手架的搭建我们所依赖的环境有：node.js可自行去官网下载。&lt;/h2&gt;&lt;h3 id=&quot;第一步-npm-i-g-vue-cli&quot;&gt;&lt;a href=&quot;#第一步-npm-i-g-vue-cli&quot; class=&quot;headerlink&quot; title=&quot;第一步 npm i -g vue -cli&quot;&gt;&lt;/a&gt;第一步 npm i -g vue -cli&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我们需要打开我们的终端cmd，或者打开powershell窗口也可。你先测试一下你的node和npm是否安装成功，&lt;/p&gt;
&lt;p&gt;node -v 和npm -v如果node或者npm版本过低也不可以安装vue脚手架。我们需要更新npm&amp;gt;3.1的版本（npm install npm@latest -g）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我默认你第一步都完成了，在我们终端输入 npm install  -g vue-cli(-g默认为全局)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2019/02/20/库和框架类/vue-cli脚手架搭建项目步骤/QQ图片20190220095019.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;安装会有几分钟，请等待（安装一次就行了，不必多次安装）&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>容易忘记的东西</title>
    <link href="http://yoursite.com/2019/02/12/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%AE%B9%E6%98%93%E5%BF%98%E8%AE%B0%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>http://yoursite.com/2019/02/12/工具类/容易忘记的东西/</id>
    <published>2019-02-12T05:24:48.755Z</published>
    <updated>2019-07-28T05:06:50.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="年纪大了容易忘记很多东西，那我就记下来吧！"><a href="#年纪大了容易忘记很多东西，那我就记下来吧！" class="headerlink" title="年纪大了容易忘记很多东西，那我就记下来吧！"></a>年纪大了容易忘记很多东西，那我就记下来吧！</h2><h2 id="vscode快捷键"><a href="#vscode快捷键" class="headerlink" title="vscode快捷键"></a>vscode快捷键</h2><p>alt+shift+down是向下复制一行</p><p>ctrl+enter是将光标快速移动到下一行</p><p>alt+shift是选中多行</p><p>alt+b在浏览器中运行</p><p>ctrl+shift+right/left是向左或者向右选中</p><h2 id="终端中的命令"><a href="#终端中的命令" class="headerlink" title="终端中的命令"></a>终端中的命令</h2><p>live -server可以不用刷新，直接保存即可在浏览器中看到运行结果，但前提的html文件必须是index.html。</p><a id="more"></a><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><p>hexo n ‘文件名’</p><p>我们通过命令创建的.md文件会有一个同名的文件夹（这个.md文件会有初始化的格式是你自己自定义的，终于不用自己手写了太好了！），我们需要把图片添加到这个文件夹下</p><p>然后修改配置文件_config.yml需要把里面的<code>post_asset_folder</code>项为<code>true</code>。然后在hexo文件夹下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p><strong>注意这里的图片路径是相对路径，绝对不可以带有d盘之类的</strong></p><h2 id="友情链接名称也不能一样，不然也会报错。。。"><a href="#友情链接名称也不能一样，不然也会报错。。。" class="headerlink" title="友情链接名称也不能一样，不然也会报错。。。"></a>友情链接名称也不能一样，不然也会报错。。。</h2><h1 id="不要把自己的hexo文件夹发给别人，不然你无法知道会报什么错误（老泪纵横，填坑填了许久。。。。）"><a href="#不要把自己的hexo文件夹发给别人，不然你无法知道会报什么错误（老泪纵横，填坑填了许久。。。。）" class="headerlink" title="不要把自己的hexo文件夹发给别人，不然你无法知道会报什么错误（老泪纵横，填坑填了许久。。。。）"></a>不要把自己的hexo文件夹发给别人，不然你无法知道会报什么错误（老泪纵横，填坑填了许久。。。。）</h1>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;年纪大了容易忘记很多东西，那我就记下来吧！&quot;&gt;&lt;a href=&quot;#年纪大了容易忘记很多东西，那我就记下来吧！&quot; class=&quot;headerlink&quot; title=&quot;年纪大了容易忘记很多东西，那我就记下来吧！&quot;&gt;&lt;/a&gt;年纪大了容易忘记很多东西，那我就记下来吧！&lt;/h2&gt;&lt;h2 id=&quot;vscode快捷键&quot;&gt;&lt;a href=&quot;#vscode快捷键&quot; class=&quot;headerlink&quot; title=&quot;vscode快捷键&quot;&gt;&lt;/a&gt;vscode快捷键&lt;/h2&gt;&lt;p&gt;alt+shift+down是向下复制一行&lt;/p&gt;
&lt;p&gt;ctrl+enter是将光标快速移动到下一行&lt;/p&gt;
&lt;p&gt;alt+shift是选中多行&lt;/p&gt;
&lt;p&gt;alt+b在浏览器中运行&lt;/p&gt;
&lt;p&gt;ctrl+shift+right/left是向左或者向右选中&lt;/p&gt;
&lt;h2 id=&quot;终端中的命令&quot;&gt;&lt;a href=&quot;#终端中的命令&quot; class=&quot;headerlink&quot; title=&quot;终端中的命令&quot;&gt;&lt;/a&gt;终端中的命令&lt;/h2&gt;&lt;p&gt;live -server可以不用刷新，直接保存即可在浏览器中看到运行结果，但前提的html文件必须是index.html。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
</feed>
